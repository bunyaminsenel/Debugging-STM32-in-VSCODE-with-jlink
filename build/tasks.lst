ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	1120
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 2


  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              		.align	2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              		.align	2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xTickCount,"aw",%nobits
  87              		.align	2
  90              	xTickCount:
  91 0000 00000000 		.space	4
  92              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  93              		.align	2
  96              	uxTopReadyPriority:
  97 0000 00000000 		.space	4
  98              		.section	.bss.xSchedulerRunning,"aw",%nobits
  99              		.align	2
 102              	xSchedulerRunning:
 103 0000 00000000 		.space	4
 104              		.section	.bss.xPendedTicks,"aw",%nobits
 105              		.align	2
 108              	xPendedTicks:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xYieldPending,"aw",%nobits
 111              		.align	2
 114              	xYieldPending:
 115 0000 00000000 		.space	4
 116              		.section	.bss.xNumOfOverflows,"aw",%nobits
 117              		.align	2
 120              	xNumOfOverflows:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxTaskNumber,"aw",%nobits
 123              		.align	2
 126              	uxTaskNumber:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 3


 127 0000 00000000 		.space	4
 128              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 129              		.align	2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 135              		.align	2
 138              	xIdleTaskHandle:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 141              		.align	2
 144              	uxSchedulerSuspended:
 145 0000 00000000 		.space	4
 146              		.section	.text.xTaskCreateStatic,"ax",%progbits
 147              		.align	1
 148              		.global	xTaskCreateStatic
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreateStatic:
 154              	.LFB4:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 588 2
 157              		.cfi_startproc
 158              		@ args = 12, pretend = 0, frame = 40
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8EB0     		sub	sp, sp, #56
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 64
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 48
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 14


 173 000a 7A60     		str	r2, [r7, #4]
 174 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 175              		.loc 1 592 3
 176 000e 7B6B     		ldr	r3, [r7, #52]
 177 0010 002B     		cmp	r3, #0
 178 0012 0AD1     		bne	.L2
 179              	.LBB119:
 180              	.LBB120:
 181              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 15


  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 16


 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 17


 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 182              		.loc 2 195 2
 183              		.syntax unified
 184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 185 0014 4FF05003 			mov r3, #80												
 186 0018 83F31188 		msr basepri, r3											
 187 001c BFF36F8F 		isb														
 188 0020 BFF34F8F 		dsb														
 189              	
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193 0024 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 18


 194              		.loc 2 203 1
 195 0026 00BF     		nop
 196              	.L3:
 197              	.LBE120:
 198              	.LBE119:
 199              		.loc 1 592 3 discriminator 1
 200 0028 FEE7     		b	.L3
 201              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 202              		.loc 1 593 3
 203 002a BB6B     		ldr	r3, [r7, #56]
 204 002c 002B     		cmp	r3, #0
 205 002e 0AD1     		bne	.L4
 206              	.LBB121:
 207              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 208              		.loc 2 195 2
 209              		.syntax unified
 210              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 211 0030 4FF05003 			mov r3, #80												
 212 0034 83F31188 		msr basepri, r3											
 213 0038 BFF36F8F 		isb														
 214 003c BFF34F8F 		dsb														
 215              	
 216              	@ 0 "" 2
 217              		.thumb
 218              		.syntax unified
 219 0040 FB61     		str	r3, [r7, #28]
 220              		.loc 2 203 1
 221 0042 00BF     		nop
 222              	.L5:
 223              	.LBE122:
 224              	.LBE121:
 225              		.loc 1 593 3 discriminator 2
 226 0044 FEE7     		b	.L5
 227              	.L4:
 228              	.LBB123:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 229              		.loc 1 600 20
 230 0046 5C23     		movs	r3, #92
 231 0048 3B61     		str	r3, [r7, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 232              		.loc 1 601 4
 233 004a 3B69     		ldr	r3, [r7, #16]
 234 004c 5C2B     		cmp	r3, #92
 235 004e 0AD0     		beq	.L6
 236              	.LBB124:
 237              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 238              		.loc 2 195 2
 239              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 19


 240              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 241 0050 4FF05003 			mov r3, #80												
 242 0054 83F31188 		msr basepri, r3											
 243 0058 BFF36F8F 		isb														
 244 005c BFF34F8F 		dsb														
 245              	
 246              	@ 0 "" 2
 247              		.thumb
 248              		.syntax unified
 249 0060 BB61     		str	r3, [r7, #24]
 250              		.loc 2 203 1
 251 0062 00BF     		nop
 252              	.L7:
 253              	.LBE125:
 254              	.LBE124:
 255              		.loc 1 601 4 discriminator 3
 256 0064 FEE7     		b	.L7
 257              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 258              		.loc 1 602 4
 259 0066 3B69     		ldr	r3, [r7, #16]
 260              	.LBE123:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 261              		.loc 1 607 5
 262 0068 BB6B     		ldr	r3, [r7, #56]
 263 006a 002B     		cmp	r3, #0
 264 006c 1ED0     		beq	.L8
 265              		.loc 1 607 32 discriminator 1
 266 006e 7B6B     		ldr	r3, [r7, #52]
 267 0070 002B     		cmp	r3, #0
 268 0072 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 269              		.loc 1 611 13
 270 0074 BB6B     		ldr	r3, [r7, #56]
 271 0076 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 272              		.loc 1 612 22
 273 0078 7B6A     		ldr	r3, [r7, #36]
 274 007a 7A6B     		ldr	r2, [r7, #52]
 275 007c 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 276              		.loc 1 618 37
 277 007e 7B6A     		ldr	r3, [r7, #36]
 278 0080 0222     		movs	r2, #2
 279 0082 83F85920 		strb	r2, [r3, #89]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 20


 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 280              		.loc 1 622 4
 281 0086 0023     		movs	r3, #0
 282 0088 0393     		str	r3, [sp, #12]
 283 008a 7B6A     		ldr	r3, [r7, #36]
 284 008c 0293     		str	r3, [sp, #8]
 285 008e 07F11403 		add	r3, r7, #20
 286 0092 0193     		str	r3, [sp, #4]
 287 0094 3B6B     		ldr	r3, [r7, #48]
 288 0096 0093     		str	r3, [sp]
 289 0098 3B68     		ldr	r3, [r7]
 290 009a 7A68     		ldr	r2, [r7, #4]
 291 009c B968     		ldr	r1, [r7, #8]
 292 009e F868     		ldr	r0, [r7, #12]
 293 00a0 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 294              		.loc 1 623 4
 295 00a4 786A     		ldr	r0, [r7, #36]
 296 00a6 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 297 00aa 01E0     		b	.L9
 298              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 299              		.loc 1 627 12
 300 00ac 0023     		movs	r3, #0
 301 00ae 7B61     		str	r3, [r7, #20]
 302              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 303              		.loc 1 630 10
 304 00b0 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 631 2
 306 00b2 1846     		mov	r0, r3
 307 00b4 2837     		adds	r7, r7, #40
 308              	.LCFI3:
 309              		.cfi_def_cfa_offset 8
 310 00b6 BD46     		mov	sp, r7
 311              	.LCFI4:
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 00b8 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE4:
 318              		.section	.text.xTaskCreate,"ax",%progbits
 319              		.align	1
 320              		.global	xTaskCreate
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	xTaskCreate:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 21


 326              	.LFB5:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 22


 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 327              		.loc 1 739 2
 328              		.cfi_startproc
 329              		@ args = 8, pretend = 0, frame = 32
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 23


 332              	.LCFI5:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 8CB0     		sub	sp, sp, #48
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 56
 339 0004 04AF     		add	r7, sp, #16
 340              	.LCFI7:
 341              		.cfi_def_cfa 7, 40
 342 0006 F860     		str	r0, [r7, #12]
 343 0008 B960     		str	r1, [r7, #8]
 344 000a 3B60     		str	r3, [r7]
 345 000c 1346     		mov	r3, r2	@ movhi
 346 000e FB80     		strh	r3, [r7, #6]	@ movhi
 347              	.LBB126:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 348              		.loc 1 773 32
 349 0010 FB88     		ldrh	r3, [r7, #6]
 350              		.loc 1 773 14
 351 0012 9B00     		lsls	r3, r3, #2
 352 0014 1846     		mov	r0, r3
 353 0016 FFF7FEFF 		bl	pvPortMalloc
 354 001a 7861     		str	r0, [r7, #20]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 24


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 355              		.loc 1 775 6
 356 001c 7B69     		ldr	r3, [r7, #20]
 357 001e 002B     		cmp	r3, #0
 358 0020 0ED0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 359              		.loc 1 778 28
 360 0022 5C20     		movs	r0, #92
 361 0024 FFF7FEFF 		bl	pvPortMalloc
 362 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 363              		.loc 1 780 7
 364 002a FB69     		ldr	r3, [r7, #28]
 365 002c 002B     		cmp	r3, #0
 366 002e 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 367              		.loc 1 783 24
 368 0030 FB69     		ldr	r3, [r7, #28]
 369 0032 7A69     		ldr	r2, [r7, #20]
 370 0034 1A63     		str	r2, [r3, #48]
 371 0036 05E0     		b	.L14
 372              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 373              		.loc 1 789 6
 374 0038 7869     		ldr	r0, [r7, #20]
 375 003a FFF7FEFF 		bl	vPortFree
 376 003e 01E0     		b	.L14
 377              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 378              		.loc 1 794 14
 379 0040 0023     		movs	r3, #0
 380 0042 FB61     		str	r3, [r7, #28]
 381              	.L14:
 382              	.LBE126:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 383              		.loc 1 799 5
 384 0044 FB69     		ldr	r3, [r7, #28]
 385 0046 002B     		cmp	r3, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 25


 386 0048 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 387              		.loc 1 805 37
 388 004a FB69     		ldr	r3, [r7, #28]
 389 004c 0022     		movs	r2, #0
 390 004e 83F85920 		strb	r2, [r3, #89]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 391              		.loc 1 809 4
 392 0052 FA88     		ldrh	r2, [r7, #6]
 393 0054 0023     		movs	r3, #0
 394 0056 0393     		str	r3, [sp, #12]
 395 0058 FB69     		ldr	r3, [r7, #28]
 396 005a 0293     		str	r3, [sp, #8]
 397 005c FB6A     		ldr	r3, [r7, #44]
 398 005e 0193     		str	r3, [sp, #4]
 399 0060 BB6A     		ldr	r3, [r7, #40]
 400 0062 0093     		str	r3, [sp]
 401 0064 3B68     		ldr	r3, [r7]
 402 0066 B968     		ldr	r1, [r7, #8]
 403 0068 F868     		ldr	r0, [r7, #12]
 404 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 405              		.loc 1 810 4
 406 006e F869     		ldr	r0, [r7, #28]
 407 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 408              		.loc 1 811 12
 409 0074 0123     		movs	r3, #1
 410 0076 BB61     		str	r3, [r7, #24]
 411 0078 02E0     		b	.L16
 412              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 413              		.loc 1 815 12
 414 007a 4FF0FF33 		mov	r3, #-1
 415 007e BB61     		str	r3, [r7, #24]
 416              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 417              		.loc 1 818 10
 418 0080 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 419              		.loc 1 819 2
 420 0082 1846     		mov	r0, r3
 421 0084 2037     		adds	r7, r7, #32
 422              	.LCFI8:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 26


 423              		.cfi_def_cfa_offset 8
 424 0086 BD46     		mov	sp, r7
 425              	.LCFI9:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0088 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE5:
 432              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 438              	prvInitialiseNewTask:
 439              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 440              		.loc 1 832 1
 441              		.cfi_startproc
 442              		@ args = 16, pretend = 0, frame = 32
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 0000 80B5     		push	{r7, lr}
 445              	.LCFI10:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 88B0     		sub	sp, sp, #32
 450              	.LCFI11:
 451              		.cfi_def_cfa_offset 40
 452 0004 00AF     		add	r7, sp, #0
 453              	.LCFI12:
 454              		.cfi_def_cfa_register 7
 455 0006 F860     		str	r0, [r7, #12]
 456 0008 B960     		str	r1, [r7, #8]
 457 000a 7A60     		str	r2, [r7, #4]
 458 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 27


 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 459              		.loc 1 854 28
 460 000e 3B6B     		ldr	r3, [r7, #48]
 461 0010 186B     		ldr	r0, [r3, #48]
 462              		.loc 1 854 12
 463 0012 7B68     		ldr	r3, [r7, #4]
 464 0014 9B00     		lsls	r3, r3, #2
 465 0016 1A46     		mov	r2, r3
 466 0018 A521     		movs	r1, #165
 467 001a FFF7FEFF 		bl	memset
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 468              		.loc 1 864 29
 469 001e 3B6B     		ldr	r3, [r7, #48]
 470 0020 1A6B     		ldr	r2, [r3, #48]
 471              		.loc 1 864 38
 472 0022 7B68     		ldr	r3, [r7, #4]
 473 0024 03F18043 		add	r3, r3, #1073741824
 474 0028 013B     		subs	r3, r3, #1
 475 002a 9B00     		lsls	r3, r3, #2
 476              		.loc 1 864 16
 477 002c 1344     		add	r3, r3, r2
 478 002e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 479              		.loc 1 865 40
 480 0030 BB69     		ldr	r3, [r7, #24]
 481              		.loc 1 865 81
 482 0032 23F00703 		bic	r3, r3, #7
 483              		.loc 1 865 16
 484 0036 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 485              		.loc 1 868 3
 486 0038 BB69     		ldr	r3, [r7, #24]
 487 003a 03F00703 		and	r3, r3, #7
 488 003e 002B     		cmp	r3, #0
 489 0040 0AD0     		beq	.L19
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 28


 490              	.LBB127:
 491              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 492              		.loc 2 195 2
 493              		.syntax unified
 494              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 495 0042 4FF05003 			mov r3, #80												
 496 0046 83F31188 		msr basepri, r3											
 497 004a BFF36F8F 		isb														
 498 004e BFF34F8F 		dsb														
 499              	
 500              	@ 0 "" 2
 501              		.thumb
 502              		.syntax unified
 503 0052 7B61     		str	r3, [r7, #20]
 504              		.loc 2 203 1
 505 0054 00BF     		nop
 506              	.L20:
 507              	.LBE128:
 508              	.LBE127:
 509              		.loc 1 868 3 discriminator 1
 510 0056 FEE7     		b	.L20
 511              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 512              		.loc 1 892 4
 513 0058 BB68     		ldr	r3, [r7, #8]
 514 005a 002B     		cmp	r3, #0
 515 005c 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 516              		.loc 1 894 10
 517 005e 0023     		movs	r3, #0
 518 0060 FB61     		str	r3, [r7, #28]
 519              		.loc 1 894 3
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 29


 520 0062 12E0     		b	.L22
 521              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 522              		.loc 1 896 38
 523 0064 BA68     		ldr	r2, [r7, #8]
 524 0066 FB69     		ldr	r3, [r7, #28]
 525 0068 1344     		add	r3, r3, r2
 526 006a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 527              		.loc 1 896 30
 528 006c 3A6B     		ldr	r2, [r7, #48]
 529 006e FB69     		ldr	r3, [r7, #28]
 530 0070 1344     		add	r3, r3, r2
 531 0072 3433     		adds	r3, r3, #52
 532 0074 0A46     		mov	r2, r1
 533 0076 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 534              		.loc 1 901 14
 535 0078 BA68     		ldr	r2, [r7, #8]
 536 007a FB69     		ldr	r3, [r7, #28]
 537 007c 1344     		add	r3, r3, r2
 538 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 539              		.loc 1 901 6
 540 0080 002B     		cmp	r3, #0
 541 0082 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 542              		.loc 1 894 77 discriminator 2
 543 0084 FB69     		ldr	r3, [r7, #28]
 544 0086 0133     		adds	r3, r3, #1
 545 0088 FB61     		str	r3, [r7, #28]
 546              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 547              		.loc 1 894 33 discriminator 1
 548 008a FB69     		ldr	r3, [r7, #28]
 549 008c 0F2B     		cmp	r3, #15
 550 008e E9D9     		bls	.L25
 551 0090 00E0     		b	.L24
 552              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 553              		.loc 1 903 5
 554 0092 00BF     		nop
 555              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 30


 556              		.loc 1 913 55
 557 0094 3B6B     		ldr	r3, [r7, #48]
 558 0096 0022     		movs	r2, #0
 559 0098 83F84320 		strb	r2, [r3, #67]
 560 009c 03E0     		b	.L26
 561              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 562              		.loc 1 919 29
 563 009e 3B6B     		ldr	r3, [r7, #48]
 564 00a0 0022     		movs	r2, #0
 565 00a2 83F83420 		strb	r2, [r3, #52]
 566              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 567              		.loc 1 924 4
 568 00a6 BB6A     		ldr	r3, [r7, #40]
 569 00a8 372B     		cmp	r3, #55
 570 00aa 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 571              		.loc 1 926 14
 572 00ac 3723     		movs	r3, #55
 573 00ae BB62     		str	r3, [r7, #40]
 574              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 575              		.loc 1 933 23
 576 00b0 3B6B     		ldr	r3, [r7, #48]
 577 00b2 BA6A     		ldr	r2, [r7, #40]
 578 00b4 DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 579              		.loc 1 936 28
 580 00b6 3B6B     		ldr	r3, [r7, #48]
 581 00b8 BA6A     		ldr	r2, [r7, #40]
 582 00ba DA64     		str	r2, [r3, #76]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 583              		.loc 1 937 27
 584 00bc 3B6B     		ldr	r3, [r7, #48]
 585 00be 0022     		movs	r2, #0
 586 00c0 1A65     		str	r2, [r3, #80]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 31


 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 587              		.loc 1 941 2
 588 00c2 3B6B     		ldr	r3, [r7, #48]
 589 00c4 0433     		adds	r3, r3, #4
 590 00c6 1846     		mov	r0, r3
 591 00c8 FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 592              		.loc 1 942 2
 593 00cc 3B6B     		ldr	r3, [r7, #48]
 594 00ce 1833     		adds	r3, r3, #24
 595 00d0 1846     		mov	r0, r3
 596 00d2 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 597              		.loc 1 946 2
 598 00d6 3B6B     		ldr	r3, [r7, #48]
 599 00d8 3A6B     		ldr	r2, [r7, #48]
 600 00da 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 601              		.loc 1 949 2
 602 00dc BB6A     		ldr	r3, [r7, #40]
 603 00de C3F13802 		rsb	r2, r3, #56
 604 00e2 3B6B     		ldr	r3, [r7, #48]
 605 00e4 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 606              		.loc 1 950 2
 607 00e6 3B6B     		ldr	r3, [r7, #48]
 608 00e8 3A6B     		ldr	r2, [r7, #48]
 609 00ea 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 32


 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 610              		.loc 1 992 29
 611 00ec 3B6B     		ldr	r3, [r7, #48]
 612 00ee 0022     		movs	r2, #0
 613 00f0 5A65     		str	r2, [r3, #84]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 614              		.loc 1 993 27
 615 00f2 3B6B     		ldr	r3, [r7, #48]
 616 00f4 0022     		movs	r2, #0
 617 00f6 83F85820 		strb	r2, [r3, #88]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 33


1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 618              		.loc 1 1058 29
 619 00fa 3A68     		ldr	r2, [r7]
 620 00fc F968     		ldr	r1, [r7, #12]
 621 00fe B869     		ldr	r0, [r7, #24]
 622 0100 FFF7FEFF 		bl	pxPortInitialiseStack
 623 0104 0246     		mov	r2, r0
 624              		.loc 1 1058 27
 625 0106 3B6B     		ldr	r3, [r7, #48]
 626 0108 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 627              		.loc 1 1064 4
 628 010a FB6A     		ldr	r3, [r7, #44]
 629 010c 002B     		cmp	r3, #0
 630 010e 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 34


1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 631              		.loc 1 1068 18
 632 0110 FB6A     		ldr	r3, [r7, #44]
 633 0112 3A6B     		ldr	r2, [r7, #48]
 634 0114 1A60     		str	r2, [r3]
 635              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 636              		.loc 1 1074 1
 637 0116 00BF     		nop
 638 0118 2037     		adds	r7, r7, #32
 639              	.LCFI13:
 640              		.cfi_def_cfa_offset 8
 641 011a BD46     		mov	sp, r7
 642              	.LCFI14:
 643              		.cfi_def_cfa_register 13
 644              		@ sp needed
 645 011c 80BD     		pop	{r7, pc}
 646              		.cfi_endproc
 647              	.LFE6:
 649              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 650              		.align	1
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 655              	prvAddNewTaskToReadyList:
 656              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 657              		.loc 1 1078 1
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 8
 660              		@ frame_needed = 1, uses_anonymous_args = 0
 661 0000 80B5     		push	{r7, lr}
 662              	.LCFI15:
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 7, -8
 665              		.cfi_offset 14, -4
 666 0002 82B0     		sub	sp, sp, #8
 667              	.LCFI16:
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              	.LCFI17:
 671              		.cfi_def_cfa_register 7
 672 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 673              		.loc 1 1081 2
 674 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 35


1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 675              		.loc 1 1083 25
 676 000c 2D4B     		ldr	r3, .L37
 677 000e 1B68     		ldr	r3, [r3]
 678 0010 0133     		adds	r3, r3, #1
 679 0012 2C4A     		ldr	r2, .L37
 680 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 681              		.loc 1 1084 20
 682 0016 2C4B     		ldr	r3, .L37+4
 683 0018 1B68     		ldr	r3, [r3]
 684              		.loc 1 1084 5
 685 001a 002B     		cmp	r3, #0
 686 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 687              		.loc 1 1088 17
 688 001e 2A4A     		ldr	r2, .L37+4
 689 0020 7B68     		ldr	r3, [r7, #4]
 690 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 691              		.loc 1 1090 31
 692 0024 274B     		ldr	r3, .L37
 693 0026 1B68     		ldr	r3, [r3]
 694              		.loc 1 1090 6
 695 0028 012B     		cmp	r3, #1
 696 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 697              		.loc 1 1095 5
 698 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 699 0030 0DE0     		b	.L33
 700              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 701              		.loc 1 1107 26
 702 0032 264B     		ldr	r3, .L37+8
 703 0034 1B68     		ldr	r3, [r3]
 704              		.loc 1 1107 6
 705 0036 002B     		cmp	r3, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 36


 706 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 707              		.loc 1 1109 21
 708 003a 234B     		ldr	r3, .L37+4
 709 003c 1B68     		ldr	r3, [r3]
 710 003e DA6A     		ldr	r2, [r3, #44]
 711              		.loc 1 1109 45
 712 0040 7B68     		ldr	r3, [r7, #4]
 713 0042 DB6A     		ldr	r3, [r3, #44]
 714              		.loc 1 1109 7
 715 0044 9A42     		cmp	r2, r3
 716 0046 02D8     		bhi	.L33
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 717              		.loc 1 1111 19
 718 0048 1F4A     		ldr	r2, .L37+4
 719 004a 7B68     		ldr	r3, [r7, #4]
 720 004c 1360     		str	r3, [r2]
 721              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 722              		.loc 1 1124 15
 723 004e 204B     		ldr	r3, .L37+12
 724 0050 1B68     		ldr	r3, [r3]
 725 0052 0133     		adds	r3, r3, #1
 726 0054 1E4A     		ldr	r2, .L37+12
 727 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 728              		.loc 1 1129 26
 729 0058 1D4B     		ldr	r3, .L37+12
 730 005a 1A68     		ldr	r2, [r3]
 731 005c 7B68     		ldr	r3, [r7, #4]
 732 005e 5A64     		str	r2, [r3, #68]
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 733              		.loc 1 1134 3
 734 0060 7B68     		ldr	r3, [r7, #4]
 735 0062 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 37


 736 0064 1B4B     		ldr	r3, .L37+16
 737 0066 1B68     		ldr	r3, [r3]
 738 0068 9A42     		cmp	r2, r3
 739 006a 03D9     		bls	.L34
 740              		.loc 1 1134 3 is_stmt 0 discriminator 1
 741 006c 7B68     		ldr	r3, [r7, #4]
 742 006e DB6A     		ldr	r3, [r3, #44]
 743 0070 184A     		ldr	r2, .L37+16
 744 0072 1360     		str	r3, [r2]
 745              	.L34:
 746              		.loc 1 1134 3 discriminator 3
 747 0074 7B68     		ldr	r3, [r7, #4]
 748 0076 DA6A     		ldr	r2, [r3, #44]
 749 0078 1346     		mov	r3, r2
 750 007a 9B00     		lsls	r3, r3, #2
 751 007c 1344     		add	r3, r3, r2
 752 007e 9B00     		lsls	r3, r3, #2
 753 0080 154A     		ldr	r2, .L37+20
 754 0082 1A44     		add	r2, r2, r3
 755 0084 7B68     		ldr	r3, [r7, #4]
 756 0086 0433     		adds	r3, r3, #4
 757 0088 1946     		mov	r1, r3
 758 008a 1046     		mov	r0, r2
 759 008c FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 760              		.loc 1 1138 2 is_stmt 1 discriminator 3
 761 0090 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 762              		.loc 1 1140 24 discriminator 3
 763 0094 0D4B     		ldr	r3, .L37+8
 764 0096 1B68     		ldr	r3, [r3]
 765              		.loc 1 1140 4 discriminator 3
 766 0098 002B     		cmp	r3, #0
 767 009a 0ED0     		beq	.L36
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 768              		.loc 1 1144 19
 769 009c 0A4B     		ldr	r3, .L37+4
 770 009e 1B68     		ldr	r3, [r3]
 771 00a0 DA6A     		ldr	r2, [r3, #44]
 772              		.loc 1 1144 42
 773 00a2 7B68     		ldr	r3, [r7, #4]
 774 00a4 DB6A     		ldr	r3, [r3, #44]
 775              		.loc 1 1144 5
 776 00a6 9A42     		cmp	r2, r3
 777 00a8 07D2     		bcs	.L36
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 778              		.loc 1 1146 4
 779 00aa 0C4B     		ldr	r3, .L37+24
 780 00ac 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 38


 781 00b0 1A60     		str	r2, [r3]
 782              		.syntax unified
 783              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 784 00b2 BFF34F8F 		dsb
 785              	@ 0 "" 2
 786              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 787 00b6 BFF36F8F 		isb
 788              	@ 0 "" 2
 789              		.thumb
 790              		.syntax unified
 791              	.L36:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 792              		.loc 1 1157 1
 793 00ba 00BF     		nop
 794 00bc 0837     		adds	r7, r7, #8
 795              	.LCFI18:
 796              		.cfi_def_cfa_offset 8
 797 00be BD46     		mov	sp, r7
 798              	.LCFI19:
 799              		.cfi_def_cfa_register 13
 800              		@ sp needed
 801 00c0 80BD     		pop	{r7, pc}
 802              	.L38:
 803 00c2 00BF     		.align	2
 804              	.L37:
 805 00c4 00000000 		.word	uxCurrentNumberOfTasks
 806 00c8 00000000 		.word	pxCurrentTCB
 807 00cc 00000000 		.word	xSchedulerRunning
 808 00d0 00000000 		.word	uxTaskNumber
 809 00d4 00000000 		.word	uxTopReadyPriority
 810 00d8 00000000 		.word	pxReadyTasksLists
 811 00dc 04ED00E0 		.word	-536810236
 812              		.cfi_endproc
 813              	.LFE7:
 815              		.section	.text.vTaskDelete,"ax",%progbits
 816              		.align	1
 817              		.global	vTaskDelete
 818              		.syntax unified
 819              		.thumb
 820              		.thumb_func
 822              	vTaskDelete:
 823              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 39


1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 824              		.loc 1 1163 2
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 16
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828 0000 80B5     		push	{r7, lr}
 829              	.LCFI20:
 830              		.cfi_def_cfa_offset 8
 831              		.cfi_offset 7, -8
 832              		.cfi_offset 14, -4
 833 0002 84B0     		sub	sp, sp, #16
 834              	.LCFI21:
 835              		.cfi_def_cfa_offset 24
 836 0004 00AF     		add	r7, sp, #0
 837              	.LCFI22:
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 840              		.loc 1 1166 3
 841 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 842              		.loc 1 1170 12
 843 000c 7B68     		ldr	r3, [r7, #4]
 844 000e 002B     		cmp	r3, #0
 845 0010 02D1     		bne	.L40
 846              		.loc 1 1170 12 is_stmt 0 discriminator 1
 847 0012 2C4B     		ldr	r3, .L49
 848 0014 1B68     		ldr	r3, [r3]
 849 0016 00E0     		b	.L41
 850              	.L40:
 851              		.loc 1 1170 12 discriminator 2
 852 0018 7B68     		ldr	r3, [r7, #4]
 853              	.L41:
 854              		.loc 1 1170 10 is_stmt 1 discriminator 4
 855 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 856              		.loc 1 1173 8 discriminator 4
 857 001c FB68     		ldr	r3, [r7, #12]
 858 001e 0433     		adds	r3, r3, #4
 859 0020 1846     		mov	r0, r3
 860 0022 FFF7FEFF 		bl	uxListRemove
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 40


1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 861              		.loc 1 1183 8 discriminator 4
 862 0026 FB68     		ldr	r3, [r7, #12]
 863 0028 9B6A     		ldr	r3, [r3, #40]
 864              		.loc 1 1183 6 discriminator 4
 865 002a 002B     		cmp	r3, #0
 866 002c 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 867              		.loc 1 1185 14
 868 002e FB68     		ldr	r3, [r7, #12]
 869 0030 1833     		adds	r3, r3, #24
 870 0032 1846     		mov	r0, r3
 871 0034 FFF7FEFF 		bl	uxListRemove
 872              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 873              		.loc 1 1196 16
 874 0038 234B     		ldr	r3, .L49+4
 875 003a 1B68     		ldr	r3, [r3]
 876 003c 0133     		adds	r3, r3, #1
 877 003e 224A     		ldr	r2, .L49+4
 878 0040 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 879              		.loc 1 1198 14
 880 0042 204B     		ldr	r3, .L49
 881 0044 1B68     		ldr	r3, [r3]
 882              		.loc 1 1198 6
 883 0046 FA68     		ldr	r2, [r7, #12]
 884 0048 9A42     		cmp	r2, r3
 885 004a 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 886              		.loc 1 1205 5
 887 004c FB68     		ldr	r3, [r7, #12]
 888 004e 0433     		adds	r3, r3, #4
 889 0050 1946     		mov	r1, r3
 890 0052 1E48     		ldr	r0, .L49+8
 891 0054 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 41


1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 892              		.loc 1 1210 5
 893 0058 1D4B     		ldr	r3, .L49+12
 894 005a 1B68     		ldr	r3, [r3]
 895 005c 0133     		adds	r3, r3, #1
 896 005e 1C4A     		ldr	r2, .L49+12
 897 0060 1360     		str	r3, [r2]
 898 0062 09E0     		b	.L44
 899              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 900              		.loc 1 1225 5
 901 0064 1B4B     		ldr	r3, .L49+16
 902 0066 1B68     		ldr	r3, [r3]
 903 0068 013B     		subs	r3, r3, #1
 904 006a 1A4A     		ldr	r2, .L49+16
 905 006c 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 906              		.loc 1 1227 5
 907 006e F868     		ldr	r0, [r7, #12]
 908 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 909              		.loc 1 1231 5
 910 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 911              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 912              		.loc 1 1234 3
 913 0078 FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 914              		.loc 1 1238 25
 915 007c 164B     		ldr	r3, .L49+20
 916 007e 1B68     		ldr	r3, [r3]
 917              		.loc 1 1238 5
 918 0080 002B     		cmp	r3, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 42


 919 0082 1BD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 920              		.loc 1 1240 14
 921 0084 0F4B     		ldr	r3, .L49
 922 0086 1B68     		ldr	r3, [r3]
 923              		.loc 1 1240 6
 924 0088 FA68     		ldr	r2, [r7, #12]
 925 008a 9A42     		cmp	r2, r3
 926 008c 16D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 927              		.loc 1 1242 5
 928 008e 134B     		ldr	r3, .L49+24
 929 0090 1B68     		ldr	r3, [r3]
 930 0092 002B     		cmp	r3, #0
 931 0094 0AD0     		beq	.L46
 932              	.LBB129:
 933              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 934              		.loc 2 195 2
 935              		.syntax unified
 936              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 937 0096 4FF05003 			mov r3, #80												
 938 009a 83F31188 		msr basepri, r3											
 939 009e BFF36F8F 		isb														
 940 00a2 BFF34F8F 		dsb														
 941              	
 942              	@ 0 "" 2
 943              		.thumb
 944              		.syntax unified
 945 00a6 BB60     		str	r3, [r7, #8]
 946              		.loc 2 203 1
 947 00a8 00BF     		nop
 948              	.L47:
 949              	.LBE130:
 950              	.LBE129:
 951              		.loc 1 1242 5 discriminator 1
 952 00aa FEE7     		b	.L47
 953              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 954              		.loc 1 1243 5
 955 00ac 0C4B     		ldr	r3, .L49+28
 956 00ae 4FF08052 		mov	r2, #268435456
 957 00b2 1A60     		str	r2, [r3]
 958              		.syntax unified
 959              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 960 00b4 BFF34F8F 		dsb
 961              	@ 0 "" 2
 962              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 963 00b8 BFF36F8F 		isb
 964              	@ 0 "" 2
 965              		.thumb
 966              		.syntax unified
 967              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 43


1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968              		.loc 1 1250 2
 969 00bc 00BF     		nop
 970 00be 1037     		adds	r7, r7, #16
 971              	.LCFI23:
 972              		.cfi_def_cfa_offset 8
 973 00c0 BD46     		mov	sp, r7
 974              	.LCFI24:
 975              		.cfi_def_cfa_register 13
 976              		@ sp needed
 977 00c2 80BD     		pop	{r7, pc}
 978              	.L50:
 979              		.align	2
 980              	.L49:
 981 00c4 00000000 		.word	pxCurrentTCB
 982 00c8 00000000 		.word	uxTaskNumber
 983 00cc 00000000 		.word	xTasksWaitingTermination
 984 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 985 00d4 00000000 		.word	uxCurrentNumberOfTasks
 986 00d8 00000000 		.word	xSchedulerRunning
 987 00dc 00000000 		.word	uxSchedulerSuspended
 988 00e0 04ED00E0 		.word	-536810236
 989              		.cfi_endproc
 990              	.LFE8:
 992              		.section	.text.vTaskDelayUntil,"ax",%progbits
 993              		.align	1
 994              		.global	vTaskDelayUntil
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 999              	vTaskDelayUntil:
 1000              	.LFB9:
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1001              		.loc 1 1258 2
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 40
 1004              		@ frame_needed = 1, uses_anonymous_args = 0
 1005 0000 80B5     		push	{r7, lr}
 1006              	.LCFI25:
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 7, -8
 1009              		.cfi_offset 14, -4
 1010 0002 8AB0     		sub	sp, sp, #40
 1011              	.LCFI26:
 1012              		.cfi_def_cfa_offset 48
 1013 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 44


 1014              	.LCFI27:
 1015              		.cfi_def_cfa_register 7
 1016 0006 7860     		str	r0, [r7, #4]
 1017 0008 3960     		str	r1, [r7]
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1018              		.loc 1 1260 30
 1019 000a 0023     		movs	r3, #0
 1020 000c 7B62     		str	r3, [r7, #36]
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1021              		.loc 1 1262 3
 1022 000e 7B68     		ldr	r3, [r7, #4]
 1023 0010 002B     		cmp	r3, #0
 1024 0012 0AD1     		bne	.L52
 1025              	.LBB131:
 1026              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1027              		.loc 2 195 2
 1028              		.syntax unified
 1029              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1030 0014 4FF05003 			mov r3, #80												
 1031 0018 83F31188 		msr basepri, r3											
 1032 001c BFF36F8F 		isb														
 1033 0020 BFF34F8F 		dsb														
 1034              	
 1035              	@ 0 "" 2
 1036              		.thumb
 1037              		.syntax unified
 1038 0024 7B61     		str	r3, [r7, #20]
 1039              		.loc 2 203 1
 1040 0026 00BF     		nop
 1041              	.L53:
 1042              	.LBE132:
 1043              	.LBE131:
 1044              		.loc 1 1262 3 discriminator 1
 1045 0028 FEE7     		b	.L53
 1046              	.L52:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1047              		.loc 1 1263 3
 1048 002a 3B68     		ldr	r3, [r7]
 1049 002c 002B     		cmp	r3, #0
 1050 002e 0AD1     		bne	.L54
 1051              	.LBB133:
 1052              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1053              		.loc 2 195 2
 1054              		.syntax unified
 1055              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1056 0030 4FF05003 			mov r3, #80												
 1057 0034 83F31188 		msr basepri, r3											
 1058 0038 BFF36F8F 		isb														
 1059 003c BFF34F8F 		dsb														
 1060              	
 1061              	@ 0 "" 2
 1062              		.thumb
 1063              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 45


 1064 0040 3B61     		str	r3, [r7, #16]
 1065              		.loc 2 203 1
 1066 0042 00BF     		nop
 1067              	.L55:
 1068              	.LBE134:
 1069              	.LBE133:
 1070              		.loc 1 1263 3 discriminator 2
 1071 0044 FEE7     		b	.L55
 1072              	.L54:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1073              		.loc 1 1264 3
 1074 0046 2A4B     		ldr	r3, .L64
 1075 0048 1B68     		ldr	r3, [r3]
 1076 004a 002B     		cmp	r3, #0
 1077 004c 0AD0     		beq	.L56
 1078              	.LBB135:
 1079              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1080              		.loc 2 195 2
 1081              		.syntax unified
 1082              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1083 004e 4FF05003 			mov r3, #80												
 1084 0052 83F31188 		msr basepri, r3											
 1085 0056 BFF36F8F 		isb														
 1086 005a BFF34F8F 		dsb														
 1087              	
 1088              	@ 0 "" 2
 1089              		.thumb
 1090              		.syntax unified
 1091 005e FB60     		str	r3, [r7, #12]
 1092              		.loc 2 203 1
 1093 0060 00BF     		nop
 1094              	.L57:
 1095              	.LBE136:
 1096              	.LBE135:
 1097              		.loc 1 1264 3 discriminator 3
 1098 0062 FEE7     		b	.L57
 1099              	.L56:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1100              		.loc 1 1266 3
 1101 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1102              	.LBB137:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1103              		.loc 1 1270 21
 1104 0068 224B     		ldr	r3, .L64+4
 1105 006a 1B68     		ldr	r3, [r3]
 1106 006c 3B62     		str	r3, [r7, #32]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1107              		.loc 1 1273 18
 1108 006e 7B68     		ldr	r3, [r7, #4]
 1109 0070 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 46


 1110              		.loc 1 1273 16
 1111 0072 3A68     		ldr	r2, [r7]
 1112 0074 1344     		add	r3, r3, r2
 1113 0076 FB61     		str	r3, [r7, #28]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1114              		.loc 1 1275 26
 1115 0078 7B68     		ldr	r3, [r7, #4]
 1116 007a 1B68     		ldr	r3, [r3]
 1117              		.loc 1 1275 6
 1118 007c 3A6A     		ldr	r2, [r7, #32]
 1119 007e 9A42     		cmp	r2, r3
 1120 0080 0BD2     		bcs	.L58
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1121              		.loc 1 1282 25
 1122 0082 7B68     		ldr	r3, [r7, #4]
 1123 0084 1B68     		ldr	r3, [r3]
 1124              		.loc 1 1282 7
 1125 0086 FA69     		ldr	r2, [r7, #28]
 1126 0088 9A42     		cmp	r2, r3
 1127 008a 11D2     		bcs	.L59
 1128              		.loc 1 1282 47 discriminator 1
 1129 008c FA69     		ldr	r2, [r7, #28]
 1130 008e 3B6A     		ldr	r3, [r7, #32]
 1131 0090 9A42     		cmp	r2, r3
 1132 0092 0DD9     		bls	.L59
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1133              		.loc 1 1284 19
 1134 0094 0123     		movs	r3, #1
 1135 0096 7B62     		str	r3, [r7, #36]
 1136 0098 0AE0     		b	.L59
 1137              	.L58:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1138              		.loc 1 1296 25
 1139 009a 7B68     		ldr	r3, [r7, #4]
 1140 009c 1B68     		ldr	r3, [r3]
 1141              		.loc 1 1296 7
 1142 009e FA69     		ldr	r2, [r7, #28]
 1143 00a0 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 47


 1144 00a2 03D3     		bcc	.L60
 1145              		.loc 1 1296 47 discriminator 1
 1146 00a4 FA69     		ldr	r2, [r7, #28]
 1147 00a6 3B6A     		ldr	r3, [r7, #32]
 1148 00a8 9A42     		cmp	r2, r3
 1149 00aa 01D9     		bls	.L59
 1150              	.L60:
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1151              		.loc 1 1298 19
 1152 00ac 0123     		movs	r3, #1
 1153 00ae 7B62     		str	r3, [r7, #36]
 1154              	.L59:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1155              		.loc 1 1307 24
 1156 00b0 7B68     		ldr	r3, [r7, #4]
 1157 00b2 FA69     		ldr	r2, [r7, #28]
 1158 00b4 1A60     		str	r2, [r3]
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1159              		.loc 1 1309 6
 1160 00b6 7B6A     		ldr	r3, [r7, #36]
 1161 00b8 002B     		cmp	r3, #0
 1162 00ba 06D0     		beq	.L61
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1163              		.loc 1 1315 5
 1164 00bc FA69     		ldr	r2, [r7, #28]
 1165 00be 3B6A     		ldr	r3, [r7, #32]
 1166 00c0 D31A     		subs	r3, r2, r3
 1167 00c2 0021     		movs	r1, #0
 1168 00c4 1846     		mov	r0, r3
 1169 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1170              	.L61:
 1171              	.LBE137:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1172              		.loc 1 1322 21
 1173 00ca FFF7FEFF 		bl	xTaskResumeAll
 1174 00ce B861     		str	r0, [r7, #24]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 48


1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1175              		.loc 1 1326 5
 1176 00d0 BB69     		ldr	r3, [r7, #24]
 1177 00d2 002B     		cmp	r3, #0
 1178 00d4 07D1     		bne	.L63
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1179              		.loc 1 1328 4
 1180 00d6 084B     		ldr	r3, .L64+8
 1181 00d8 4FF08052 		mov	r2, #268435456
 1182 00dc 1A60     		str	r2, [r3]
 1183              		.syntax unified
 1184              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1185 00de BFF34F8F 		dsb
 1186              	@ 0 "" 2
 1187              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1188 00e2 BFF36F8F 		isb
 1189              	@ 0 "" 2
 1190              		.thumb
 1191              		.syntax unified
 1192              	.L63:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1193              		.loc 1 1334 2
 1194 00e6 00BF     		nop
 1195 00e8 2837     		adds	r7, r7, #40
 1196              	.LCFI28:
 1197              		.cfi_def_cfa_offset 8
 1198 00ea BD46     		mov	sp, r7
 1199              	.LCFI29:
 1200              		.cfi_def_cfa_register 13
 1201              		@ sp needed
 1202 00ec 80BD     		pop	{r7, pc}
 1203              	.L65:
 1204 00ee 00BF     		.align	2
 1205              	.L64:
 1206 00f0 00000000 		.word	uxSchedulerSuspended
 1207 00f4 00000000 		.word	xTickCount
 1208 00f8 04ED00E0 		.word	-536810236
 1209              		.cfi_endproc
 1210              	.LFE9:
 1212              		.section	.text.vTaskDelay,"ax",%progbits
 1213              		.align	1
 1214              		.global	vTaskDelay
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1219              	vTaskDelay:
 1220              	.LFB10:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 49


1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1221              		.loc 1 1342 2
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 16
 1224              		@ frame_needed = 1, uses_anonymous_args = 0
 1225 0000 80B5     		push	{r7, lr}
 1226              	.LCFI30:
 1227              		.cfi_def_cfa_offset 8
 1228              		.cfi_offset 7, -8
 1229              		.cfi_offset 14, -4
 1230 0002 84B0     		sub	sp, sp, #16
 1231              	.LCFI31:
 1232              		.cfi_def_cfa_offset 24
 1233 0004 00AF     		add	r7, sp, #0
 1234              	.LCFI32:
 1235              		.cfi_def_cfa_register 7
 1236 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1237              		.loc 1 1343 13
 1238 0008 0023     		movs	r3, #0
 1239 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1240              		.loc 1 1346 5
 1241 000c 7B68     		ldr	r3, [r7, #4]
 1242 000e 002B     		cmp	r3, #0
 1243 0010 17D0     		beq	.L67
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1244              		.loc 1 1348 4
 1245 0012 134B     		ldr	r3, .L72
 1246 0014 1B68     		ldr	r3, [r3]
 1247 0016 002B     		cmp	r3, #0
 1248 0018 0AD0     		beq	.L68
 1249              	.LBB138:
 1250              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1251              		.loc 2 195 2
 1252              		.syntax unified
 1253              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1254 001a 4FF05003 			mov r3, #80												
 1255 001e 83F31188 		msr basepri, r3											
 1256 0022 BFF36F8F 		isb														
 1257 0026 BFF34F8F 		dsb														
 1258              	
 1259              	@ 0 "" 2
 1260              		.thumb
 1261              		.syntax unified
 1262 002a BB60     		str	r3, [r7, #8]
 1263              		.loc 2 203 1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 50


 1264 002c 00BF     		nop
 1265              	.L69:
 1266              	.LBE139:
 1267              	.LBE138:
 1268              		.loc 1 1348 4 discriminator 1
 1269 002e FEE7     		b	.L69
 1270              	.L68:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1271              		.loc 1 1349 4
 1272 0030 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1273              		.loc 1 1360 5
 1274 0034 0021     		movs	r1, #0
 1275 0036 7868     		ldr	r0, [r7, #4]
 1276 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1277              		.loc 1 1362 22
 1278 003c FFF7FEFF 		bl	xTaskResumeAll
 1279 0040 F860     		str	r0, [r7, #12]
 1280              	.L67:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1281              		.loc 1 1371 5
 1282 0042 FB68     		ldr	r3, [r7, #12]
 1283 0044 002B     		cmp	r3, #0
 1284 0046 07D1     		bne	.L71
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1285              		.loc 1 1373 4
 1286 0048 064B     		ldr	r3, .L72+4
 1287 004a 4FF08052 		mov	r2, #268435456
 1288 004e 1A60     		str	r2, [r3]
 1289              		.syntax unified
 1290              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1291 0050 BFF34F8F 		dsb
 1292              	@ 0 "" 2
 1293              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1294 0054 BFF36F8F 		isb
 1295              	@ 0 "" 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 51


 1296              		.thumb
 1297              		.syntax unified
 1298              	.L71:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1299              		.loc 1 1379 2
 1300 0058 00BF     		nop
 1301 005a 1037     		adds	r7, r7, #16
 1302              	.LCFI33:
 1303              		.cfi_def_cfa_offset 8
 1304 005c BD46     		mov	sp, r7
 1305              	.LCFI34:
 1306              		.cfi_def_cfa_register 13
 1307              		@ sp needed
 1308 005e 80BD     		pop	{r7, pc}
 1309              	.L73:
 1310              		.align	2
 1311              	.L72:
 1312 0060 00000000 		.word	uxSchedulerSuspended
 1313 0064 04ED00E0 		.word	-536810236
 1314              		.cfi_endproc
 1315              	.LFE10:
 1317              		.section	.text.eTaskGetState,"ax",%progbits
 1318              		.align	1
 1319              		.global	eTaskGetState
 1320              		.syntax unified
 1321              		.thumb
 1322              		.thumb_func
 1324              	eTaskGetState:
 1325              	.LFB11:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1326              		.loc 1 1387 2
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 32
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330 0000 80B5     		push	{r7, lr}
 1331              	.LCFI35:
 1332              		.cfi_def_cfa_offset 8
 1333              		.cfi_offset 7, -8
 1334              		.cfi_offset 14, -4
 1335 0002 88B0     		sub	sp, sp, #32
 1336              	.LCFI36:
 1337              		.cfi_def_cfa_offset 40
 1338 0004 00AF     		add	r7, sp, #0
 1339              	.LCFI37:
 1340              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 52


 1341 0006 7860     		str	r0, [r7, #4]
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1342              		.loc 1 1390 22
 1343 0008 7B68     		ldr	r3, [r7, #4]
 1344 000a BB61     		str	r3, [r7, #24]
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1345              		.loc 1 1392 3
 1346 000c BB69     		ldr	r3, [r7, #24]
 1347 000e 002B     		cmp	r3, #0
 1348 0010 0AD1     		bne	.L75
 1349              	.LBB140:
 1350              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1351              		.loc 2 195 2
 1352              		.syntax unified
 1353              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1354 0012 4FF05003 			mov r3, #80												
 1355 0016 83F31188 		msr basepri, r3											
 1356 001a BFF36F8F 		isb														
 1357 001e BFF34F8F 		dsb														
 1358              	
 1359              	@ 0 "" 2
 1360              		.thumb
 1361              		.syntax unified
 1362 0022 BB60     		str	r3, [r7, #8]
 1363              		.loc 2 203 1
 1364 0024 00BF     		nop
 1365              	.L76:
 1366              	.LBE141:
 1367              	.LBE140:
 1368              		.loc 1 1392 3 discriminator 1
 1369 0026 FEE7     		b	.L76
 1370              	.L75:
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1371              		.loc 1 1394 13
 1372 0028 234B     		ldr	r3, .L87
 1373 002a 1B68     		ldr	r3, [r3]
 1374              		.loc 1 1394 5
 1375 002c BA69     		ldr	r2, [r7, #24]
 1376 002e 9A42     		cmp	r2, r3
 1377 0030 02D1     		bne	.L77
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1378              		.loc 1 1397 12
 1379 0032 0023     		movs	r3, #0
 1380 0034 FB77     		strb	r3, [r7, #31]
 1381 0036 3AE0     		b	.L78
 1382              	.L77:
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 53


 1383              		.loc 1 1401 4
 1384 0038 FFF7FEFF 		bl	vPortEnterCritical
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1385              		.loc 1 1403 17
 1386 003c BB69     		ldr	r3, [r7, #24]
 1387 003e 5B69     		ldr	r3, [r3, #20]
 1388 0040 7B61     		str	r3, [r7, #20]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1389              		.loc 1 1404 19
 1390 0042 1E4B     		ldr	r3, .L87+4
 1391 0044 1B68     		ldr	r3, [r3]
 1392 0046 3B61     		str	r3, [r7, #16]
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1393              		.loc 1 1405 29
 1394 0048 1D4B     		ldr	r3, .L87+8
 1395 004a 1B68     		ldr	r3, [r3]
 1396 004c FB60     		str	r3, [r7, #12]
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1397              		.loc 1 1407 4
 1398 004e FFF7FEFF 		bl	vPortExitCritical
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1399              		.loc 1 1409 6
 1400 0052 7A69     		ldr	r2, [r7, #20]
 1401 0054 3B69     		ldr	r3, [r7, #16]
 1402 0056 9A42     		cmp	r2, r3
 1403 0058 03D0     		beq	.L79
 1404              		.loc 1 1409 41 discriminator 1
 1405 005a 7A69     		ldr	r2, [r7, #20]
 1406 005c FB68     		ldr	r3, [r7, #12]
 1407 005e 9A42     		cmp	r2, r3
 1408 0060 02D1     		bne	.L80
 1409              	.L79:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1410              		.loc 1 1413 13
 1411 0062 0223     		movs	r3, #2
 1412 0064 FB77     		strb	r3, [r7, #31]
 1413 0066 22E0     		b	.L78
 1414              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1415              		.loc 1 1417 12
 1416 0068 7B69     		ldr	r3, [r7, #20]
 1417 006a 164A     		ldr	r2, .L87+12
 1418 006c 9342     		cmp	r3, r2
 1419 006e 12D1     		bne	.L81
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 54


1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1420              		.loc 1 1422 10
 1421 0070 BB69     		ldr	r3, [r7, #24]
 1422 0072 9B6A     		ldr	r3, [r3, #40]
 1423              		.loc 1 1422 8
 1424 0074 002B     		cmp	r3, #0
 1425 0076 0BD1     		bne	.L82
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1426              		.loc 1 1430 17
 1427 0078 BB69     		ldr	r3, [r7, #24]
 1428 007a 93F85830 		ldrb	r3, [r3, #88]
 1429 007e DBB2     		uxtb	r3, r3
 1430              		.loc 1 1430 10
 1431 0080 012B     		cmp	r3, #1
 1432 0082 02D1     		bne	.L83
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1433              		.loc 1 1432 17
 1434 0084 0223     		movs	r3, #2
 1435 0086 FB77     		strb	r3, [r7, #31]
 1436 0088 11E0     		b	.L78
 1437              	.L83:
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1438              		.loc 1 1436 17
 1439 008a 0323     		movs	r3, #3
 1440 008c FB77     		strb	r3, [r7, #31]
 1441 008e 0EE0     		b	.L78
 1442              	.L82:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1443              		.loc 1 1447 15
 1444 0090 0223     		movs	r3, #2
 1445 0092 FB77     		strb	r3, [r7, #31]
 1446 0094 0BE0     		b	.L78
 1447              	.L81:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 55


1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1448              		.loc 1 1453 12
 1449 0096 7B69     		ldr	r3, [r7, #20]
 1450 0098 0B4A     		ldr	r2, .L87+16
 1451 009a 9342     		cmp	r3, r2
 1452 009c 02D0     		beq	.L84
 1453              		.loc 1 1453 59 discriminator 1
 1454 009e 7B69     		ldr	r3, [r7, #20]
 1455 00a0 002B     		cmp	r3, #0
 1456 00a2 02D1     		bne	.L85
 1457              	.L84:
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1458              		.loc 1 1458 14
 1459 00a4 0423     		movs	r3, #4
 1460 00a6 FB77     		strb	r3, [r7, #31]
 1461 00a8 01E0     		b	.L78
 1462              	.L85:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1463              		.loc 1 1466 13
 1464 00aa 0123     		movs	r3, #1
 1465 00ac FB77     		strb	r3, [r7, #31]
 1466              	.L78:
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1467              		.loc 1 1470 10
 1468 00ae FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1469              		.loc 1 1471 2
 1470 00b0 1846     		mov	r0, r3
 1471 00b2 2037     		adds	r7, r7, #32
 1472              	.LCFI38:
 1473              		.cfi_def_cfa_offset 8
 1474 00b4 BD46     		mov	sp, r7
 1475              	.LCFI39:
 1476              		.cfi_def_cfa_register 13
 1477              		@ sp needed
 1478 00b6 80BD     		pop	{r7, pc}
 1479              	.L88:
 1480              		.align	2
 1481              	.L87:
 1482 00b8 00000000 		.word	pxCurrentTCB
 1483 00bc 00000000 		.word	pxDelayedTaskList
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 56


 1484 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1485 00c4 00000000 		.word	xSuspendedTaskList
 1486 00c8 00000000 		.word	xTasksWaitingTermination
 1487              		.cfi_endproc
 1488              	.LFE11:
 1490              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1491              		.align	1
 1492              		.global	uxTaskPriorityGet
 1493              		.syntax unified
 1494              		.thumb
 1495              		.thumb_func
 1497              	uxTaskPriorityGet:
 1498              	.LFB12:
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1499              		.loc 1 1479 2
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 16
 1502              		@ frame_needed = 1, uses_anonymous_args = 0
 1503 0000 80B5     		push	{r7, lr}
 1504              	.LCFI40:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 0002 84B0     		sub	sp, sp, #16
 1509              	.LCFI41:
 1510              		.cfi_def_cfa_offset 24
 1511 0004 00AF     		add	r7, sp, #0
 1512              	.LCFI42:
 1513              		.cfi_def_cfa_register 7
 1514 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1515              		.loc 1 1483 3
 1516 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1517              		.loc 1 1487 12
 1518 000c 7B68     		ldr	r3, [r7, #4]
 1519 000e 002B     		cmp	r3, #0
 1520 0010 02D1     		bne	.L90
 1521              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1522 0012 074B     		ldr	r3, .L93
 1523 0014 1B68     		ldr	r3, [r3]
 1524 0016 00E0     		b	.L91
 1525              	.L90:
 1526              		.loc 1 1487 12 discriminator 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 57


 1527 0018 7B68     		ldr	r3, [r7, #4]
 1528              	.L91:
 1529              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1530 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1531              		.loc 1 1488 13 discriminator 4
 1532 001c FB68     		ldr	r3, [r7, #12]
 1533 001e DB6A     		ldr	r3, [r3, #44]
 1534 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1535              		.loc 1 1490 3 discriminator 4
 1536 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1537              		.loc 1 1492 10 discriminator 4
 1538 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1539              		.loc 1 1493 2 discriminator 4
 1540 0028 1846     		mov	r0, r3
 1541 002a 1037     		adds	r7, r7, #16
 1542              	.LCFI43:
 1543              		.cfi_def_cfa_offset 8
 1544 002c BD46     		mov	sp, r7
 1545              	.LCFI44:
 1546              		.cfi_def_cfa_register 13
 1547              		@ sp needed
 1548 002e 80BD     		pop	{r7, pc}
 1549              	.L94:
 1550              		.align	2
 1551              	.L93:
 1552 0030 00000000 		.word	pxCurrentTCB
 1553              		.cfi_endproc
 1554              	.LFE12:
 1556              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1557              		.align	1
 1558              		.global	uxTaskPriorityGetFromISR
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1563              	uxTaskPriorityGetFromISR:
 1564              	.LFB13:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1565              		.loc 1 1501 2
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 32
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569 0000 80B5     		push	{r7, lr}
 1570              	.LCFI45:
 1571              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 58


 1572              		.cfi_offset 7, -8
 1573              		.cfi_offset 14, -4
 1574 0002 88B0     		sub	sp, sp, #32
 1575              	.LCFI46:
 1576              		.cfi_def_cfa_offset 40
 1577 0004 00AF     		add	r7, sp, #0
 1578              	.LCFI47:
 1579              		.cfi_def_cfa_register 7
 1580 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1581              		.loc 1 1521 3
 1582 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1583              	.LBB142:
 1584              	.LBB143:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1585              		.loc 2 211 2
 1586              		.syntax unified
 1587              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1588 000c EFF31182 			mrs r2, basepri											
 1589 0010 4FF05003 		mov r3, #80												
 1590 0014 83F31188 		msr basepri, r3											
 1591 0018 BFF36F8F 		isb														
 1592 001c BFF34F8F 		dsb														
 1593              	
 1594              	@ 0 "" 2
 1595              		.thumb
 1596              		.syntax unified
 1597 0020 3A61     		str	r2, [r7, #16]
 1598 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 59


 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1599              		.loc 2 223 9
 1600 0024 3B69     		ldr	r3, [r7, #16]
 1601              	.LBE143:
 1602              	.LBE142:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1603              		.loc 1 1523 27
 1604 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1605              		.loc 1 1527 12
 1606 0028 7B68     		ldr	r3, [r7, #4]
 1607 002a 002B     		cmp	r3, #0
 1608 002c 02D1     		bne	.L97
 1609              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1610 002e 094B     		ldr	r3, .L100
 1611 0030 1B68     		ldr	r3, [r3]
 1612 0032 00E0     		b	.L98
 1613              	.L97:
 1614              		.loc 1 1527 12 discriminator 2
 1615 0034 7B68     		ldr	r3, [r7, #4]
 1616              	.L98:
 1617              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1618 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1619              		.loc 1 1528 13 discriminator 4
 1620 0038 BB69     		ldr	r3, [r7, #24]
 1621 003a DB6A     		ldr	r3, [r3, #44]
 1622 003c 7B61     		str	r3, [r7, #20]
 1623 003e FB69     		ldr	r3, [r7, #28]
 1624 0040 BB60     		str	r3, [r7, #8]
 1625              	.LBB144:
 1626              	.LBB145:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1627              		.loc 2 229 2 discriminator 4
 1628 0042 BB68     		ldr	r3, [r7, #8]
 1629              		.syntax unified
 1630              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1631 0044 83F31188 			msr basepri, r3	
 1632              	@ 0 "" 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 60


 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1633              		.loc 2 233 1 discriminator 4
 1634              		.thumb
 1635              		.syntax unified
 1636 0048 00BF     		nop
 1637              	.LBE145:
 1638              	.LBE144:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1639              		.loc 1 1532 10 discriminator 4
 1640 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1641              		.loc 1 1533 2 discriminator 4
 1642 004c 1846     		mov	r0, r3
 1643 004e 2037     		adds	r7, r7, #32
 1644              	.LCFI48:
 1645              		.cfi_def_cfa_offset 8
 1646 0050 BD46     		mov	sp, r7
 1647              	.LCFI49:
 1648              		.cfi_def_cfa_register 13
 1649              		@ sp needed
 1650 0052 80BD     		pop	{r7, pc}
 1651              	.L101:
 1652              		.align	2
 1653              	.L100:
 1654 0054 00000000 		.word	pxCurrentTCB
 1655              		.cfi_endproc
 1656              	.LFE13:
 1658              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1659              		.align	1
 1660              		.global	vTaskPrioritySet
 1661              		.syntax unified
 1662              		.thumb
 1663              		.thumb_func
 1665              	vTaskPrioritySet:
 1666              	.LFB14:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1667              		.loc 1 1541 2
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 32
 1670              		@ frame_needed = 1, uses_anonymous_args = 0
 1671 0000 80B5     		push	{r7, lr}
 1672              	.LCFI50:
 1673              		.cfi_def_cfa_offset 8
 1674              		.cfi_offset 7, -8
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 61


 1675              		.cfi_offset 14, -4
 1676 0002 88B0     		sub	sp, sp, #32
 1677              	.LCFI51:
 1678              		.cfi_def_cfa_offset 40
 1679 0004 00AF     		add	r7, sp, #0
 1680              	.LCFI52:
 1681              		.cfi_def_cfa_register 7
 1682 0006 7860     		str	r0, [r7, #4]
 1683 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1684              		.loc 1 1544 13
 1685 000a 0023     		movs	r3, #0
 1686 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1687              		.loc 1 1546 3
 1688 000e 3B68     		ldr	r3, [r7]
 1689 0010 372B     		cmp	r3, #55
 1690 0012 0AD9     		bls	.L103
 1691              	.LBB146:
 1692              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1693              		.loc 2 195 2
 1694              		.syntax unified
 1695              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1696 0014 4FF05003 			mov r3, #80												
 1697 0018 83F31188 		msr basepri, r3											
 1698 001c BFF36F8F 		isb														
 1699 0020 BFF34F8F 		dsb														
 1700              	
 1701              	@ 0 "" 2
 1702              		.thumb
 1703              		.syntax unified
 1704 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1705              		.loc 2 203 1
 1706 0026 00BF     		nop
 1707              	.L104:
 1708              	.LBE147:
 1709              	.LBE146:
 1710              		.loc 1 1546 3 discriminator 1
 1711 0028 FEE7     		b	.L104
 1712              	.L103:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1713              		.loc 1 1549 5
 1714 002a 3B68     		ldr	r3, [r7]
 1715 002c 372B     		cmp	r3, #55
 1716 002e 01D9     		bls	.L105
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1717              		.loc 1 1551 18
 1718 0030 3723     		movs	r3, #55
 1719 0032 3B60     		str	r3, [r7]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 62


 1720              	.L105:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1721              		.loc 1 1558 3
 1722 0034 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1723              		.loc 1 1562 12
 1724 0038 7B68     		ldr	r3, [r7, #4]
 1725 003a 002B     		cmp	r3, #0
 1726 003c 02D1     		bne	.L106
 1727              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1728 003e 3B4B     		ldr	r3, .L115
 1729 0040 1B68     		ldr	r3, [r3]
 1730 0042 00E0     		b	.L107
 1731              	.L106:
 1732              		.loc 1 1562 12 discriminator 2
 1733 0044 7B68     		ldr	r3, [r7, #4]
 1734              	.L107:
 1735              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1736 0046 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1737              		.loc 1 1568 27 discriminator 4
 1738 0048 BB69     		ldr	r3, [r7, #24]
 1739 004a DB6C     		ldr	r3, [r3, #76]
 1740 004c 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1741              		.loc 1 1576 6 discriminator 4
 1742 004e 7A69     		ldr	r2, [r7, #20]
 1743 0050 3B68     		ldr	r3, [r7]
 1744 0052 9A42     		cmp	r2, r3
 1745 0054 63D0     		beq	.L108
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1746              		.loc 1 1580 7
 1747 0056 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 63


 1748 0058 7B69     		ldr	r3, [r7, #20]
 1749 005a 9A42     		cmp	r2, r3
 1750 005c 0DD9     		bls	.L109
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1751              		.loc 1 1582 16
 1752 005e 334B     		ldr	r3, .L115
 1753 0060 1B68     		ldr	r3, [r3]
 1754              		.loc 1 1582 8
 1755 0062 BA69     		ldr	r2, [r7, #24]
 1756 0064 9A42     		cmp	r2, r3
 1757 0066 0FD0     		beq	.L110
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1758              		.loc 1 1587 40
 1759 0068 304B     		ldr	r3, .L115
 1760 006a 1B68     		ldr	r3, [r3]
 1761 006c DB6A     		ldr	r3, [r3, #44]
 1762              		.loc 1 1587 9
 1763 006e 3A68     		ldr	r2, [r7]
 1764 0070 9A42     		cmp	r2, r3
 1765 0072 09D3     		bcc	.L110
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1766              		.loc 1 1589 23
 1767 0074 0123     		movs	r3, #1
 1768 0076 FB61     		str	r3, [r7, #28]
 1769 0078 06E0     		b	.L110
 1770              	.L109:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1771              		.loc 1 1603 20
 1772 007a 2C4B     		ldr	r3, .L115
 1773 007c 1B68     		ldr	r3, [r3]
 1774              		.loc 1 1603 12
 1775 007e BA69     		ldr	r2, [r7, #24]
 1776 0080 9A42     		cmp	r2, r3
 1777 0082 01D1     		bne	.L110
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 64


1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1778              		.loc 1 1608 21
 1779 0084 0123     		movs	r3, #1
 1780 0086 FB61     		str	r3, [r7, #28]
 1781              	.L110:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1782              		.loc 1 1620 27
 1783 0088 BB69     		ldr	r3, [r7, #24]
 1784 008a DB6A     		ldr	r3, [r3, #44]
 1785 008c 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1786              		.loc 1 1626 15
 1787 008e BB69     		ldr	r3, [r7, #24]
 1788 0090 DA6C     		ldr	r2, [r3, #76]
 1789              		.loc 1 1626 40
 1790 0092 BB69     		ldr	r3, [r7, #24]
 1791 0094 DB6A     		ldr	r3, [r3, #44]
 1792              		.loc 1 1626 8
 1793 0096 9A42     		cmp	r2, r3
 1794 0098 02D1     		bne	.L111
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1795              		.loc 1 1628 25
 1796 009a BB69     		ldr	r3, [r7, #24]
 1797 009c 3A68     		ldr	r2, [r7]
 1798 009e DA62     		str	r2, [r3, #44]
 1799              	.L111:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1800              		.loc 1 1636 28
 1801 00a0 BB69     		ldr	r3, [r7, #24]
 1802 00a2 3A68     		ldr	r2, [r7]
 1803 00a4 DA64     		str	r2, [r3, #76]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 65


1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1804              		.loc 1 1646 11
 1805 00a6 BB69     		ldr	r3, [r7, #24]
 1806 00a8 9B69     		ldr	r3, [r3, #24]
 1807              		.loc 1 1646 7
 1808 00aa 002B     		cmp	r3, #0
 1809 00ac 04DB     		blt	.L112
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1810              		.loc 1 1648 6
 1811 00ae 3B68     		ldr	r3, [r7]
 1812 00b0 C3F13802 		rsb	r2, r3, #56
 1813 00b4 BB69     		ldr	r3, [r7, #24]
 1814 00b6 9A61     		str	r2, [r3, #24]
 1815              	.L112:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1816              		.loc 1 1659 9
 1817 00b8 BB69     		ldr	r3, [r7, #24]
 1818 00ba 5969     		ldr	r1, [r3, #20]
 1819 00bc 3A69     		ldr	r2, [r7, #16]
 1820 00be 1346     		mov	r3, r2
 1821 00c0 9B00     		lsls	r3, r3, #2
 1822 00c2 1344     		add	r3, r3, r2
 1823 00c4 9B00     		lsls	r3, r3, #2
 1824 00c6 1A4A     		ldr	r2, .L115+4
 1825 00c8 1344     		add	r3, r3, r2
 1826              		.loc 1 1659 7
 1827 00ca 9942     		cmp	r1, r3
 1828 00cc 1CD1     		bne	.L113
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1829              		.loc 1 1664 10
 1830 00ce BB69     		ldr	r3, [r7, #24]
 1831 00d0 0433     		adds	r3, r3, #4
 1832 00d2 1846     		mov	r0, r3
 1833 00d4 FFF7FEFF 		bl	uxListRemove
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 66


1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1834              		.loc 1 1675 6
 1835 00d8 BB69     		ldr	r3, [r7, #24]
 1836 00da DA6A     		ldr	r2, [r3, #44]
 1837 00dc 154B     		ldr	r3, .L115+8
 1838 00de 1B68     		ldr	r3, [r3]
 1839 00e0 9A42     		cmp	r2, r3
 1840 00e2 03D9     		bls	.L114
 1841              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1842 00e4 BB69     		ldr	r3, [r7, #24]
 1843 00e6 DB6A     		ldr	r3, [r3, #44]
 1844 00e8 124A     		ldr	r2, .L115+8
 1845 00ea 1360     		str	r3, [r2]
 1846              	.L114:
 1847              		.loc 1 1675 6 discriminator 3
 1848 00ec BB69     		ldr	r3, [r7, #24]
 1849 00ee DA6A     		ldr	r2, [r3, #44]
 1850 00f0 1346     		mov	r3, r2
 1851 00f2 9B00     		lsls	r3, r3, #2
 1852 00f4 1344     		add	r3, r3, r2
 1853 00f6 9B00     		lsls	r3, r3, #2
 1854 00f8 0D4A     		ldr	r2, .L115+4
 1855 00fa 1A44     		add	r2, r2, r3
 1856 00fc BB69     		ldr	r3, [r7, #24]
 1857 00fe 0433     		adds	r3, r3, #4
 1858 0100 1946     		mov	r1, r3
 1859 0102 1046     		mov	r0, r2
 1860 0104 FFF7FEFF 		bl	vListInsertEnd
 1861              	.L113:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1862              		.loc 1 1682 7 is_stmt 1
 1863 0108 FB69     		ldr	r3, [r7, #28]
 1864 010a 002B     		cmp	r3, #0
 1865 010c 07D0     		beq	.L108
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1866              		.loc 1 1684 6
 1867 010e 0A4B     		ldr	r3, .L115+12
 1868 0110 4FF08052 		mov	r2, #268435456
 1869 0114 1A60     		str	r2, [r3]
 1870              		.syntax unified
 1871              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 67


 1872 0116 BFF34F8F 		dsb
 1873              	@ 0 "" 2
 1874              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1875 011a BFF36F8F 		isb
 1876              	@ 0 "" 2
 1877              		.thumb
 1878              		.syntax unified
 1879              	.L108:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1880              		.loc 1 1696 3
 1881 011e FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1882              		.loc 1 1697 2
 1883 0122 00BF     		nop
 1884 0124 2037     		adds	r7, r7, #32
 1885              	.LCFI53:
 1886              		.cfi_def_cfa_offset 8
 1887 0126 BD46     		mov	sp, r7
 1888              	.LCFI54:
 1889              		.cfi_def_cfa_register 13
 1890              		@ sp needed
 1891 0128 80BD     		pop	{r7, pc}
 1892              	.L116:
 1893 012a 00BF     		.align	2
 1894              	.L115:
 1895 012c 00000000 		.word	pxCurrentTCB
 1896 0130 00000000 		.word	pxReadyTasksLists
 1897 0134 00000000 		.word	uxTopReadyPriority
 1898 0138 04ED00E0 		.word	-536810236
 1899              		.cfi_endproc
 1900              	.LFE14:
 1902              		.section	.text.vTaskSuspend,"ax",%progbits
 1903              		.align	1
 1904              		.global	vTaskSuspend
 1905              		.syntax unified
 1906              		.thumb
 1907              		.thumb_func
 1909              	vTaskSuspend:
 1910              	.LFB15:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 68


1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1911              		.loc 1 1705 2
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 16
 1914              		@ frame_needed = 1, uses_anonymous_args = 0
 1915 0000 80B5     		push	{r7, lr}
 1916              	.LCFI55:
 1917              		.cfi_def_cfa_offset 8
 1918              		.cfi_offset 7, -8
 1919              		.cfi_offset 14, -4
 1920 0002 84B0     		sub	sp, sp, #16
 1921              	.LCFI56:
 1922              		.cfi_def_cfa_offset 24
 1923 0004 00AF     		add	r7, sp, #0
 1924              	.LCFI57:
 1925              		.cfi_def_cfa_register 7
 1926 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1927              		.loc 1 1708 3
 1928 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1929              		.loc 1 1712 12
 1930 000c 7B68     		ldr	r3, [r7, #4]
 1931 000e 002B     		cmp	r3, #0
 1932 0010 02D1     		bne	.L118
 1933              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1934 0012 304B     		ldr	r3, .L129
 1935 0014 1B68     		ldr	r3, [r3]
 1936 0016 00E0     		b	.L119
 1937              	.L118:
 1938              		.loc 1 1712 12 discriminator 2
 1939 0018 7B68     		ldr	r3, [r7, #4]
 1940              	.L119:
 1941              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1942 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1943              		.loc 1 1718 8 discriminator 4
 1944 001c FB68     		ldr	r3, [r7, #12]
 1945 001e 0433     		adds	r3, r3, #4
 1946 0020 1846     		mov	r0, r3
 1947 0022 FFF7FEFF 		bl	uxListRemove
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 69


1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1948              		.loc 1 1728 8 discriminator 4
 1949 0026 FB68     		ldr	r3, [r7, #12]
 1950 0028 9B6A     		ldr	r3, [r3, #40]
 1951              		.loc 1 1728 6 discriminator 4
 1952 002a 002B     		cmp	r3, #0
 1953 002c 04D0     		beq	.L120
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1954              		.loc 1 1730 14
 1955 002e FB68     		ldr	r3, [r7, #12]
 1956 0030 1833     		adds	r3, r3, #24
 1957 0032 1846     		mov	r0, r3
 1958 0034 FFF7FEFF 		bl	uxListRemove
 1959              	.L120:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1960              		.loc 1 1737 4
 1961 0038 FB68     		ldr	r3, [r7, #12]
 1962 003a 0433     		adds	r3, r3, #4
 1963 003c 1946     		mov	r1, r3
 1964 003e 2648     		ldr	r0, .L129+4
 1965 0040 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1966              		.loc 1 1741 14
 1967 0044 FB68     		ldr	r3, [r7, #12]
 1968 0046 93F85830 		ldrb	r3, [r3, #88]
 1969 004a DBB2     		uxtb	r3, r3
 1970              		.loc 1 1741 7
 1971 004c 012B     		cmp	r3, #1
 1972 004e 03D1     		bne	.L121
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1973              		.loc 1 1745 27
 1974 0050 FB68     		ldr	r3, [r7, #12]
 1975 0052 0022     		movs	r2, #0
 1976 0054 83F85820 		strb	r2, [r3, #88]
 1977              	.L121:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1978              		.loc 1 1750 3
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 70


 1979 0058 FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1980              		.loc 1 1752 25
 1981 005c 1F4B     		ldr	r3, .L129+8
 1982 005e 1B68     		ldr	r3, [r3]
 1983              		.loc 1 1752 5
 1984 0060 002B     		cmp	r3, #0
 1985 0062 05D0     		beq	.L122
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1986              		.loc 1 1756 4
 1987 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1988              		.loc 1 1758 5
 1989 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1990              		.loc 1 1760 4
 1991 006c FFF7FEFF 		bl	vPortExitCritical
 1992              	.L122:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1993              		.loc 1 1767 13
 1994 0070 184B     		ldr	r3, .L129
 1995 0072 1B68     		ldr	r3, [r3]
 1996              		.loc 1 1767 5
 1997 0074 FA68     		ldr	r2, [r7, #12]
 1998 0076 9A42     		cmp	r2, r3
 1999 0078 27D1     		bne	.L128
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2000              		.loc 1 1769 26
 2001 007a 184B     		ldr	r3, .L129+8
 2002 007c 1B68     		ldr	r3, [r3]
 2003              		.loc 1 1769 6
 2004 007e 002B     		cmp	r3, #0
 2005 0080 17D0     		beq	.L124
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2006              		.loc 1 1772 5
 2007 0082 174B     		ldr	r3, .L129+12
 2008 0084 1B68     		ldr	r3, [r3]
 2009 0086 002B     		cmp	r3, #0
 2010 0088 0AD0     		beq	.L125
 2011              	.LBB148:
 2012              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 71


 2013              		.loc 2 195 2
 2014              		.syntax unified
 2015              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2016 008a 4FF05003 			mov r3, #80												
 2017 008e 83F31188 		msr basepri, r3											
 2018 0092 BFF36F8F 		isb														
 2019 0096 BFF34F8F 		dsb														
 2020              	
 2021              	@ 0 "" 2
 2022              		.thumb
 2023              		.syntax unified
 2024 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2025              		.loc 2 203 1
 2026 009c 00BF     		nop
 2027              	.L126:
 2028              	.LBE149:
 2029              	.LBE148:
 2030              		.loc 1 1772 5 discriminator 1
 2031 009e FEE7     		b	.L126
 2032              	.L125:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2033              		.loc 1 1773 5
 2034 00a0 104B     		ldr	r3, .L129+16
 2035 00a2 4FF08052 		mov	r2, #268435456
 2036 00a6 1A60     		str	r2, [r3]
 2037              		.syntax unified
 2038              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2039 00a8 BFF34F8F 		dsb
 2040              	@ 0 "" 2
 2041              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2042 00ac BFF36F8F 		isb
 2043              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 72


1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2044              		.loc 1 1798 2
 2045              		.thumb
 2046              		.syntax unified
 2047 00b0 0BE0     		b	.L128
 2048              	.L124:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2049              		.loc 1 1780 9
 2050 00b2 094B     		ldr	r3, .L129+4
 2051 00b4 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2052              		.loc 1 1780 56
 2053 00b6 0C4B     		ldr	r3, .L129+20
 2054 00b8 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2055              		.loc 1 1780 7
 2056 00ba 9A42     		cmp	r2, r3
 2057 00bc 03D1     		bne	.L127
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2058              		.loc 1 1786 19
 2059 00be 054B     		ldr	r3, .L129
 2060 00c0 0022     		movs	r2, #0
 2061 00c2 1A60     		str	r2, [r3]
 2062              		.loc 1 1798 2
 2063 00c4 01E0     		b	.L128
 2064              	.L127:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2065              		.loc 1 1790 6
 2066 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 2067              	.L128:
 2068              		.loc 1 1798 2
 2069 00ca 00BF     		nop
 2070 00cc 1037     		adds	r7, r7, #16
 2071              	.LCFI58:
 2072              		.cfi_def_cfa_offset 8
 2073 00ce BD46     		mov	sp, r7
 2074              	.LCFI59:
 2075              		.cfi_def_cfa_register 13
 2076              		@ sp needed
 2077 00d0 80BD     		pop	{r7, pc}
 2078              	.L130:
 2079 00d2 00BF     		.align	2
 2080              	.L129:
 2081 00d4 00000000 		.word	pxCurrentTCB
 2082 00d8 00000000 		.word	xSuspendedTaskList
 2083 00dc 00000000 		.word	xSchedulerRunning
 2084 00e0 00000000 		.word	uxSchedulerSuspended
 2085 00e4 04ED00E0 		.word	-536810236
 2086 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2087              		.cfi_endproc
 2088              	.LFE15:
 2090              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2091              		.align	1
 2092              		.syntax unified
 2093              		.thumb
 2094              		.thumb_func
 2096              	prvTaskIsTaskSuspended:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 73


 2097              	.LFB16:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2098              		.loc 1 1806 2
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 24
 2101              		@ frame_needed = 1, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
 2103 0000 80B4     		push	{r7}
 2104              	.LCFI60:
 2105              		.cfi_def_cfa_offset 4
 2106              		.cfi_offset 7, -4
 2107 0002 87B0     		sub	sp, sp, #28
 2108              	.LCFI61:
 2109              		.cfi_def_cfa_offset 32
 2110 0004 00AF     		add	r7, sp, #0
 2111              	.LCFI62:
 2112              		.cfi_def_cfa_register 7
 2113 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2114              		.loc 1 1807 13
 2115 0008 0023     		movs	r3, #0
 2116 000a 7B61     		str	r3, [r7, #20]
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2117              		.loc 1 1808 22
 2118 000c 7B68     		ldr	r3, [r7, #4]
 2119 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2120              		.loc 1 1814 3
 2121 0010 7B68     		ldr	r3, [r7, #4]
 2122 0012 002B     		cmp	r3, #0
 2123 0014 0AD1     		bne	.L132
 2124              	.LBB150:
 2125              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2126              		.loc 2 195 2
 2127              		.syntax unified
 2128              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2129 0016 4FF05003 			mov r3, #80												
 2130 001a 83F31188 		msr basepri, r3											
 2131 001e BFF36F8F 		isb														
 2132 0022 BFF34F8F 		dsb														
 2133              	
 2134              	@ 0 "" 2
 2135              		.thumb
 2136              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 74


 2137 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2138              		.loc 2 203 1
 2139 0028 00BF     		nop
 2140              	.L133:
 2141              	.LBE151:
 2142              	.LBE150:
 2143              		.loc 1 1814 3 discriminator 1
 2144 002a FEE7     		b	.L133
 2145              	.L132:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2146              		.loc 1 1817 7
 2147 002c 3B69     		ldr	r3, [r7, #16]
 2148 002e 5B69     		ldr	r3, [r3, #20]
 2149              		.loc 1 1817 5
 2150 0030 0A4A     		ldr	r2, .L136
 2151 0032 9342     		cmp	r3, r2
 2152 0034 0AD1     		bne	.L134
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2153              		.loc 1 1820 8
 2154 0036 3B69     		ldr	r3, [r7, #16]
 2155 0038 9B6A     		ldr	r3, [r3, #40]
 2156              		.loc 1 1820 6
 2157 003a 094A     		ldr	r2, .L136+4
 2158 003c 9342     		cmp	r3, r2
 2159 003e 05D0     		beq	.L134
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2160              		.loc 1 1824 9
 2161 0040 3B69     		ldr	r3, [r7, #16]
 2162 0042 9B6A     		ldr	r3, [r3, #40]
 2163              		.loc 1 1824 7
 2164 0044 002B     		cmp	r3, #0
 2165 0046 01D1     		bne	.L134
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2166              		.loc 1 1826 14
 2167 0048 0123     		movs	r3, #1
 2168 004a 7B61     		str	r3, [r7, #20]
 2169              	.L134:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 75


1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2170              		.loc 1 1843 10
 2171 004c 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2172              		.loc 1 1844 2
 2173 004e 1846     		mov	r0, r3
 2174 0050 1C37     		adds	r7, r7, #28
 2175              	.LCFI63:
 2176              		.cfi_def_cfa_offset 4
 2177 0052 BD46     		mov	sp, r7
 2178              	.LCFI64:
 2179              		.cfi_def_cfa_register 13
 2180              		@ sp needed
 2181 0054 5DF8047B 		ldr	r7, [sp], #4
 2182              	.LCFI65:
 2183              		.cfi_restore 7
 2184              		.cfi_def_cfa_offset 0
 2185 0058 7047     		bx	lr
 2186              	.L137:
 2187 005a 00BF     		.align	2
 2188              	.L136:
 2189 005c 00000000 		.word	xSuspendedTaskList
 2190 0060 00000000 		.word	xPendingReadyList
 2191              		.cfi_endproc
 2192              	.LFE16:
 2194              		.section	.text.vTaskResume,"ax",%progbits
 2195              		.align	1
 2196              		.global	vTaskResume
 2197              		.syntax unified
 2198              		.thumb
 2199              		.thumb_func
 2201              	vTaskResume:
 2202              	.LFB17:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2203              		.loc 1 1852 2
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 16
 2206              		@ frame_needed = 1, uses_anonymous_args = 0
 2207 0000 80B5     		push	{r7, lr}
 2208              	.LCFI66:
 2209              		.cfi_def_cfa_offset 8
 2210              		.cfi_offset 7, -8
 2211              		.cfi_offset 14, -4
 2212 0002 84B0     		sub	sp, sp, #16
 2213              	.LCFI67:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 76


 2214              		.cfi_def_cfa_offset 24
 2215 0004 00AF     		add	r7, sp, #0
 2216              	.LCFI68:
 2217              		.cfi_def_cfa_register 7
 2218 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2219              		.loc 1 1853 16
 2220 0008 7B68     		ldr	r3, [r7, #4]
 2221 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2222              		.loc 1 1856 3
 2223 000c 7B68     		ldr	r3, [r7, #4]
 2224 000e 002B     		cmp	r3, #0
 2225 0010 0AD1     		bne	.L139
 2226              	.LBB152:
 2227              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2228              		.loc 2 195 2
 2229              		.syntax unified
 2230              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2231 0012 4FF05003 			mov r3, #80												
 2232 0016 83F31188 		msr basepri, r3											
 2233 001a BFF36F8F 		isb														
 2234 001e BFF34F8F 		dsb														
 2235              	
 2236              	@ 0 "" 2
 2237              		.thumb
 2238              		.syntax unified
 2239 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2240              		.loc 2 203 1
 2241 0024 00BF     		nop
 2242              	.L140:
 2243              	.LBE153:
 2244              	.LBE152:
 2245              		.loc 1 1856 3 discriminator 1
 2246 0026 FEE7     		b	.L140
 2247              	.L139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2248              		.loc 1 1860 15
 2249 0028 204B     		ldr	r3, .L145
 2250 002a 1B68     		ldr	r3, [r3]
 2251              		.loc 1 1860 5
 2252 002c FA68     		ldr	r2, [r7, #12]
 2253 002e 9A42     		cmp	r2, r3
 2254 0030 38D0     		beq	.L144
 2255              		.loc 1 1860 33 discriminator 1
 2256 0032 FB68     		ldr	r3, [r7, #12]
 2257 0034 002B     		cmp	r3, #0
 2258 0036 35D0     		beq	.L144
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 77


 2259              		.loc 1 1862 4
 2260 0038 FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2261              		.loc 1 1864 9
 2262 003c F868     		ldr	r0, [r7, #12]
 2263 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2264 0042 0346     		mov	r3, r0
 2265              		.loc 1 1864 7
 2266 0044 002B     		cmp	r3, #0
 2267 0046 2BD0     		beq	.L142
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2268              		.loc 1 1870 15
 2269 0048 FB68     		ldr	r3, [r7, #12]
 2270 004a 0433     		adds	r3, r3, #4
 2271 004c 1846     		mov	r0, r3
 2272 004e FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2273              		.loc 1 1871 6
 2274 0052 FB68     		ldr	r3, [r7, #12]
 2275 0054 DA6A     		ldr	r2, [r3, #44]
 2276 0056 164B     		ldr	r3, .L145+4
 2277 0058 1B68     		ldr	r3, [r3]
 2278 005a 9A42     		cmp	r2, r3
 2279 005c 03D9     		bls	.L143
 2280              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2281 005e FB68     		ldr	r3, [r7, #12]
 2282 0060 DB6A     		ldr	r3, [r3, #44]
 2283 0062 134A     		ldr	r2, .L145+4
 2284 0064 1360     		str	r3, [r2]
 2285              	.L143:
 2286              		.loc 1 1871 6 discriminator 3
 2287 0066 FB68     		ldr	r3, [r7, #12]
 2288 0068 DA6A     		ldr	r2, [r3, #44]
 2289 006a 1346     		mov	r3, r2
 2290 006c 9B00     		lsls	r3, r3, #2
 2291 006e 1344     		add	r3, r3, r2
 2292 0070 9B00     		lsls	r3, r3, #2
 2293 0072 104A     		ldr	r2, .L145+8
 2294 0074 1A44     		add	r2, r2, r3
 2295 0076 FB68     		ldr	r3, [r7, #12]
 2296 0078 0433     		adds	r3, r3, #4
 2297 007a 1946     		mov	r1, r3
 2298 007c 1046     		mov	r0, r2
 2299 007e FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2300              		.loc 1 1874 15 is_stmt 1 discriminator 3
 2301 0082 FB68     		ldr	r3, [r7, #12]
 2302 0084 DA6A     		ldr	r2, [r3, #44]
 2303              		.loc 1 1874 43 discriminator 3
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 78


 2304 0086 094B     		ldr	r3, .L145
 2305 0088 1B68     		ldr	r3, [r3]
 2306 008a DB6A     		ldr	r3, [r3, #44]
 2307              		.loc 1 1874 8 discriminator 3
 2308 008c 9A42     		cmp	r2, r3
 2309 008e 07D3     		bcc	.L142
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2310              		.loc 1 1879 7
 2311 0090 094B     		ldr	r3, .L145+12
 2312 0092 4FF08052 		mov	r2, #268435456
 2313 0096 1A60     		str	r2, [r3]
 2314              		.syntax unified
 2315              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2316 0098 BFF34F8F 		dsb
 2317              	@ 0 "" 2
 2318              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2319 009c BFF36F8F 		isb
 2320              	@ 0 "" 2
 2321              		.thumb
 2322              		.syntax unified
 2323              	.L142:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2324              		.loc 1 1891 4
 2325 00a0 FFF7FEFF 		bl	vPortExitCritical
 2326              	.L144:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2327              		.loc 1 1897 2
 2328 00a4 00BF     		nop
 2329 00a6 1037     		adds	r7, r7, #16
 2330              	.LCFI69:
 2331              		.cfi_def_cfa_offset 8
 2332 00a8 BD46     		mov	sp, r7
 2333              	.LCFI70:
 2334              		.cfi_def_cfa_register 13
 2335              		@ sp needed
 2336 00aa 80BD     		pop	{r7, pc}
 2337              	.L146:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 79


 2338              		.align	2
 2339              	.L145:
 2340 00ac 00000000 		.word	pxCurrentTCB
 2341 00b0 00000000 		.word	uxTopReadyPriority
 2342 00b4 00000000 		.word	pxReadyTasksLists
 2343 00b8 04ED00E0 		.word	-536810236
 2344              		.cfi_endproc
 2345              	.LFE17:
 2347              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2348              		.align	1
 2349              		.global	xTaskResumeFromISR
 2350              		.syntax unified
 2351              		.thumb
 2352              		.thumb_func
 2354              	xTaskResumeFromISR:
 2355              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2356              		.loc 1 1906 2
 2357              		.cfi_startproc
 2358              		@ args = 0, pretend = 0, frame = 40
 2359              		@ frame_needed = 1, uses_anonymous_args = 0
 2360 0000 80B5     		push	{r7, lr}
 2361              	.LCFI71:
 2362              		.cfi_def_cfa_offset 8
 2363              		.cfi_offset 7, -8
 2364              		.cfi_offset 14, -4
 2365 0002 8AB0     		sub	sp, sp, #40
 2366              	.LCFI72:
 2367              		.cfi_def_cfa_offset 48
 2368 0004 00AF     		add	r7, sp, #0
 2369              	.LCFI73:
 2370              		.cfi_def_cfa_register 7
 2371 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2372              		.loc 1 1907 13
 2373 0008 0023     		movs	r3, #0
 2374 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2375              		.loc 1 1908 16
 2376 000c 7B68     		ldr	r3, [r7, #4]
 2377 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2378              		.loc 1 1911 3
 2379 0010 7B68     		ldr	r3, [r7, #4]
 2380 0012 002B     		cmp	r3, #0
 2381 0014 0AD1     		bne	.L148
 2382              	.LBB154:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 80


 2383              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2384              		.loc 2 195 2
 2385              		.syntax unified
 2386              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2387 0016 4FF05003 			mov r3, #80												
 2388 001a 83F31188 		msr basepri, r3											
 2389 001e BFF36F8F 		isb														
 2390 0022 BFF34F8F 		dsb														
 2391              	
 2392              	@ 0 "" 2
 2393              		.thumb
 2394              		.syntax unified
 2395 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2396              		.loc 2 203 1
 2397 0028 00BF     		nop
 2398              	.L149:
 2399              	.LBE155:
 2400              	.LBE154:
 2401              		.loc 1 1911 3 discriminator 1
 2402 002a FEE7     		b	.L149
 2403              	.L148:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2404              		.loc 1 1929 3
 2405 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2406              	.LBB156:
 2407              	.LBB157:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2408              		.loc 2 211 2
 2409              		.syntax unified
 2410              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2411 0030 EFF31182 			mrs r2, basepri											
 2412 0034 4FF05003 		mov r3, #80												
 2413 0038 83F31188 		msr basepri, r3											
 2414 003c BFF36F8F 		isb														
 2415 0040 BFF34F8F 		dsb														
 2416              	
 2417              	@ 0 "" 2
 2418              		.thumb
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 81


 2419              		.syntax unified
 2420 0044 7A61     		str	r2, [r7, #20]
 2421 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2422              		.loc 2 223 9
 2423 0048 7B69     		ldr	r3, [r7, #20]
 2424              	.LBE157:
 2425              	.LBE156:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2426              		.loc 1 1931 28
 2427 004a FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2428              		.loc 1 1933 8
 2429 004c 386A     		ldr	r0, [r7, #32]
 2430 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2431 0052 0346     		mov	r3, r0
 2432              		.loc 1 1933 6
 2433 0054 002B     		cmp	r3, #0
 2434 0056 30D0     		beq	.L151
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2435              		.loc 1 1938 30
 2436 0058 1D4B     		ldr	r3, .L156
 2437 005a 1B68     		ldr	r3, [r3]
 2438              		.loc 1 1938 7
 2439 005c 002B     		cmp	r3, #0
 2440 005e 26D1     		bne	.L152
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2441              		.loc 1 1942 15
 2442 0060 3B6A     		ldr	r3, [r7, #32]
 2443 0062 DA6A     		ldr	r2, [r3, #44]
 2444              		.loc 1 1942 43
 2445 0064 1B4B     		ldr	r3, .L156+4
 2446 0066 1B68     		ldr	r3, [r3]
 2447 0068 DB6A     		ldr	r3, [r3, #44]
 2448              		.loc 1 1942 8
 2449 006a 9A42     		cmp	r2, r3
 2450 006c 01D3     		bcc	.L153
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2451              		.loc 1 1944 22
 2452 006e 0123     		movs	r3, #1
 2453 0070 7B62     		str	r3, [r7, #36]
 2454              	.L153:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 82


1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2455              		.loc 1 1951 15
 2456 0072 3B6A     		ldr	r3, [r7, #32]
 2457 0074 0433     		adds	r3, r3, #4
 2458 0076 1846     		mov	r0, r3
 2459 0078 FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2460              		.loc 1 1952 6
 2461 007c 3B6A     		ldr	r3, [r7, #32]
 2462 007e DA6A     		ldr	r2, [r3, #44]
 2463 0080 154B     		ldr	r3, .L156+8
 2464 0082 1B68     		ldr	r3, [r3]
 2465 0084 9A42     		cmp	r2, r3
 2466 0086 03D9     		bls	.L154
 2467              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2468 0088 3B6A     		ldr	r3, [r7, #32]
 2469 008a DB6A     		ldr	r3, [r3, #44]
 2470 008c 124A     		ldr	r2, .L156+8
 2471 008e 1360     		str	r3, [r2]
 2472              	.L154:
 2473              		.loc 1 1952 6 discriminator 3
 2474 0090 3B6A     		ldr	r3, [r7, #32]
 2475 0092 DA6A     		ldr	r2, [r3, #44]
 2476 0094 1346     		mov	r3, r2
 2477 0096 9B00     		lsls	r3, r3, #2
 2478 0098 1344     		add	r3, r3, r2
 2479 009a 9B00     		lsls	r3, r3, #2
 2480 009c 0F4A     		ldr	r2, .L156+12
 2481 009e 1A44     		add	r2, r2, r3
 2482 00a0 3B6A     		ldr	r3, [r7, #32]
 2483 00a2 0433     		adds	r3, r3, #4
 2484 00a4 1946     		mov	r1, r3
 2485 00a6 1046     		mov	r0, r2
 2486 00a8 FFF7FEFF 		bl	vListInsertEnd
 2487 00ac 05E0     		b	.L151
 2488              	.L152:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2489              		.loc 1 1959 6 is_stmt 1
 2490 00ae 3B6A     		ldr	r3, [r7, #32]
 2491 00b0 1833     		adds	r3, r3, #24
 2492 00b2 1946     		mov	r1, r3
 2493 00b4 0A48     		ldr	r0, .L156+16
 2494 00b6 FFF7FEFF 		bl	vListInsertEnd
 2495              	.L151:
 2496 00ba FB69     		ldr	r3, [r7, #28]
 2497 00bc FB60     		str	r3, [r7, #12]
 2498              	.LBB158:
 2499              	.LBB159:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2500              		.loc 2 229 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 83


 2501 00be FB68     		ldr	r3, [r7, #12]
 2502              		.syntax unified
 2503              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2504 00c0 83F31188 			msr basepri, r3	
 2505              	@ 0 "" 2
 2506              		.loc 2 233 1
 2507              		.thumb
 2508              		.syntax unified
 2509 00c4 00BF     		nop
 2510              	.LBE159:
 2511              	.LBE158:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2512              		.loc 1 1969 10
 2513 00c6 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2514              		.loc 1 1970 2
 2515 00c8 1846     		mov	r0, r3
 2516 00ca 2837     		adds	r7, r7, #40
 2517              	.LCFI74:
 2518              		.cfi_def_cfa_offset 8
 2519 00cc BD46     		mov	sp, r7
 2520              	.LCFI75:
 2521              		.cfi_def_cfa_register 13
 2522              		@ sp needed
 2523 00ce 80BD     		pop	{r7, pc}
 2524              	.L157:
 2525              		.align	2
 2526              	.L156:
 2527 00d0 00000000 		.word	uxSchedulerSuspended
 2528 00d4 00000000 		.word	pxCurrentTCB
 2529 00d8 00000000 		.word	uxTopReadyPriority
 2530 00dc 00000000 		.word	pxReadyTasksLists
 2531 00e0 00000000 		.word	xPendingReadyList
 2532              		.cfi_endproc
 2533              	.LFE18:
 2535              		.section	.rodata
 2536              		.align	2
 2537              	.LC0:
 2538 0000 49444C45 		.ascii	"IDLE\000"
 2538      00
 2539              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2540              		.align	1
 2541              		.global	vTaskStartScheduler
 2542              		.syntax unified
 2543              		.thumb
 2544              		.thumb_func
 2546              	vTaskStartScheduler:
 2547              	.LFB19:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 84


1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2548              		.loc 1 1976 1
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 24
 2551              		@ frame_needed = 1, uses_anonymous_args = 0
 2552 0000 80B5     		push	{r7, lr}
 2553              	.LCFI76:
 2554              		.cfi_def_cfa_offset 8
 2555              		.cfi_offset 7, -8
 2556              		.cfi_offset 14, -4
 2557 0002 8AB0     		sub	sp, sp, #40
 2558              	.LCFI77:
 2559              		.cfi_def_cfa_offset 48
 2560 0004 04AF     		add	r7, sp, #16
 2561              	.LCFI78:
 2562              		.cfi_def_cfa 7, 32
 2563              	.LBB160:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2564              		.loc 1 1982 17
 2565 0006 0023     		movs	r3, #0
 2566 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2567              		.loc 1 1983 16
 2568 000a 0023     		movs	r3, #0
 2569 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2570              		.loc 1 1988 3
 2571 000e 3A46     		mov	r2, r7
 2572 0010 391D     		adds	r1, r7, #4
 2573 0012 07F10803 		add	r3, r7, #8
 2574 0016 1846     		mov	r0, r3
 2575 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2576              		.loc 1 1989 21
 2577 001c 3968     		ldr	r1, [r7]
 2578 001e 7B68     		ldr	r3, [r7, #4]
 2579 0020 BA68     		ldr	r2, [r7, #8]
 2580 0022 0292     		str	r2, [sp, #8]
 2581 0024 0193     		str	r3, [sp, #4]
 2582 0026 0023     		movs	r3, #0
 2583 0028 0093     		str	r3, [sp]
 2584 002a 0023     		movs	r3, #0
 2585 002c 0A46     		mov	r2, r1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 85


 2586 002e 2149     		ldr	r1, .L166
 2587 0030 2148     		ldr	r0, .L166+4
 2588 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2589 0036 0346     		mov	r3, r0
 2590              		.loc 1 1989 19
 2591 0038 204A     		ldr	r2, .L166+8
 2592 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2593              		.loc 1 1997 23
 2594 003c 1F4B     		ldr	r3, .L166+8
 2595 003e 1B68     		ldr	r3, [r3]
 2596              		.loc 1 1997 5
 2597 0040 002B     		cmp	r3, #0
 2598 0042 02D0     		beq	.L159
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2599              		.loc 1 1999 12
 2600 0044 0123     		movs	r3, #1
 2601 0046 7B61     		str	r3, [r7, #20]
 2602 0048 01E0     		b	.L160
 2603              	.L159:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2604              		.loc 1 2003 12
 2605 004a 0023     		movs	r3, #0
 2606 004c 7B61     		str	r3, [r7, #20]
 2607              	.L160:
 2608              	.LBE160:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2609              		.loc 1 2020 5
 2610 004e 7B69     		ldr	r3, [r7, #20]
 2611 0050 012B     		cmp	r3, #1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 86


 2612 0052 02D1     		bne	.L161
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2613              		.loc 1 2022 14
 2614 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2615 0058 7861     		str	r0, [r7, #20]
 2616              	.L161:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2617              		.loc 1 2031 4
 2618 005a 7B69     		ldr	r3, [r7, #20]
 2619 005c 012B     		cmp	r3, #1
 2620 005e 16D1     		bne	.L162
 2621              	.LBB161:
 2622              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2623              		.loc 2 195 2
 2624              		.syntax unified
 2625              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2626 0060 4FF05003 			mov r3, #80												
 2627 0064 83F31188 		msr basepri, r3											
 2628 0068 BFF36F8F 		isb														
 2629 006c BFF34F8F 		dsb														
 2630              	
 2631              	@ 0 "" 2
 2632              		.thumb
 2633              		.syntax unified
 2634 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2635              		.loc 2 203 1
 2636 0072 00BF     		nop
 2637              	.LBE162:
 2638              	.LBE161:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 87


2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2639              		.loc 1 2059 24
 2640 0074 124B     		ldr	r3, .L166+12
 2641 0076 4FF0FF32 		mov	r2, #-1
 2642 007a 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2643              		.loc 1 2060 21
 2644 007c 114B     		ldr	r3, .L166+16
 2645 007e 0122     		movs	r2, #1
 2646 0080 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2647              		.loc 1 2061 14
 2648 0082 114B     		ldr	r3, .L166+20
 2649 0084 0022     		movs	r2, #0
 2650 0086 1A60     		str	r2, [r3]
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2651              		.loc 1 2075 7
 2652 0088 FFF7FEFF 		bl	xPortStartScheduler
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 88


2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2653              		.loc 1 2096 1
 2654 008c 0EE0     		b	.L165
 2655              	.L162:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2656              		.loc 1 2090 3
 2657 008e 7B69     		ldr	r3, [r7, #20]
 2658 0090 B3F1FF3F 		cmp	r3, #-1
 2659 0094 0AD1     		bne	.L165
 2660              	.LBB163:
 2661              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2662              		.loc 2 195 2
 2663              		.syntax unified
 2664              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2665 0096 4FF05003 			mov r3, #80												
 2666 009a 83F31188 		msr basepri, r3											
 2667 009e BFF36F8F 		isb														
 2668 00a2 BFF34F8F 		dsb														
 2669              	
 2670              	@ 0 "" 2
 2671              		.thumb
 2672              		.syntax unified
 2673 00a6 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2674              		.loc 2 203 1
 2675 00a8 00BF     		nop
 2676              	.L164:
 2677              	.LBE164:
 2678              	.LBE163:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2679              		.loc 1 2090 3 discriminator 2
 2680 00aa FEE7     		b	.L164
 2681              	.L165:
 2682              		.loc 1 2096 1
 2683 00ac 00BF     		nop
 2684 00ae 1837     		adds	r7, r7, #24
 2685              	.LCFI79:
 2686              		.cfi_def_cfa_offset 8
 2687 00b0 BD46     		mov	sp, r7
 2688              	.LCFI80:
 2689              		.cfi_def_cfa_register 13
 2690              		@ sp needed
 2691 00b2 80BD     		pop	{r7, pc}
 2692              	.L167:
 2693              		.align	2
 2694              	.L166:
 2695 00b4 00000000 		.word	.LC0
 2696 00b8 00000000 		.word	prvIdleTask
 2697 00bc 00000000 		.word	xIdleTaskHandle
 2698 00c0 00000000 		.word	xNextTaskUnblockTime
 2699 00c4 00000000 		.word	xSchedulerRunning
 2700 00c8 00000000 		.word	xTickCount
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 89


 2701              		.cfi_endproc
 2702              	.LFE19:
 2704              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2705              		.align	1
 2706              		.global	vTaskEndScheduler
 2707              		.syntax unified
 2708              		.thumb
 2709              		.thumb_func
 2711              	vTaskEndScheduler:
 2712              	.LFB20:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2713              		.loc 1 2100 1
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 8
 2716              		@ frame_needed = 1, uses_anonymous_args = 0
 2717 0000 80B5     		push	{r7, lr}
 2718              	.LCFI81:
 2719              		.cfi_def_cfa_offset 8
 2720              		.cfi_offset 7, -8
 2721              		.cfi_offset 14, -4
 2722 0002 82B0     		sub	sp, sp, #8
 2723              	.LCFI82:
 2724              		.cfi_def_cfa_offset 16
 2725 0004 00AF     		add	r7, sp, #0
 2726              	.LCFI83:
 2727              		.cfi_def_cfa_register 7
 2728              	.LBB165:
 2729              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2730              		.loc 2 195 2
 2731              		.syntax unified
 2732              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2733 0006 4FF05003 			mov r3, #80												
 2734 000a 83F31188 		msr basepri, r3											
 2735 000e BFF36F8F 		isb														
 2736 0012 BFF34F8F 		dsb														
 2737              	
 2738              	@ 0 "" 2
 2739              		.thumb
 2740              		.syntax unified
 2741 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2742              		.loc 2 203 1
 2743 0018 00BF     		nop
 2744              	.LBE166:
 2745              	.LBE165:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2746              		.loc 1 2105 20
 2747 001a 044B     		ldr	r3, .L169
 2748 001c 0022     		movs	r2, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 90


 2749 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2750              		.loc 1 2106 2
 2751 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2752              		.loc 1 2107 1
 2753 0024 00BF     		nop
 2754 0026 0837     		adds	r7, r7, #8
 2755              	.LCFI84:
 2756              		.cfi_def_cfa_offset 8
 2757 0028 BD46     		mov	sp, r7
 2758              	.LCFI85:
 2759              		.cfi_def_cfa_register 13
 2760              		@ sp needed
 2761 002a 80BD     		pop	{r7, pc}
 2762              	.L170:
 2763              		.align	2
 2764              	.L169:
 2765 002c 00000000 		.word	xSchedulerRunning
 2766              		.cfi_endproc
 2767              	.LFE20:
 2769              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2770              		.align	1
 2771              		.global	vTaskSuspendAll
 2772              		.syntax unified
 2773              		.thumb
 2774              		.thumb_func
 2776              	vTaskSuspendAll:
 2777              	.LFB21:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2778              		.loc 1 2111 1
 2779              		.cfi_startproc
 2780              		@ args = 0, pretend = 0, frame = 0
 2781              		@ frame_needed = 1, uses_anonymous_args = 0
 2782              		@ link register save eliminated.
 2783 0000 80B4     		push	{r7}
 2784              	.LCFI86:
 2785              		.cfi_def_cfa_offset 4
 2786              		.cfi_offset 7, -4
 2787 0002 00AF     		add	r7, sp, #0
 2788              	.LCFI87:
 2789              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 91


 2790              		.loc 1 2123 2
 2791 0004 044B     		ldr	r3, .L172
 2792 0006 1B68     		ldr	r3, [r3]
 2793 0008 0133     		adds	r3, r3, #1
 2794 000a 034A     		ldr	r2, .L172
 2795 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2796              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2797              		.loc 1 2128 1
 2798 000e 00BF     		nop
 2799 0010 BD46     		mov	sp, r7
 2800              	.LCFI88:
 2801              		.cfi_def_cfa_register 13
 2802              		@ sp needed
 2803 0012 5DF8047B 		ldr	r7, [sp], #4
 2804              	.LCFI89:
 2805              		.cfi_restore 7
 2806              		.cfi_def_cfa_offset 0
 2807 0016 7047     		bx	lr
 2808              	.L173:
 2809              		.align	2
 2810              	.L172:
 2811 0018 00000000 		.word	uxSchedulerSuspended
 2812              		.cfi_endproc
 2813              	.LFE21:
 2815              		.section	.text.xTaskResumeAll,"ax",%progbits
 2816              		.align	1
 2817              		.global	xTaskResumeAll
 2818              		.syntax unified
 2819              		.thumb
 2820              		.thumb_func
 2822              	xTaskResumeAll:
 2823              	.LFB22:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 92


2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2824              		.loc 1 2195 1
 2825              		.cfi_startproc
 2826              		@ args = 0, pretend = 0, frame = 16
 2827              		@ frame_needed = 1, uses_anonymous_args = 0
 2828 0000 80B5     		push	{r7, lr}
 2829              	.LCFI90:
 2830              		.cfi_def_cfa_offset 8
 2831              		.cfi_offset 7, -8
 2832              		.cfi_offset 14, -4
 2833 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 93


 2834              	.LCFI91:
 2835              		.cfi_def_cfa_offset 24
 2836 0004 00AF     		add	r7, sp, #0
 2837              	.LCFI92:
 2838              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2839              		.loc 1 2196 8
 2840 0006 0023     		movs	r3, #0
 2841 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2842              		.loc 1 2197 12
 2843 000a 0023     		movs	r3, #0
 2844 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2845              		.loc 1 2201 2
 2846 000e 424B     		ldr	r3, .L186
 2847 0010 1B68     		ldr	r3, [r3]
 2848 0012 002B     		cmp	r3, #0
 2849 0014 0AD1     		bne	.L175
 2850              	.LBB167:
 2851              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2852              		.loc 2 195 2
 2853              		.syntax unified
 2854              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2855 0016 4FF05003 			mov r3, #80												
 2856 001a 83F31188 		msr basepri, r3											
 2857 001e BFF36F8F 		isb														
 2858 0022 BFF34F8F 		dsb														
 2859              	
 2860              	@ 0 "" 2
 2861              		.thumb
 2862              		.syntax unified
 2863 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2864              		.loc 2 203 1
 2865 0028 00BF     		nop
 2866              	.L176:
 2867              	.LBE168:
 2868              	.LBE167:
 2869              		.loc 1 2201 2 discriminator 1
 2870 002a FEE7     		b	.L176
 2871              	.L175:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2872              		.loc 1 2208 2
 2873 002c FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 94


 2874              		.loc 1 2210 3
 2875 0030 394B     		ldr	r3, .L186
 2876 0032 1B68     		ldr	r3, [r3]
 2877 0034 013B     		subs	r3, r3, #1
 2878 0036 384A     		ldr	r2, .L186
 2879 0038 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2880              		.loc 1 2212 28
 2881 003a 374B     		ldr	r3, .L186
 2882 003c 1B68     		ldr	r3, [r3]
 2883              		.loc 1 2212 5
 2884 003e 002B     		cmp	r3, #0
 2885 0040 62D1     		bne	.L177
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2886              		.loc 1 2214 31
 2887 0042 364B     		ldr	r3, .L186+4
 2888 0044 1B68     		ldr	r3, [r3]
 2889              		.loc 1 2214 6
 2890 0046 002B     		cmp	r3, #0
 2891 0048 5ED0     		beq	.L177
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2892              		.loc 1 2218 10
 2893 004a 2FE0     		b	.L178
 2894              	.L180:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2895              		.loc 1 2220 14
 2896 004c 344B     		ldr	r3, .L186+8
 2897 004e DB68     		ldr	r3, [r3, #12]
 2898              		.loc 1 2220 12
 2899 0050 DB68     		ldr	r3, [r3, #12]
 2900 0052 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2901              		.loc 1 2221 15
 2902 0054 FB68     		ldr	r3, [r7, #12]
 2903 0056 1833     		adds	r3, r3, #24
 2904 0058 1846     		mov	r0, r3
 2905 005a FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2906              		.loc 1 2222 15
 2907 005e FB68     		ldr	r3, [r7, #12]
 2908 0060 0433     		adds	r3, r3, #4
 2909 0062 1846     		mov	r0, r3
 2910 0064 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2911              		.loc 1 2223 6
 2912 0068 FB68     		ldr	r3, [r7, #12]
 2913 006a DA6A     		ldr	r2, [r3, #44]
 2914 006c 2D4B     		ldr	r3, .L186+12
 2915 006e 1B68     		ldr	r3, [r3]
 2916 0070 9A42     		cmp	r2, r3
 2917 0072 03D9     		bls	.L179
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 95


 2918              		.loc 1 2223 6 is_stmt 0 discriminator 1
 2919 0074 FB68     		ldr	r3, [r7, #12]
 2920 0076 DB6A     		ldr	r3, [r3, #44]
 2921 0078 2A4A     		ldr	r2, .L186+12
 2922 007a 1360     		str	r3, [r2]
 2923              	.L179:
 2924              		.loc 1 2223 6 discriminator 3
 2925 007c FB68     		ldr	r3, [r7, #12]
 2926 007e DA6A     		ldr	r2, [r3, #44]
 2927 0080 1346     		mov	r3, r2
 2928 0082 9B00     		lsls	r3, r3, #2
 2929 0084 1344     		add	r3, r3, r2
 2930 0086 9B00     		lsls	r3, r3, #2
 2931 0088 274A     		ldr	r2, .L186+16
 2932 008a 1A44     		add	r2, r2, r3
 2933 008c FB68     		ldr	r3, [r7, #12]
 2934 008e 0433     		adds	r3, r3, #4
 2935 0090 1946     		mov	r1, r3
 2936 0092 1046     		mov	r0, r2
 2937 0094 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2938              		.loc 1 2227 15 is_stmt 1 discriminator 3
 2939 0098 FB68     		ldr	r3, [r7, #12]
 2940 009a DA6A     		ldr	r2, [r3, #44]
 2941              		.loc 1 2227 43 discriminator 3
 2942 009c 234B     		ldr	r3, .L186+20
 2943 009e 1B68     		ldr	r3, [r3]
 2944 00a0 DB6A     		ldr	r3, [r3, #44]
 2945              		.loc 1 2227 8 discriminator 3
 2946 00a2 9A42     		cmp	r2, r3
 2947 00a4 02D3     		bcc	.L178
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2948              		.loc 1 2229 21
 2949 00a6 224B     		ldr	r3, .L186+24
 2950 00a8 0122     		movs	r2, #1
 2951 00aa 1A60     		str	r2, [r3]
 2952              	.L178:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2953              		.loc 1 2218 12
 2954 00ac 1C4B     		ldr	r3, .L186+8
 2955 00ae 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2956              		.loc 1 2218 52
 2957 00b0 002B     		cmp	r3, #0
 2958 00b2 CBD1     		bne	.L180
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 96


 2959              		.loc 1 2237 7
 2960 00b4 FB68     		ldr	r3, [r7, #12]
 2961 00b6 002B     		cmp	r3, #0
 2962 00b8 01D0     		beq	.L181
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2963              		.loc 1 2245 6
 2964 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2965              	.L181:
 2966              	.LBB169:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2967              		.loc 1 2253 17
 2968 00be 1D4B     		ldr	r3, .L186+28
 2969 00c0 1B68     		ldr	r3, [r3]
 2970 00c2 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2971              		.loc 1 2255 8
 2972 00c4 7B68     		ldr	r3, [r7, #4]
 2973 00c6 002B     		cmp	r3, #0
 2974 00c8 10D0     		beq	.L182
 2975              	.L184:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2976              		.loc 1 2259 12
 2977 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2978 00ce 0346     		mov	r3, r0
 2979              		.loc 1 2259 10
 2980 00d0 002B     		cmp	r3, #0
 2981 00d2 02D0     		beq	.L183
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2982              		.loc 1 2261 23
 2983 00d4 164B     		ldr	r3, .L186+24
 2984 00d6 0122     		movs	r2, #1
 2985 00d8 1A60     		str	r2, [r3]
 2986              	.L183:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 97


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 2987              		.loc 1 2267 8
 2988 00da 7B68     		ldr	r3, [r7, #4]
 2989 00dc 013B     		subs	r3, r3, #1
 2990 00de 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2991              		.loc 1 2268 30
 2992 00e0 7B68     		ldr	r3, [r7, #4]
 2993 00e2 002B     		cmp	r3, #0
 2994 00e4 F1D1     		bne	.L184
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 2995              		.loc 1 2270 20
 2996 00e6 134B     		ldr	r3, .L186+28
 2997 00e8 0022     		movs	r2, #0
 2998 00ea 1A60     		str	r2, [r3]
 2999              	.L182:
 3000              	.LBE169:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3001              		.loc 1 2278 23
 3002 00ec 104B     		ldr	r3, .L186+24
 3003 00ee 1B68     		ldr	r3, [r3]
 3004              		.loc 1 2278 7
 3005 00f0 002B     		cmp	r3, #0
 3006 00f2 09D0     		beq	.L177
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3007              		.loc 1 2282 23
 3008 00f4 0123     		movs	r3, #1
 3009 00f6 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3010              		.loc 1 2285 6
 3011 00f8 0F4B     		ldr	r3, .L186+32
 3012 00fa 4FF08052 		mov	r2, #268435456
 3013 00fe 1A60     		str	r2, [r3]
 3014              		.syntax unified
 3015              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3016 0100 BFF34F8F 		dsb
 3017              	@ 0 "" 2
 3018              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3019 0104 BFF36F8F 		isb
 3020              	@ 0 "" 2
 3021              		.thumb
 3022              		.syntax unified
 3023              	.L177:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 98


2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3024              		.loc 1 2298 2
 3025 0108 FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3026              		.loc 1 2300 9
 3027 010c BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3028              		.loc 1 2301 1
 3029 010e 1846     		mov	r0, r3
 3030 0110 1037     		adds	r7, r7, #16
 3031              	.LCFI93:
 3032              		.cfi_def_cfa_offset 8
 3033 0112 BD46     		mov	sp, r7
 3034              	.LCFI94:
 3035              		.cfi_def_cfa_register 13
 3036              		@ sp needed
 3037 0114 80BD     		pop	{r7, pc}
 3038              	.L187:
 3039 0116 00BF     		.align	2
 3040              	.L186:
 3041 0118 00000000 		.word	uxSchedulerSuspended
 3042 011c 00000000 		.word	uxCurrentNumberOfTasks
 3043 0120 00000000 		.word	xPendingReadyList
 3044 0124 00000000 		.word	uxTopReadyPriority
 3045 0128 00000000 		.word	pxReadyTasksLists
 3046 012c 00000000 		.word	pxCurrentTCB
 3047 0130 00000000 		.word	xYieldPending
 3048 0134 00000000 		.word	xPendedTicks
 3049 0138 04ED00E0 		.word	-536810236
 3050              		.cfi_endproc
 3051              	.LFE22:
 3053              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3054              		.align	1
 3055              		.global	xTaskGetTickCount
 3056              		.syntax unified
 3057              		.thumb
 3058              		.thumb_func
 3060              	xTaskGetTickCount:
 3061              	.LFB23:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3062              		.loc 1 2305 1
 3063              		.cfi_startproc
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 99


 3064              		@ args = 0, pretend = 0, frame = 8
 3065              		@ frame_needed = 1, uses_anonymous_args = 0
 3066              		@ link register save eliminated.
 3067 0000 80B4     		push	{r7}
 3068              	.LCFI95:
 3069              		.cfi_def_cfa_offset 4
 3070              		.cfi_offset 7, -4
 3071 0002 83B0     		sub	sp, sp, #12
 3072              	.LCFI96:
 3073              		.cfi_def_cfa_offset 16
 3074 0004 00AF     		add	r7, sp, #0
 3075              	.LCFI97:
 3076              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3077              		.loc 1 2311 10
 3078 0006 054B     		ldr	r3, .L190
 3079 0008 1B68     		ldr	r3, [r3]
 3080 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3081              		.loc 1 2315 9
 3082 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3083              		.loc 1 2316 1
 3084 000e 1846     		mov	r0, r3
 3085 0010 0C37     		adds	r7, r7, #12
 3086              	.LCFI98:
 3087              		.cfi_def_cfa_offset 4
 3088 0012 BD46     		mov	sp, r7
 3089              	.LCFI99:
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 0014 5DF8047B 		ldr	r7, [sp], #4
 3093              	.LCFI100:
 3094              		.cfi_restore 7
 3095              		.cfi_def_cfa_offset 0
 3096 0018 7047     		bx	lr
 3097              	.L191:
 3098 001a 00BF     		.align	2
 3099              	.L190:
 3100 001c 00000000 		.word	xTickCount
 3101              		.cfi_endproc
 3102              	.LFE23:
 3104              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3105              		.align	1
 3106              		.global	xTaskGetTickCountFromISR
 3107              		.syntax unified
 3108              		.thumb
 3109              		.thumb_func
 3111              	xTaskGetTickCountFromISR:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 100


 3112              	.LFB24:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3113              		.loc 1 2320 1
 3114              		.cfi_startproc
 3115              		@ args = 0, pretend = 0, frame = 8
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0000 80B5     		push	{r7, lr}
 3118              	.LCFI101:
 3119              		.cfi_def_cfa_offset 8
 3120              		.cfi_offset 7, -8
 3121              		.cfi_offset 14, -4
 3122 0002 82B0     		sub	sp, sp, #8
 3123              	.LCFI102:
 3124              		.cfi_def_cfa_offset 16
 3125 0004 00AF     		add	r7, sp, #0
 3126              	.LCFI103:
 3127              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3128              		.loc 1 2338 2
 3129 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3130              		.loc 1 2340 25
 3131 000a 0023     		movs	r3, #0
 3132 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3133              		.loc 1 2342 11
 3134 000e 044B     		ldr	r3, .L194
 3135 0010 1B68     		ldr	r3, [r3]
 3136 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3137              		.loc 1 2346 9
 3138 0014 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 101


2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3139              		.loc 1 2347 1
 3140 0016 1846     		mov	r0, r3
 3141 0018 0837     		adds	r7, r7, #8
 3142              	.LCFI104:
 3143              		.cfi_def_cfa_offset 8
 3144 001a BD46     		mov	sp, r7
 3145              	.LCFI105:
 3146              		.cfi_def_cfa_register 13
 3147              		@ sp needed
 3148 001c 80BD     		pop	{r7, pc}
 3149              	.L195:
 3150 001e 00BF     		.align	2
 3151              	.L194:
 3152 0020 00000000 		.word	xTickCount
 3153              		.cfi_endproc
 3154              	.LFE24:
 3156              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3157              		.align	1
 3158              		.global	uxTaskGetNumberOfTasks
 3159              		.syntax unified
 3160              		.thumb
 3161              		.thumb_func
 3163              	uxTaskGetNumberOfTasks:
 3164              	.LFB25:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3165              		.loc 1 2351 1
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 0
 3168              		@ frame_needed = 1, uses_anonymous_args = 0
 3169              		@ link register save eliminated.
 3170 0000 80B4     		push	{r7}
 3171              	.LCFI106:
 3172              		.cfi_def_cfa_offset 4
 3173              		.cfi_offset 7, -4
 3174 0002 00AF     		add	r7, sp, #0
 3175              	.LCFI107:
 3176              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3177              		.loc 1 2354 9
 3178 0004 034B     		ldr	r3, .L198
 3179 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3180              		.loc 1 2355 1
 3181 0008 1846     		mov	r0, r3
 3182 000a BD46     		mov	sp, r7
 3183              	.LCFI108:
 3184              		.cfi_def_cfa_register 13
 3185              		@ sp needed
 3186 000c 5DF8047B 		ldr	r7, [sp], #4
 3187              	.LCFI109:
 3188              		.cfi_restore 7
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 102


 3189              		.cfi_def_cfa_offset 0
 3190 0010 7047     		bx	lr
 3191              	.L199:
 3192 0012 00BF     		.align	2
 3193              	.L198:
 3194 0014 00000000 		.word	uxCurrentNumberOfTasks
 3195              		.cfi_endproc
 3196              	.LFE25:
 3198              		.section	.text.pcTaskGetName,"ax",%progbits
 3199              		.align	1
 3200              		.global	pcTaskGetName
 3201              		.syntax unified
 3202              		.thumb
 3203              		.thumb_func
 3205              	pcTaskGetName:
 3206              	.LFB26:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3207              		.loc 1 2359 1
 3208              		.cfi_startproc
 3209              		@ args = 0, pretend = 0, frame = 16
 3210              		@ frame_needed = 1, uses_anonymous_args = 0
 3211              		@ link register save eliminated.
 3212 0000 80B4     		push	{r7}
 3213              	.LCFI110:
 3214              		.cfi_def_cfa_offset 4
 3215              		.cfi_offset 7, -4
 3216 0002 85B0     		sub	sp, sp, #20
 3217              	.LCFI111:
 3218              		.cfi_def_cfa_offset 24
 3219 0004 00AF     		add	r7, sp, #0
 3220              	.LCFI112:
 3221              		.cfi_def_cfa_register 7
 3222 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3223              		.loc 1 2364 10
 3224 0008 7B68     		ldr	r3, [r7, #4]
 3225 000a 002B     		cmp	r3, #0
 3226 000c 02D1     		bne	.L201
 3227              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3228 000e 0D4B     		ldr	r3, .L206
 3229 0010 1B68     		ldr	r3, [r3]
 3230 0012 00E0     		b	.L202
 3231              	.L201:
 3232              		.loc 1 2364 10 discriminator 2
 3233 0014 7B68     		ldr	r3, [r7, #4]
 3234              	.L202:
 3235              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3236 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3237              		.loc 1 2365 2 discriminator 4
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 103


 3238 0018 FB68     		ldr	r3, [r7, #12]
 3239 001a 002B     		cmp	r3, #0
 3240 001c 0AD1     		bne	.L203
 3241              	.LBB170:
 3242              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3243              		.loc 2 195 2
 3244              		.syntax unified
 3245              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3246 001e 4FF05003 			mov r3, #80												
 3247 0022 83F31188 		msr basepri, r3											
 3248 0026 BFF36F8F 		isb														
 3249 002a BFF34F8F 		dsb														
 3250              	
 3251              	@ 0 "" 2
 3252              		.thumb
 3253              		.syntax unified
 3254 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3255              		.loc 2 203 1
 3256 0030 00BF     		nop
 3257              	.L204:
 3258              	.LBE171:
 3259              	.LBE170:
 3260              		.loc 1 2365 2 discriminator 1
 3261 0032 FEE7     		b	.L204
 3262              	.L203:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3263              		.loc 1 2366 9
 3264 0034 FB68     		ldr	r3, [r7, #12]
 3265 0036 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3266              		.loc 1 2367 1
 3267 0038 1846     		mov	r0, r3
 3268 003a 1437     		adds	r7, r7, #20
 3269              	.LCFI113:
 3270              		.cfi_def_cfa_offset 4
 3271 003c BD46     		mov	sp, r7
 3272              	.LCFI114:
 3273              		.cfi_def_cfa_register 13
 3274              		@ sp needed
 3275 003e 5DF8047B 		ldr	r7, [sp], #4
 3276              	.LCFI115:
 3277              		.cfi_restore 7
 3278              		.cfi_def_cfa_offset 0
 3279 0042 7047     		bx	lr
 3280              	.L207:
 3281              		.align	2
 3282              	.L206:
 3283 0044 00000000 		.word	pxCurrentTCB
 3284              		.cfi_endproc
 3285              	.LFE26:
 3287              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3288              		.align	1
 3289              		.global	uxTaskGetSystemState
 3290              		.syntax unified
 3291              		.thumb
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 104


 3292              		.thumb_func
 3294              	uxTaskGetSystemState:
 3295              	.LFB27:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 105


2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 106


2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3296              		.loc 1 2506 2
 3297              		.cfi_startproc
 3298              		@ args = 0, pretend = 0, frame = 24
 3299              		@ frame_needed = 1, uses_anonymous_args = 0
 3300 0000 80B5     		push	{r7, lr}
 3301              	.LCFI116:
 3302              		.cfi_def_cfa_offset 8
 3303              		.cfi_offset 7, -8
 3304              		.cfi_offset 14, -4
 3305 0002 86B0     		sub	sp, sp, #24
 3306              	.LCFI117:
 3307              		.cfi_def_cfa_offset 32
 3308 0004 00AF     		add	r7, sp, #0
 3309              	.LCFI118:
 3310              		.cfi_def_cfa_register 7
 3311 0006 F860     		str	r0, [r7, #12]
 3312 0008 B960     		str	r1, [r7, #8]
 3313 000a 7A60     		str	r2, [r7, #4]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3314              		.loc 1 2507 14
 3315 000c 0023     		movs	r3, #0
 3316 000e 7B61     		str	r3, [r7, #20]
 3317              		.loc 1 2507 26
 3318 0010 3823     		movs	r3, #56
 3319 0012 3B61     		str	r3, [r7, #16]
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3320              		.loc 1 2509 3
 3321 0014 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 107


2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3322              		.loc 1 2512 20
 3323 0018 3A4B     		ldr	r3, .L212
 3324 001a 1B68     		ldr	r3, [r3]
 3325              		.loc 1 2512 6
 3326 001c BA68     		ldr	r2, [r7, #8]
 3327 001e 9A42     		cmp	r2, r3
 3328 0020 68D3     		bcc	.L209
 3329              	.L210:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3330              		.loc 1 2518 13 discriminator 1
 3331 0022 3B69     		ldr	r3, [r7, #16]
 3332 0024 013B     		subs	r3, r3, #1
 3333 0026 3B61     		str	r3, [r7, #16]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3334              		.loc 1 2519 66 discriminator 1
 3335 0028 7A69     		ldr	r2, [r7, #20]
 3336 002a 1346     		mov	r3, r2
 3337 002c DB00     		lsls	r3, r3, #3
 3338 002e 1344     		add	r3, r3, r2
 3339 0030 9B00     		lsls	r3, r3, #2
 3340 0032 1A46     		mov	r2, r3
 3341              		.loc 1 2519 46 discriminator 1
 3342 0034 FB68     		ldr	r3, [r7, #12]
 3343 0036 9818     		adds	r0, r3, r2
 3344              		.loc 1 2519 16 discriminator 1
 3345 0038 3A69     		ldr	r2, [r7, #16]
 3346 003a 1346     		mov	r3, r2
 3347 003c 9B00     		lsls	r3, r3, #2
 3348 003e 1344     		add	r3, r3, r2
 3349 0040 9B00     		lsls	r3, r3, #2
 3350 0042 314A     		ldr	r2, .L212+4
 3351 0044 1344     		add	r3, r3, r2
 3352 0046 0122     		movs	r2, #1
 3353 0048 1946     		mov	r1, r3
 3354 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3355 004e 0246     		mov	r2, r0
 3356              		.loc 1 2519 13 discriminator 1
 3357 0050 7B69     		ldr	r3, [r7, #20]
 3358 0052 1344     		add	r3, r3, r2
 3359 0054 7B61     		str	r3, [r7, #20]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3360              		.loc 1 2521 22 discriminator 1
 3361 0056 3B69     		ldr	r3, [r7, #16]
 3362 0058 002B     		cmp	r3, #0
 3363 005a E2D1     		bne	.L210
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 108


2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3364              		.loc 1 2525 65
 3365 005c 7A69     		ldr	r2, [r7, #20]
 3366 005e 1346     		mov	r3, r2
 3367 0060 DB00     		lsls	r3, r3, #3
 3368 0062 1344     		add	r3, r3, r2
 3369 0064 9B00     		lsls	r3, r3, #2
 3370 0066 1A46     		mov	r2, r3
 3371              		.loc 1 2525 45
 3372 0068 FB68     		ldr	r3, [r7, #12]
 3373 006a 1344     		add	r3, r3, r2
 3374              		.loc 1 2525 15
 3375 006c 274A     		ldr	r2, .L212+8
 3376 006e 1168     		ldr	r1, [r2]
 3377 0070 0222     		movs	r2, #2
 3378 0072 1846     		mov	r0, r3
 3379 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3380 0078 0246     		mov	r2, r0
 3381              		.loc 1 2525 12
 3382 007a 7B69     		ldr	r3, [r7, #20]
 3383 007c 1344     		add	r3, r3, r2
 3384 007e 7B61     		str	r3, [r7, #20]
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3385              		.loc 1 2526 65
 3386 0080 7A69     		ldr	r2, [r7, #20]
 3387 0082 1346     		mov	r3, r2
 3388 0084 DB00     		lsls	r3, r3, #3
 3389 0086 1344     		add	r3, r3, r2
 3390 0088 9B00     		lsls	r3, r3, #2
 3391 008a 1A46     		mov	r2, r3
 3392              		.loc 1 2526 45
 3393 008c FB68     		ldr	r3, [r7, #12]
 3394 008e 1344     		add	r3, r3, r2
 3395              		.loc 1 2526 15
 3396 0090 1F4A     		ldr	r2, .L212+12
 3397 0092 1168     		ldr	r1, [r2]
 3398 0094 0222     		movs	r2, #2
 3399 0096 1846     		mov	r0, r3
 3400 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3401 009c 0246     		mov	r2, r0
 3402              		.loc 1 2526 12
 3403 009e 7B69     		ldr	r3, [r7, #20]
 3404 00a0 1344     		add	r3, r3, r2
 3405 00a2 7B61     		str	r3, [r7, #20]
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3406              		.loc 1 2532 66
 3407 00a4 7A69     		ldr	r2, [r7, #20]
 3408 00a6 1346     		mov	r3, r2
 3409 00a8 DB00     		lsls	r3, r3, #3
 3410 00aa 1344     		add	r3, r3, r2
 3411 00ac 9B00     		lsls	r3, r3, #2
 3412 00ae 1A46     		mov	r2, r3
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 109


 3413              		.loc 1 2532 46
 3414 00b0 FB68     		ldr	r3, [r7, #12]
 3415 00b2 1344     		add	r3, r3, r2
 3416              		.loc 1 2532 16
 3417 00b4 0422     		movs	r2, #4
 3418 00b6 1749     		ldr	r1, .L212+16
 3419 00b8 1846     		mov	r0, r3
 3420 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3421 00be 0246     		mov	r2, r0
 3422              		.loc 1 2532 13
 3423 00c0 7B69     		ldr	r3, [r7, #20]
 3424 00c2 1344     		add	r3, r3, r2
 3425 00c4 7B61     		str	r3, [r7, #20]
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3426              		.loc 1 2540 66
 3427 00c6 7A69     		ldr	r2, [r7, #20]
 3428 00c8 1346     		mov	r3, r2
 3429 00ca DB00     		lsls	r3, r3, #3
 3430 00cc 1344     		add	r3, r3, r2
 3431 00ce 9B00     		lsls	r3, r3, #2
 3432 00d0 1A46     		mov	r2, r3
 3433              		.loc 1 2540 46
 3434 00d2 FB68     		ldr	r3, [r7, #12]
 3435 00d4 1344     		add	r3, r3, r2
 3436              		.loc 1 2540 16
 3437 00d6 0322     		movs	r2, #3
 3438 00d8 0F49     		ldr	r1, .L212+20
 3439 00da 1846     		mov	r0, r3
 3440 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3441 00e0 0246     		mov	r2, r0
 3442              		.loc 1 2540 13
 3443 00e2 7B69     		ldr	r3, [r7, #20]
 3444 00e4 1344     		add	r3, r3, r2
 3445 00e6 7B61     		str	r3, [r7, #20]
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 110


2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3446              		.loc 1 2557 8
 3447 00e8 7B68     		ldr	r3, [r7, #4]
 3448 00ea 002B     		cmp	r3, #0
 3449 00ec 02D0     		beq	.L209
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3450              		.loc 1 2559 24
 3451 00ee 7B68     		ldr	r3, [r7, #4]
 3452 00f0 0022     		movs	r2, #0
 3453 00f2 1A60     		str	r2, [r3]
 3454              	.L209:
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3455              		.loc 1 2569 12
 3456 00f4 FFF7FEFF 		bl	xTaskResumeAll
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3457              		.loc 1 2571 10
 3458 00f8 7B69     		ldr	r3, [r7, #20]
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3459              		.loc 1 2572 2
 3460 00fa 1846     		mov	r0, r3
 3461 00fc 1837     		adds	r7, r7, #24
 3462              	.LCFI119:
 3463              		.cfi_def_cfa_offset 8
 3464 00fe BD46     		mov	sp, r7
 3465              	.LCFI120:
 3466              		.cfi_def_cfa_register 13
 3467              		@ sp needed
 3468 0100 80BD     		pop	{r7, pc}
 3469              	.L213:
 3470 0102 00BF     		.align	2
 3471              	.L212:
 3472 0104 00000000 		.word	uxCurrentNumberOfTasks
 3473 0108 00000000 		.word	pxReadyTasksLists
 3474 010c 00000000 		.word	pxDelayedTaskList
 3475 0110 00000000 		.word	pxOverflowDelayedTaskList
 3476 0114 00000000 		.word	xTasksWaitingTermination
 3477 0118 00000000 		.word	xSuspendedTaskList
 3478              		.cfi_endproc
 3479              	.LFE27:
 3481              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3482              		.align	1
 3483              		.global	xTaskCatchUpTicks
 3484              		.syntax unified
 3485              		.thumb
 3486              		.thumb_func
 3488              	xTaskCatchUpTicks:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 111


 3489              	.LFB28:
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3490              		.loc 1 2610 1
 3491              		.cfi_startproc
 3492              		@ args = 0, pretend = 0, frame = 16
 3493              		@ frame_needed = 1, uses_anonymous_args = 0
 3494 0000 80B5     		push	{r7, lr}
 3495              	.LCFI121:
 3496              		.cfi_def_cfa_offset 8
 3497              		.cfi_offset 7, -8
 3498              		.cfi_offset 14, -4
 3499 0002 84B0     		sub	sp, sp, #16
 3500              	.LCFI122:
 3501              		.cfi_def_cfa_offset 24
 3502 0004 00AF     		add	r7, sp, #0
 3503              	.LCFI123:
 3504              		.cfi_def_cfa_register 7
 3505 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3506              		.loc 1 2611 12
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 112


 3507 0008 0023     		movs	r3, #0
 3508 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3509              		.loc 1 2615 2
 3510 000c 0F4B     		ldr	r3, .L218
 3511 000e 1B68     		ldr	r3, [r3]
 3512 0010 002B     		cmp	r3, #0
 3513 0012 0AD0     		beq	.L215
 3514              	.LBB172:
 3515              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3516              		.loc 2 195 2
 3517              		.syntax unified
 3518              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3519 0014 4FF05003 			mov r3, #80												
 3520 0018 83F31188 		msr basepri, r3											
 3521 001c BFF36F8F 		isb														
 3522 0020 BFF34F8F 		dsb														
 3523              	
 3524              	@ 0 "" 2
 3525              		.thumb
 3526              		.syntax unified
 3527 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3528              		.loc 2 203 1
 3529 0026 00BF     		nop
 3530              	.L216:
 3531              	.LBE173:
 3532              	.LBE172:
 3533              		.loc 1 2615 2 discriminator 1
 3534 0028 FEE7     		b	.L216
 3535              	.L215:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
 3536              		.loc 1 2619 2
 3537 002a FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3538              		.loc 1 2620 15
 3539 002e 084B     		ldr	r3, .L218+4
 3540 0030 1A68     		ldr	r2, [r3]
 3541 0032 7B68     		ldr	r3, [r7, #4]
 3542 0034 1344     		add	r3, r3, r2
 3543 0036 064A     		ldr	r2, .L218+4
 3544 0038 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3545              		.loc 1 2621 19
 3546 003a FFF7FEFF 		bl	xTaskResumeAll
 3547 003e F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3548              		.loc 1 2623 9
 3549 0040 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 113


2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3550              		.loc 1 2624 1
 3551 0042 1846     		mov	r0, r3
 3552 0044 1037     		adds	r7, r7, #16
 3553              	.LCFI124:
 3554              		.cfi_def_cfa_offset 8
 3555 0046 BD46     		mov	sp, r7
 3556              	.LCFI125:
 3557              		.cfi_def_cfa_register 13
 3558              		@ sp needed
 3559 0048 80BD     		pop	{r7, pc}
 3560              	.L219:
 3561 004a 00BF     		.align	2
 3562              	.L218:
 3563 004c 00000000 		.word	uxSchedulerSuspended
 3564 0050 00000000 		.word	xPendedTicks
 3565              		.cfi_endproc
 3566              	.LFE28:
 3568              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3569              		.align	1
 3570              		.global	xTaskIncrementTick
 3571              		.syntax unified
 3572              		.thumb
 3573              		.thumb_func
 3575              	xTaskIncrementTick:
 3576              	.LFB29:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 114


2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3577              		.loc 1 2708 1
 3578              		.cfi_startproc
 3579              		@ args = 0, pretend = 0, frame = 24
 3580              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 115


 3581 0000 80B5     		push	{r7, lr}
 3582              	.LCFI126:
 3583              		.cfi_def_cfa_offset 8
 3584              		.cfi_offset 7, -8
 3585              		.cfi_offset 14, -4
 3586 0002 86B0     		sub	sp, sp, #24
 3587              	.LCFI127:
 3588              		.cfi_def_cfa_offset 32
 3589 0004 00AF     		add	r7, sp, #0
 3590              	.LCFI128:
 3591              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3592              		.loc 1 2711 12
 3593 0006 0023     		movs	r3, #0
 3594 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3595              		.loc 1 2717 27
 3596 000a 4F4B     		ldr	r3, .L235
 3597 000c 1B68     		ldr	r3, [r3]
 3598              		.loc 1 2717 4
 3599 000e 002B     		cmp	r3, #0
 3600 0010 40F08F80 		bne	.L221
 3601              	.LBB174:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3602              		.loc 1 2721 49
 3603 0014 4D4B     		ldr	r3, .L235+4
 3604 0016 1B68     		ldr	r3, [r3]
 3605              		.loc 1 2721 20
 3606 0018 0133     		adds	r3, r3, #1
 3607 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3608              		.loc 1 2725 14
 3609 001c 4B4A     		ldr	r2, .L235+4
 3610 001e 3B69     		ldr	r3, [r7, #16]
 3611 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3612              		.loc 1 2727 5
 3613 0022 3B69     		ldr	r3, [r7, #16]
 3614 0024 002B     		cmp	r3, #0
 3615 0026 20D1     		bne	.L222
 3616              	.LBB175:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 116


 3617              		.loc 1 2729 4
 3618 0028 494B     		ldr	r3, .L235+8
 3619 002a 1B68     		ldr	r3, [r3]
 3620 002c 1B68     		ldr	r3, [r3]
 3621 002e 002B     		cmp	r3, #0
 3622 0030 0AD0     		beq	.L223
 3623              	.LBB176:
 3624              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3625              		.loc 2 195 2
 3626              		.syntax unified
 3627              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3628 0032 4FF05003 			mov r3, #80												
 3629 0036 83F31188 		msr basepri, r3											
 3630 003a BFF36F8F 		isb														
 3631 003e BFF34F8F 		dsb														
 3632              	
 3633              	@ 0 "" 2
 3634              		.thumb
 3635              		.syntax unified
 3636 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3637              		.loc 2 203 1
 3638 0044 00BF     		nop
 3639              	.L224:
 3640              	.LBE177:
 3641              	.LBE176:
 3642              		.loc 1 2729 4 discriminator 1
 3643 0046 FEE7     		b	.L224
 3644              	.L223:
 3645              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3646 0048 414B     		ldr	r3, .L235+8
 3647 004a 1B68     		ldr	r3, [r3]
 3648 004c FB60     		str	r3, [r7, #12]
 3649 004e 414B     		ldr	r3, .L235+12
 3650 0050 1B68     		ldr	r3, [r3]
 3651 0052 3F4A     		ldr	r2, .L235+8
 3652 0054 1360     		str	r3, [r2]
 3653 0056 3F4A     		ldr	r2, .L235+12
 3654 0058 FB68     		ldr	r3, [r7, #12]
 3655 005a 1360     		str	r3, [r2]
 3656 005c 3E4B     		ldr	r3, .L235+16
 3657 005e 1B68     		ldr	r3, [r3]
 3658 0060 0133     		adds	r3, r3, #1
 3659 0062 3D4A     		ldr	r2, .L235+16
 3660 0064 1360     		str	r3, [r2]
 3661 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3662              	.L222:
 3663              	.LBE175:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 117


2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3664              		.loc 1 2740 23 is_stmt 1
 3665 006a 3C4B     		ldr	r3, .L235+20
 3666 006c 1B68     		ldr	r3, [r3]
 3667              		.loc 1 2740 5
 3668 006e 3A69     		ldr	r2, [r7, #16]
 3669 0070 9A42     		cmp	r2, r3
 3670 0072 49D3     		bcc	.L225
 3671              	.L231:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3672              		.loc 1 2744 9
 3673 0074 364B     		ldr	r3, .L235+8
 3674 0076 1B68     		ldr	r3, [r3]
 3675 0078 1B68     		ldr	r3, [r3]
 3676              		.loc 1 2744 7
 3677 007a 002B     		cmp	r3, #0
 3678 007c 04D1     		bne	.L226
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3679              		.loc 1 2751 27
 3680 007e 374B     		ldr	r3, .L235+20
 3681 0080 4FF0FF32 		mov	r2, #-1
 3682 0084 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3683              		.loc 1 2752 6
 3684 0086 3FE0     		b	.L225
 3685              	.L226:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3686              		.loc 1 2760 14
 3687 0088 314B     		ldr	r3, .L235+8
 3688 008a 1B68     		ldr	r3, [r3]
 3689 008c DB68     		ldr	r3, [r3, #12]
 3690              		.loc 1 2760 12
 3691 008e DB68     		ldr	r3, [r3, #12]
 3692 0090 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3693              		.loc 1 2761 17
 3694 0092 BB68     		ldr	r3, [r7, #8]
 3695 0094 5B68     		ldr	r3, [r3, #4]
 3696 0096 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 118


2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3697              		.loc 1 2763 8
 3698 0098 3A69     		ldr	r2, [r7, #16]
 3699 009a 7B68     		ldr	r3, [r7, #4]
 3700 009c 9A42     		cmp	r2, r3
 3701 009e 03D2     		bcs	.L227
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3702              		.loc 1 2770 28
 3703 00a0 2E4A     		ldr	r2, .L235+20
 3704 00a2 7B68     		ldr	r3, [r7, #4]
 3705 00a4 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3706              		.loc 1 2771 7
 3707 00a6 2FE0     		b	.L225
 3708              	.L227:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3709              		.loc 1 2779 15
 3710 00a8 BB68     		ldr	r3, [r7, #8]
 3711 00aa 0433     		adds	r3, r3, #4
 3712 00ac 1846     		mov	r0, r3
 3713 00ae FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3714              		.loc 1 2783 10
 3715 00b2 BB68     		ldr	r3, [r7, #8]
 3716 00b4 9B6A     		ldr	r3, [r3, #40]
 3717              		.loc 1 2783 8
 3718 00b6 002B     		cmp	r3, #0
 3719 00b8 04D0     		beq	.L228
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3720              		.loc 1 2785 16
 3721 00ba BB68     		ldr	r3, [r7, #8]
 3722 00bc 1833     		adds	r3, r3, #24
 3723 00be 1846     		mov	r0, r3
 3724 00c0 FFF7FEFF 		bl	uxListRemove
 3725              	.L228:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 119


2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3726              		.loc 1 2794 6
 3727 00c4 BB68     		ldr	r3, [r7, #8]
 3728 00c6 DA6A     		ldr	r2, [r3, #44]
 3729 00c8 254B     		ldr	r3, .L235+24
 3730 00ca 1B68     		ldr	r3, [r3]
 3731 00cc 9A42     		cmp	r2, r3
 3732 00ce 03D9     		bls	.L229
 3733              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3734 00d0 BB68     		ldr	r3, [r7, #8]
 3735 00d2 DB6A     		ldr	r3, [r3, #44]
 3736 00d4 224A     		ldr	r2, .L235+24
 3737 00d6 1360     		str	r3, [r2]
 3738              	.L229:
 3739              		.loc 1 2794 6 discriminator 3
 3740 00d8 BB68     		ldr	r3, [r7, #8]
 3741 00da DA6A     		ldr	r2, [r3, #44]
 3742 00dc 1346     		mov	r3, r2
 3743 00de 9B00     		lsls	r3, r3, #2
 3744 00e0 1344     		add	r3, r3, r2
 3745 00e2 9B00     		lsls	r3, r3, #2
 3746 00e4 1F4A     		ldr	r2, .L235+28
 3747 00e6 1A44     		add	r2, r2, r3
 3748 00e8 BB68     		ldr	r3, [r7, #8]
 3749 00ea 0433     		adds	r3, r3, #4
 3750 00ec 1946     		mov	r1, r3
 3751 00ee 1046     		mov	r0, r2
 3752 00f0 FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3753              		.loc 1 2804 16 is_stmt 1 discriminator 3
 3754 00f4 BB68     		ldr	r3, [r7, #8]
 3755 00f6 DA6A     		ldr	r2, [r3, #44]
 3756              		.loc 1 2804 44 discriminator 3
 3757 00f8 1B4B     		ldr	r3, .L235+32
 3758 00fa 1B68     		ldr	r3, [r3]
 3759 00fc DB6A     		ldr	r3, [r3, #44]
 3760              		.loc 1 2804 9 discriminator 3
 3761 00fe 9A42     		cmp	r2, r3
 3762 0100 B8D3     		bcc	.L231
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3763              		.loc 1 2806 24
 3764 0102 0123     		movs	r3, #1
 3765 0104 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 120


2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3766              		.loc 1 2744 7
 3767 0106 B5E7     		b	.L231
 3768              	.L225:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3769              		.loc 1 2823 8
 3770 0108 174B     		ldr	r3, .L235+32
 3771 010a 1B68     		ldr	r3, [r3]
 3772 010c DA6A     		ldr	r2, [r3, #44]
 3773 010e 1549     		ldr	r1, .L235+28
 3774 0110 1346     		mov	r3, r2
 3775 0112 9B00     		lsls	r3, r3, #2
 3776 0114 1344     		add	r3, r3, r2
 3777 0116 9B00     		lsls	r3, r3, #2
 3778 0118 0B44     		add	r3, r3, r1
 3779 011a 1B68     		ldr	r3, [r3]
 3780              		.loc 1 2823 6
 3781 011c 012B     		cmp	r3, #1
 3782 011e 01D9     		bls	.L232
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3783              		.loc 1 2825 21
 3784 0120 0123     		movs	r3, #1
 3785 0122 7B61     		str	r3, [r7, #20]
 3786              	.L232:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 121


2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3787              		.loc 1 2851 22
 3788 0124 114B     		ldr	r3, .L235+36
 3789 0126 1B68     		ldr	r3, [r3]
 3790              		.loc 1 2851 6
 3791 0128 002B     		cmp	r3, #0
 3792 012a 07D0     		beq	.L233
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3793              		.loc 1 2853 21
 3794 012c 0123     		movs	r3, #1
 3795 012e 7B61     		str	r3, [r7, #20]
 3796 0130 04E0     		b	.L233
 3797              	.L221:
 3798              	.LBE174:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3799              		.loc 1 2864 3
 3800 0132 0F4B     		ldr	r3, .L235+40
 3801 0134 1B68     		ldr	r3, [r3]
 3802 0136 0133     		adds	r3, r3, #1
 3803 0138 0D4A     		ldr	r2, .L235+40
 3804 013a 1360     		str	r3, [r2]
 3805              	.L233:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3806              		.loc 1 2875 9
 3807 013c 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3808              		.loc 1 2876 1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 122


 3809 013e 1846     		mov	r0, r3
 3810 0140 1837     		adds	r7, r7, #24
 3811              	.LCFI129:
 3812              		.cfi_def_cfa_offset 8
 3813 0142 BD46     		mov	sp, r7
 3814              	.LCFI130:
 3815              		.cfi_def_cfa_register 13
 3816              		@ sp needed
 3817 0144 80BD     		pop	{r7, pc}
 3818              	.L236:
 3819 0146 00BF     		.align	2
 3820              	.L235:
 3821 0148 00000000 		.word	uxSchedulerSuspended
 3822 014c 00000000 		.word	xTickCount
 3823 0150 00000000 		.word	pxDelayedTaskList
 3824 0154 00000000 		.word	pxOverflowDelayedTaskList
 3825 0158 00000000 		.word	xNumOfOverflows
 3826 015c 00000000 		.word	xNextTaskUnblockTime
 3827 0160 00000000 		.word	uxTopReadyPriority
 3828 0164 00000000 		.word	pxReadyTasksLists
 3829 0168 00000000 		.word	pxCurrentTCB
 3830 016c 00000000 		.word	xYieldPending
 3831 0170 00000000 		.word	xPendedTicks
 3832              		.cfi_endproc
 3833              	.LFE29:
 3835              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3836              		.align	1
 3837              		.global	vTaskSwitchContext
 3838              		.syntax unified
 3839              		.thumb
 3840              		.thumb_func
 3842              	vTaskSwitchContext:
 3843              	.LFB30:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 123


2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 124


2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3844              		.loc 1 2990 1
 3845              		.cfi_startproc
 3846              		@ args = 0, pretend = 0, frame = 16
 3847              		@ frame_needed = 1, uses_anonymous_args = 0
 3848              		@ link register save eliminated.
 3849 0000 80B4     		push	{r7}
 3850              	.LCFI131:
 3851              		.cfi_def_cfa_offset 4
 3852              		.cfi_offset 7, -4
 3853 0002 85B0     		sub	sp, sp, #20
 3854              	.LCFI132:
 3855              		.cfi_def_cfa_offset 24
 3856 0004 00AF     		add	r7, sp, #0
 3857              	.LCFI133:
 3858              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3859              		.loc 1 2991 27
 3860 0006 284B     		ldr	r3, .L246
 3861 0008 1B68     		ldr	r3, [r3]
 3862              		.loc 1 2991 4
 3863 000a 002B     		cmp	r3, #0
 3864 000c 03D0     		beq	.L238
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 125


2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3865              		.loc 1 2995 17
 3866 000e 274B     		ldr	r3, .L246+4
 3867 0010 0122     		movs	r2, #1
 3868 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 126


3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3869              		.loc 1 3061 1
 3870 0014 41E0     		b	.L245
 3871              	.L238:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3872              		.loc 1 2999 17
 3873 0016 254B     		ldr	r3, .L246+4
 3874 0018 0022     		movs	r2, #0
 3875 001a 1A60     		str	r2, [r3]
 3876              	.LBB178:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3877              		.loc 1 3041 3
 3878 001c 244B     		ldr	r3, .L246+8
 3879 001e 1B68     		ldr	r3, [r3]
 3880 0020 FB60     		str	r3, [r7, #12]
 3881 0022 10E0     		b	.L240
 3882              	.L243:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3883              		.loc 1 3041 3 is_stmt 0 discriminator 5
 3884 0024 FB68     		ldr	r3, [r7, #12]
 3885 0026 002B     		cmp	r3, #0
 3886 0028 0AD1     		bne	.L241
 3887              	.LBB179:
 3888              	.LBB180:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3889              		.loc 2 195 2 is_stmt 1
 3890              		.syntax unified
 3891              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3892 002a 4FF05003 			mov r3, #80												
 3893 002e 83F31188 		msr basepri, r3											
 3894 0032 BFF36F8F 		isb														
 3895 0036 BFF34F8F 		dsb														
 3896              	
 3897              	@ 0 "" 2
 3898              		.thumb
 3899              		.syntax unified
 3900 003a 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3901              		.loc 2 203 1
 3902 003c 00BF     		nop
 3903              	.L242:
 3904              	.LBE180:
 3905              	.LBE179:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 127


3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3906              		.loc 1 3041 3 discriminator 1
 3907 003e FEE7     		b	.L242
 3908              	.L241:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3909              		.loc 1 3041 3 is_stmt 0 discriminator 3
 3910 0040 FB68     		ldr	r3, [r7, #12]
 3911 0042 013B     		subs	r3, r3, #1
 3912 0044 FB60     		str	r3, [r7, #12]
 3913              	.L240:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3914              		.loc 1 3041 3 discriminator 4
 3915 0046 1B49     		ldr	r1, .L246+12
 3916 0048 FA68     		ldr	r2, [r7, #12]
 3917 004a 1346     		mov	r3, r2
 3918 004c 9B00     		lsls	r3, r3, #2
 3919 004e 1344     		add	r3, r3, r2
 3920 0050 9B00     		lsls	r3, r3, #2
 3921 0052 0B44     		add	r3, r3, r1
 3922 0054 1B68     		ldr	r3, [r3]
 3923 0056 002B     		cmp	r3, #0
 3924 0058 E4D0     		beq	.L243
 3925              	.LBB181:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3926              		.loc 1 3041 3 discriminator 6
 3927 005a FA68     		ldr	r2, [r7, #12]
 3928 005c 1346     		mov	r3, r2
 3929 005e 9B00     		lsls	r3, r3, #2
 3930 0060 1344     		add	r3, r3, r2
 3931 0062 9B00     		lsls	r3, r3, #2
 3932 0064 134A     		ldr	r2, .L246+12
 3933 0066 1344     		add	r3, r3, r2
 3934 0068 BB60     		str	r3, [r7, #8]
 3935 006a BB68     		ldr	r3, [r7, #8]
 3936 006c 5B68     		ldr	r3, [r3, #4]
 3937 006e 5A68     		ldr	r2, [r3, #4]
 3938 0070 BB68     		ldr	r3, [r7, #8]
 3939 0072 5A60     		str	r2, [r3, #4]
 3940 0074 BB68     		ldr	r3, [r7, #8]
 3941 0076 5A68     		ldr	r2, [r3, #4]
 3942 0078 BB68     		ldr	r3, [r7, #8]
 3943 007a 0833     		adds	r3, r3, #8
 3944 007c 9A42     		cmp	r2, r3
 3945 007e 04D1     		bne	.L244
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3946              		.loc 1 3041 3 discriminator 7
 3947 0080 BB68     		ldr	r3, [r7, #8]
 3948 0082 5B68     		ldr	r3, [r3, #4]
 3949 0084 5A68     		ldr	r2, [r3, #4]
 3950 0086 BB68     		ldr	r3, [r7, #8]
 3951 0088 5A60     		str	r2, [r3, #4]
 3952              	.L244:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3953              		.loc 1 3041 3 discriminator 9
 3954 008a BB68     		ldr	r3, [r7, #8]
 3955 008c 5B68     		ldr	r3, [r3, #4]
 3956 008e DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 128


 3957 0090 094A     		ldr	r2, .L246+16
 3958 0092 1360     		str	r3, [r2]
 3959              	.LBE181:
 3960 0094 064A     		ldr	r2, .L246+8
 3961 0096 FB68     		ldr	r3, [r7, #12]
 3962 0098 1360     		str	r3, [r2]
 3963              	.L245:
 3964              	.LBE178:
 3965              		.loc 1 3061 1 is_stmt 1
 3966 009a 00BF     		nop
 3967 009c 1437     		adds	r7, r7, #20
 3968              	.LCFI134:
 3969              		.cfi_def_cfa_offset 4
 3970 009e BD46     		mov	sp, r7
 3971              	.LCFI135:
 3972              		.cfi_def_cfa_register 13
 3973              		@ sp needed
 3974 00a0 5DF8047B 		ldr	r7, [sp], #4
 3975              	.LCFI136:
 3976              		.cfi_restore 7
 3977              		.cfi_def_cfa_offset 0
 3978 00a4 7047     		bx	lr
 3979              	.L247:
 3980 00a6 00BF     		.align	2
 3981              	.L246:
 3982 00a8 00000000 		.word	uxSchedulerSuspended
 3983 00ac 00000000 		.word	xYieldPending
 3984 00b0 00000000 		.word	uxTopReadyPriority
 3985 00b4 00000000 		.word	pxReadyTasksLists
 3986 00b8 00000000 		.word	pxCurrentTCB
 3987              		.cfi_endproc
 3988              	.LFE30:
 3990              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3991              		.align	1
 3992              		.global	vTaskPlaceOnEventList
 3993              		.syntax unified
 3994              		.thumb
 3995              		.thumb_func
 3997              	vTaskPlaceOnEventList:
 3998              	.LFB31:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3999              		.loc 1 3065 1
 4000              		.cfi_startproc
 4001              		@ args = 0, pretend = 0, frame = 16
 4002              		@ frame_needed = 1, uses_anonymous_args = 0
 4003 0000 80B5     		push	{r7, lr}
 4004              	.LCFI137:
 4005              		.cfi_def_cfa_offset 8
 4006              		.cfi_offset 7, -8
 4007              		.cfi_offset 14, -4
 4008 0002 84B0     		sub	sp, sp, #16
 4009              	.LCFI138:
 4010              		.cfi_def_cfa_offset 24
 4011 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 129


 4012              	.LCFI139:
 4013              		.cfi_def_cfa_register 7
 4014 0006 7860     		str	r0, [r7, #4]
 4015 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4016              		.loc 1 3066 2
 4017 000a 7B68     		ldr	r3, [r7, #4]
 4018 000c 002B     		cmp	r3, #0
 4019 000e 0AD1     		bne	.L249
 4020              	.LBB182:
 4021              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4022              		.loc 2 195 2
 4023              		.syntax unified
 4024              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4025 0010 4FF05003 			mov r3, #80												
 4026 0014 83F31188 		msr basepri, r3											
 4027 0018 BFF36F8F 		isb														
 4028 001c BFF34F8F 		dsb														
 4029              	
 4030              	@ 0 "" 2
 4031              		.thumb
 4032              		.syntax unified
 4033 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4034              		.loc 2 203 1
 4035 0022 00BF     		nop
 4036              	.L250:
 4037              	.LBE183:
 4038              	.LBE182:
 4039              		.loc 1 3066 2 discriminator 1
 4040 0024 FEE7     		b	.L250
 4041              	.L249:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4042              		.loc 1 3075 43
 4043 0026 074B     		ldr	r3, .L251
 4044 0028 1B68     		ldr	r3, [r3]
 4045              		.loc 1 3075 2
 4046 002a 1833     		adds	r3, r3, #24
 4047 002c 1946     		mov	r1, r3
 4048 002e 7868     		ldr	r0, [r7, #4]
 4049 0030 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4050              		.loc 1 3077 2
 4051 0034 0121     		movs	r1, #1
 4052 0036 3868     		ldr	r0, [r7]
 4053 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 130


 4054              		.loc 1 3078 1
 4055 003c 00BF     		nop
 4056 003e 1037     		adds	r7, r7, #16
 4057              	.LCFI140:
 4058              		.cfi_def_cfa_offset 8
 4059 0040 BD46     		mov	sp, r7
 4060              	.LCFI141:
 4061              		.cfi_def_cfa_register 13
 4062              		@ sp needed
 4063 0042 80BD     		pop	{r7, pc}
 4064              	.L252:
 4065              		.align	2
 4066              	.L251:
 4067 0044 00000000 		.word	pxCurrentTCB
 4068              		.cfi_endproc
 4069              	.LFE31:
 4071              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4072              		.align	1
 4073              		.global	vTaskPlaceOnUnorderedEventList
 4074              		.syntax unified
 4075              		.thumb
 4076              		.thumb_func
 4078              	vTaskPlaceOnUnorderedEventList:
 4079              	.LFB32:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4080              		.loc 1 3082 1
 4081              		.cfi_startproc
 4082              		@ args = 0, pretend = 0, frame = 24
 4083              		@ frame_needed = 1, uses_anonymous_args = 0
 4084 0000 80B5     		push	{r7, lr}
 4085              	.LCFI142:
 4086              		.cfi_def_cfa_offset 8
 4087              		.cfi_offset 7, -8
 4088              		.cfi_offset 14, -4
 4089 0002 86B0     		sub	sp, sp, #24
 4090              	.LCFI143:
 4091              		.cfi_def_cfa_offset 32
 4092 0004 00AF     		add	r7, sp, #0
 4093              	.LCFI144:
 4094              		.cfi_def_cfa_register 7
 4095 0006 F860     		str	r0, [r7, #12]
 4096 0008 B960     		str	r1, [r7, #8]
 4097 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4098              		.loc 1 3083 2
 4099 000c FB68     		ldr	r3, [r7, #12]
 4100 000e 002B     		cmp	r3, #0
 4101 0010 0AD1     		bne	.L254
 4102              	.LBB184:
 4103              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4104              		.loc 2 195 2
 4105              		.syntax unified
 4106              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 131


 4107 0012 4FF05003 			mov r3, #80												
 4108 0016 83F31188 		msr basepri, r3											
 4109 001a BFF36F8F 		isb														
 4110 001e BFF34F8F 		dsb														
 4111              	
 4112              	@ 0 "" 2
 4113              		.thumb
 4114              		.syntax unified
 4115 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4116              		.loc 2 203 1
 4117 0024 00BF     		nop
 4118              	.L255:
 4119              	.LBE185:
 4120              	.LBE184:
 4121              		.loc 1 3083 2 discriminator 1
 4122 0026 FEE7     		b	.L255
 4123              	.L254:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4124              		.loc 1 3087 2
 4125 0028 114B     		ldr	r3, .L258
 4126 002a 1B68     		ldr	r3, [r3]
 4127 002c 002B     		cmp	r3, #0
 4128 002e 0AD1     		bne	.L256
 4129              	.LBB186:
 4130              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4131              		.loc 2 195 2
 4132              		.syntax unified
 4133              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4134 0030 4FF05003 			mov r3, #80												
 4135 0034 83F31188 		msr basepri, r3											
 4136 0038 BFF36F8F 		isb														
 4137 003c BFF34F8F 		dsb														
 4138              	
 4139              	@ 0 "" 2
 4140              		.thumb
 4141              		.syntax unified
 4142 0040 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4143              		.loc 2 203 1
 4144 0042 00BF     		nop
 4145              	.L257:
 4146              	.LBE187:
 4147              	.LBE186:
 4148              		.loc 1 3087 2 discriminator 2
 4149 0044 FEE7     		b	.L257
 4150              	.L256:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4151              		.loc 1 3092 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 132


 4152 0046 0B4B     		ldr	r3, .L258+4
 4153 0048 1B68     		ldr	r3, [r3]
 4154 004a BA68     		ldr	r2, [r7, #8]
 4155 004c 42F00042 		orr	r2, r2, #-2147483648
 4156 0050 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4157              		.loc 1 3099 46
 4158 0052 084B     		ldr	r3, .L258+4
 4159 0054 1B68     		ldr	r3, [r3]
 4160              		.loc 1 3099 2
 4161 0056 1833     		adds	r3, r3, #24
 4162 0058 1946     		mov	r1, r3
 4163 005a F868     		ldr	r0, [r7, #12]
 4164 005c FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4165              		.loc 1 3101 2
 4166 0060 0121     		movs	r1, #1
 4167 0062 7868     		ldr	r0, [r7, #4]
 4168 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4169              		.loc 1 3102 1
 4170 0068 00BF     		nop
 4171 006a 1837     		adds	r7, r7, #24
 4172              	.LCFI145:
 4173              		.cfi_def_cfa_offset 8
 4174 006c BD46     		mov	sp, r7
 4175              	.LCFI146:
 4176              		.cfi_def_cfa_register 13
 4177              		@ sp needed
 4178 006e 80BD     		pop	{r7, pc}
 4179              	.L259:
 4180              		.align	2
 4181              	.L258:
 4182 0070 00000000 		.word	uxSchedulerSuspended
 4183 0074 00000000 		.word	pxCurrentTCB
 4184              		.cfi_endproc
 4185              	.LFE32:
 4187              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4188              		.align	1
 4189              		.global	vTaskPlaceOnEventListRestricted
 4190              		.syntax unified
 4191              		.thumb
 4192              		.thumb_func
 4194              	vTaskPlaceOnEventListRestricted:
 4195              	.LFB33:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 133


3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4196              		.loc 1 3108 2
 4197              		.cfi_startproc
 4198              		@ args = 0, pretend = 0, frame = 24
 4199              		@ frame_needed = 1, uses_anonymous_args = 0
 4200 0000 80B5     		push	{r7, lr}
 4201              	.LCFI147:
 4202              		.cfi_def_cfa_offset 8
 4203              		.cfi_offset 7, -8
 4204              		.cfi_offset 14, -4
 4205 0002 86B0     		sub	sp, sp, #24
 4206              	.LCFI148:
 4207              		.cfi_def_cfa_offset 32
 4208 0004 00AF     		add	r7, sp, #0
 4209              	.LCFI149:
 4210              		.cfi_def_cfa_register 7
 4211 0006 F860     		str	r0, [r7, #12]
 4212 0008 B960     		str	r1, [r7, #8]
 4213 000a 7A60     		str	r2, [r7, #4]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4214              		.loc 1 3109 3
 4215 000c FB68     		ldr	r3, [r7, #12]
 4216 000e 002B     		cmp	r3, #0
 4217 0010 0AD1     		bne	.L261
 4218              	.LBB188:
 4219              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4220              		.loc 2 195 2
 4221              		.syntax unified
 4222              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4223 0012 4FF05003 			mov r3, #80												
 4224 0016 83F31188 		msr basepri, r3											
 4225 001a BFF36F8F 		isb														
 4226 001e BFF34F8F 		dsb														
 4227              	
 4228              	@ 0 "" 2
 4229              		.thumb
 4230              		.syntax unified
 4231 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4232              		.loc 2 203 1
 4233 0024 00BF     		nop
 4234              	.L262:
 4235              	.LBE189:
 4236              	.LBE188:
 4237              		.loc 1 3109 3 discriminator 1
 4238 0026 FEE7     		b	.L262
 4239              	.L261:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 134


3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4240              		.loc 1 3121 47
 4241 0028 0A4B     		ldr	r3, .L264
 4242 002a 1B68     		ldr	r3, [r3]
 4243              		.loc 1 3121 3
 4244 002c 1833     		adds	r3, r3, #24
 4245 002e 1946     		mov	r1, r3
 4246 0030 F868     		ldr	r0, [r7, #12]
 4247 0032 FFF7FEFF 		bl	vListInsertEnd
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4248              		.loc 1 3126 5
 4249 0036 7B68     		ldr	r3, [r7, #4]
 4250 0038 002B     		cmp	r3, #0
 4251 003a 02D0     		beq	.L263
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4252              		.loc 1 3128 17
 4253 003c 4FF0FF33 		mov	r3, #-1
 4254 0040 BB60     		str	r3, [r7, #8]
 4255              	.L263:
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4256              		.loc 1 3132 3
 4257 0042 7968     		ldr	r1, [r7, #4]
 4258 0044 B868     		ldr	r0, [r7, #8]
 4259 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4260              		.loc 1 3133 2
 4261 004a 00BF     		nop
 4262 004c 1837     		adds	r7, r7, #24
 4263              	.LCFI150:
 4264              		.cfi_def_cfa_offset 8
 4265 004e BD46     		mov	sp, r7
 4266              	.LCFI151:
 4267              		.cfi_def_cfa_register 13
 4268              		@ sp needed
 4269 0050 80BD     		pop	{r7, pc}
 4270              	.L265:
 4271 0052 00BF     		.align	2
 4272              	.L264:
 4273 0054 00000000 		.word	pxCurrentTCB
 4274              		.cfi_endproc
 4275              	.LFE33:
 4277              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4278              		.align	1
 4279              		.global	xTaskRemoveFromEventList
 4280              		.syntax unified
 4281              		.thumb
 4282              		.thumb_func
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 135


 4284              	xTaskRemoveFromEventList:
 4285              	.LFB34:
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4286              		.loc 1 3139 1
 4287              		.cfi_startproc
 4288              		@ args = 0, pretend = 0, frame = 24
 4289              		@ frame_needed = 1, uses_anonymous_args = 0
 4290 0000 80B5     		push	{r7, lr}
 4291              	.LCFI152:
 4292              		.cfi_def_cfa_offset 8
 4293              		.cfi_offset 7, -8
 4294              		.cfi_offset 14, -4
 4295 0002 86B0     		sub	sp, sp, #24
 4296              	.LCFI153:
 4297              		.cfi_def_cfa_offset 32
 4298 0004 00AF     		add	r7, sp, #0
 4299              	.LCFI154:
 4300              		.cfi_def_cfa_register 7
 4301 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4302              		.loc 1 3156 19
 4303 0008 7B68     		ldr	r3, [r7, #4]
 4304 000a DB68     		ldr	r3, [r3, #12]
 4305              		.loc 1 3156 17
 4306 000c DB68     		ldr	r3, [r3, #12]
 4307 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4308              		.loc 1 3157 2
 4309 0010 3B69     		ldr	r3, [r7, #16]
 4310 0012 002B     		cmp	r3, #0
 4311 0014 0AD1     		bne	.L267
 4312              	.LBB190:
 4313              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4314              		.loc 2 195 2
 4315              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 136


 4316              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4317 0016 4FF05003 			mov r3, #80												
 4318 001a 83F31188 		msr basepri, r3											
 4319 001e BFF36F8F 		isb														
 4320 0022 BFF34F8F 		dsb														
 4321              	
 4322              	@ 0 "" 2
 4323              		.thumb
 4324              		.syntax unified
 4325 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4326              		.loc 2 203 1
 4327 0028 00BF     		nop
 4328              	.L268:
 4329              	.LBE191:
 4330              	.LBE190:
 4331              		.loc 1 3157 2 discriminator 1
 4332 002a FEE7     		b	.L268
 4333              	.L267:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4334              		.loc 1 3158 11
 4335 002c 3B69     		ldr	r3, [r7, #16]
 4336 002e 1833     		adds	r3, r3, #24
 4337 0030 1846     		mov	r0, r3
 4338 0032 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4339              		.loc 1 3160 27
 4340 0036 1E4B     		ldr	r3, .L275
 4341 0038 1B68     		ldr	r3, [r3]
 4342              		.loc 1 3160 4
 4343 003a 002B     		cmp	r3, #0
 4344 003c 1DD1     		bne	.L269
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4345              		.loc 1 3162 12
 4346 003e 3B69     		ldr	r3, [r7, #16]
 4347 0040 0433     		adds	r3, r3, #4
 4348 0042 1846     		mov	r0, r3
 4349 0044 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4350              		.loc 1 3163 3
 4351 0048 3B69     		ldr	r3, [r7, #16]
 4352 004a DA6A     		ldr	r2, [r3, #44]
 4353 004c 194B     		ldr	r3, .L275+4
 4354 004e 1B68     		ldr	r3, [r3]
 4355 0050 9A42     		cmp	r2, r3
 4356 0052 03D9     		bls	.L270
 4357              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4358 0054 3B69     		ldr	r3, [r7, #16]
 4359 0056 DB6A     		ldr	r3, [r3, #44]
 4360 0058 164A     		ldr	r2, .L275+4
 4361 005a 1360     		str	r3, [r2]
 4362              	.L270:
 4363              		.loc 1 3163 3 discriminator 3
 4364 005c 3B69     		ldr	r3, [r7, #16]
 4365 005e DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 137


 4366 0060 1346     		mov	r3, r2
 4367 0062 9B00     		lsls	r3, r3, #2
 4368 0064 1344     		add	r3, r3, r2
 4369 0066 9B00     		lsls	r3, r3, #2
 4370 0068 134A     		ldr	r2, .L275+8
 4371 006a 1A44     		add	r2, r2, r3
 4372 006c 3B69     		ldr	r3, [r7, #16]
 4373 006e 0433     		adds	r3, r3, #4
 4374 0070 1946     		mov	r1, r3
 4375 0072 1046     		mov	r0, r2
 4376 0074 FFF7FEFF 		bl	vListInsertEnd
 4377 0078 05E0     		b	.L271
 4378              	.L269:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4379              		.loc 1 3183 3 is_stmt 1
 4380 007a 3B69     		ldr	r3, [r7, #16]
 4381 007c 1833     		adds	r3, r3, #24
 4382 007e 1946     		mov	r1, r3
 4383 0080 0E48     		ldr	r0, .L275+12
 4384 0082 FFF7FEFF 		bl	vListInsertEnd
 4385              	.L271:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4386              		.loc 1 3186 20
 4387 0086 3B69     		ldr	r3, [r7, #16]
 4388 0088 DA6A     		ldr	r2, [r3, #44]
 4389              		.loc 1 3186 47
 4390 008a 0D4B     		ldr	r3, .L275+16
 4391 008c 1B68     		ldr	r3, [r3]
 4392 008e DB6A     		ldr	r3, [r3, #44]
 4393              		.loc 1 3186 4
 4394 0090 9A42     		cmp	r2, r3
 4395 0092 05D9     		bls	.L272
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 138


3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4396              		.loc 1 3191 11
 4397 0094 0123     		movs	r3, #1
 4398 0096 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4399              		.loc 1 3195 17
 4400 0098 0A4B     		ldr	r3, .L275+20
 4401 009a 0122     		movs	r2, #1
 4402 009c 1A60     		str	r2, [r3]
 4403 009e 01E0     		b	.L273
 4404              	.L272:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4405              		.loc 1 3199 11
 4406 00a0 0023     		movs	r3, #0
 4407 00a2 7B61     		str	r3, [r7, #20]
 4408              	.L273:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4409              		.loc 1 3202 9
 4410 00a4 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4411              		.loc 1 3203 1
 4412 00a6 1846     		mov	r0, r3
 4413 00a8 1837     		adds	r7, r7, #24
 4414              	.LCFI155:
 4415              		.cfi_def_cfa_offset 8
 4416 00aa BD46     		mov	sp, r7
 4417              	.LCFI156:
 4418              		.cfi_def_cfa_register 13
 4419              		@ sp needed
 4420 00ac 80BD     		pop	{r7, pc}
 4421              	.L276:
 4422 00ae 00BF     		.align	2
 4423              	.L275:
 4424 00b0 00000000 		.word	uxSchedulerSuspended
 4425 00b4 00000000 		.word	uxTopReadyPriority
 4426 00b8 00000000 		.word	pxReadyTasksLists
 4427 00bc 00000000 		.word	xPendingReadyList
 4428 00c0 00000000 		.word	pxCurrentTCB
 4429 00c4 00000000 		.word	xYieldPending
 4430              		.cfi_endproc
 4431              	.LFE34:
 4433              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4434              		.align	1
 4435              		.global	vTaskRemoveFromUnorderedEventList
 4436              		.syntax unified
 4437              		.thumb
 4438              		.thumb_func
 4440              	vTaskRemoveFromUnorderedEventList:
 4441              	.LFB35:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 139


3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4442              		.loc 1 3207 1
 4443              		.cfi_startproc
 4444              		@ args = 0, pretend = 0, frame = 24
 4445              		@ frame_needed = 1, uses_anonymous_args = 0
 4446 0000 80B5     		push	{r7, lr}
 4447              	.LCFI157:
 4448              		.cfi_def_cfa_offset 8
 4449              		.cfi_offset 7, -8
 4450              		.cfi_offset 14, -4
 4451 0002 86B0     		sub	sp, sp, #24
 4452              	.LCFI158:
 4453              		.cfi_def_cfa_offset 32
 4454 0004 00AF     		add	r7, sp, #0
 4455              	.LCFI159:
 4456              		.cfi_def_cfa_register 7
 4457 0006 7860     		str	r0, [r7, #4]
 4458 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4459              		.loc 1 3212 2
 4460 000a 294B     		ldr	r3, .L285
 4461 000c 1B68     		ldr	r3, [r3]
 4462 000e 002B     		cmp	r3, #0
 4463 0010 0AD1     		bne	.L278
 4464              	.LBB192:
 4465              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4466              		.loc 2 195 2
 4467              		.syntax unified
 4468              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4469 0012 4FF05003 			mov r3, #80												
 4470 0016 83F31188 		msr basepri, r3											
 4471 001a BFF36F8F 		isb														
 4472 001e BFF34F8F 		dsb														
 4473              	
 4474              	@ 0 "" 2
 4475              		.thumb
 4476              		.syntax unified
 4477 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4478              		.loc 2 203 1
 4479 0024 00BF     		nop
 4480              	.L279:
 4481              	.LBE193:
 4482              	.LBE192:
 4483              		.loc 1 3212 2 discriminator 1
 4484 0026 FEE7     		b	.L279
 4485              	.L278:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 140


3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4486              		.loc 1 3215 2
 4487 0028 3B68     		ldr	r3, [r7]
 4488 002a 43F00042 		orr	r2, r3, #-2147483648
 4489 002e 7B68     		ldr	r3, [r7, #4]
 4490 0030 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4491              		.loc 1 3219 17
 4492 0032 7B68     		ldr	r3, [r7, #4]
 4493 0034 DB68     		ldr	r3, [r3, #12]
 4494 0036 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4495              		.loc 1 3220 2
 4496 0038 7B69     		ldr	r3, [r7, #20]
 4497 003a 002B     		cmp	r3, #0
 4498 003c 0AD1     		bne	.L280
 4499              	.LBB194:
 4500              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4501              		.loc 2 195 2
 4502              		.syntax unified
 4503              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4504 003e 4FF05003 			mov r3, #80												
 4505 0042 83F31188 		msr basepri, r3											
 4506 0046 BFF36F8F 		isb														
 4507 004a BFF34F8F 		dsb														
 4508              	
 4509              	@ 0 "" 2
 4510              		.thumb
 4511              		.syntax unified
 4512 004e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4513              		.loc 2 203 1
 4514 0050 00BF     		nop
 4515              	.L281:
 4516              	.LBE195:
 4517              	.LBE194:
 4518              		.loc 1 3220 2 discriminator 2
 4519 0052 FEE7     		b	.L281
 4520              	.L280:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4521              		.loc 1 3221 11
 4522 0054 7868     		ldr	r0, [r7, #4]
 4523 0056 FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 141


3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4524              		.loc 1 3240 11
 4525 005a 7B69     		ldr	r3, [r7, #20]
 4526 005c 0433     		adds	r3, r3, #4
 4527 005e 1846     		mov	r0, r3
 4528 0060 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4529              		.loc 1 3241 2
 4530 0064 7B69     		ldr	r3, [r7, #20]
 4531 0066 DA6A     		ldr	r2, [r3, #44]
 4532 0068 124B     		ldr	r3, .L285+4
 4533 006a 1B68     		ldr	r3, [r3]
 4534 006c 9A42     		cmp	r2, r3
 4535 006e 03D9     		bls	.L282
 4536              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4537 0070 7B69     		ldr	r3, [r7, #20]
 4538 0072 DB6A     		ldr	r3, [r3, #44]
 4539 0074 0F4A     		ldr	r2, .L285+4
 4540 0076 1360     		str	r3, [r2]
 4541              	.L282:
 4542              		.loc 1 3241 2 discriminator 3
 4543 0078 7B69     		ldr	r3, [r7, #20]
 4544 007a DA6A     		ldr	r2, [r3, #44]
 4545 007c 1346     		mov	r3, r2
 4546 007e 9B00     		lsls	r3, r3, #2
 4547 0080 1344     		add	r3, r3, r2
 4548 0082 9B00     		lsls	r3, r3, #2
 4549 0084 0C4A     		ldr	r2, .L285+8
 4550 0086 1A44     		add	r2, r2, r3
 4551 0088 7B69     		ldr	r3, [r7, #20]
 4552 008a 0433     		adds	r3, r3, #4
 4553 008c 1946     		mov	r1, r3
 4554 008e 1046     		mov	r0, r2
 4555 0090 FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4556              		.loc 1 3243 20 is_stmt 1 discriminator 3
 4557 0094 7B69     		ldr	r3, [r7, #20]
 4558 0096 DA6A     		ldr	r2, [r3, #44]
 4559              		.loc 1 3243 47 discriminator 3
 4560 0098 084B     		ldr	r3, .L285+12
 4561 009a 1B68     		ldr	r3, [r3]
 4562 009c DB6A     		ldr	r3, [r3, #44]
 4563              		.loc 1 3243 4 discriminator 3
 4564 009e 9A42     		cmp	r2, r3
 4565 00a0 02D9     		bls	.L284
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 142


3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4566              		.loc 1 3249 17
 4567 00a2 074B     		ldr	r3, .L285+16
 4568 00a4 0122     		movs	r2, #1
 4569 00a6 1A60     		str	r2, [r3]
 4570              	.L284:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4571              		.loc 1 3251 1
 4572 00a8 00BF     		nop
 4573 00aa 1837     		adds	r7, r7, #24
 4574              	.LCFI160:
 4575              		.cfi_def_cfa_offset 8
 4576 00ac BD46     		mov	sp, r7
 4577              	.LCFI161:
 4578              		.cfi_def_cfa_register 13
 4579              		@ sp needed
 4580 00ae 80BD     		pop	{r7, pc}
 4581              	.L286:
 4582              		.align	2
 4583              	.L285:
 4584 00b0 00000000 		.word	uxSchedulerSuspended
 4585 00b4 00000000 		.word	uxTopReadyPriority
 4586 00b8 00000000 		.word	pxReadyTasksLists
 4587 00bc 00000000 		.word	pxCurrentTCB
 4588 00c0 00000000 		.word	xYieldPending
 4589              		.cfi_endproc
 4590              	.LFE35:
 4592              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4593              		.align	1
 4594              		.global	vTaskSetTimeOutState
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4599              	vTaskSetTimeOutState:
 4600              	.LFB36:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4601              		.loc 1 3255 1
 4602              		.cfi_startproc
 4603              		@ args = 0, pretend = 0, frame = 16
 4604              		@ frame_needed = 1, uses_anonymous_args = 0
 4605 0000 80B5     		push	{r7, lr}
 4606              	.LCFI162:
 4607              		.cfi_def_cfa_offset 8
 4608              		.cfi_offset 7, -8
 4609              		.cfi_offset 14, -4
 4610 0002 84B0     		sub	sp, sp, #16
 4611              	.LCFI163:
 4612              		.cfi_def_cfa_offset 24
 4613 0004 00AF     		add	r7, sp, #0
 4614              	.LCFI164:
 4615              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 143


 4616 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4617              		.loc 1 3256 2
 4618 0008 7B68     		ldr	r3, [r7, #4]
 4619 000a 002B     		cmp	r3, #0
 4620 000c 0AD1     		bne	.L288
 4621              	.LBB196:
 4622              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4623              		.loc 2 195 2
 4624              		.syntax unified
 4625              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4626 000e 4FF05003 			mov r3, #80												
 4627 0012 83F31188 		msr basepri, r3											
 4628 0016 BFF36F8F 		isb														
 4629 001a BFF34F8F 		dsb														
 4630              	
 4631              	@ 0 "" 2
 4632              		.thumb
 4633              		.syntax unified
 4634 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4635              		.loc 2 203 1
 4636 0020 00BF     		nop
 4637              	.L289:
 4638              	.LBE197:
 4639              	.LBE196:
 4640              		.loc 1 3256 2 discriminator 1
 4641 0022 FEE7     		b	.L289
 4642              	.L288:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4643              		.loc 1 3257 2
 4644 0024 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4645              		.loc 1 3259 29
 4646 0028 064B     		ldr	r3, .L290
 4647 002a 1A68     		ldr	r2, [r3]
 4648 002c 7B68     		ldr	r3, [r7, #4]
 4649 002e 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4650              		.loc 1 3260 30
 4651 0030 054B     		ldr	r3, .L290+4
 4652 0032 1A68     		ldr	r2, [r3]
 4653 0034 7B68     		ldr	r3, [r7, #4]
 4654 0036 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4655              		.loc 1 3262 2
 4656 0038 FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4657              		.loc 1 3263 1
 4658 003c 00BF     		nop
 4659 003e 1037     		adds	r7, r7, #16
 4660              	.LCFI165:
 4661              		.cfi_def_cfa_offset 8
 4662 0040 BD46     		mov	sp, r7
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 144


 4663              	.LCFI166:
 4664              		.cfi_def_cfa_register 13
 4665              		@ sp needed
 4666 0042 80BD     		pop	{r7, pc}
 4667              	.L291:
 4668              		.align	2
 4669              	.L290:
 4670 0044 00000000 		.word	xNumOfOverflows
 4671 0048 00000000 		.word	xTickCount
 4672              		.cfi_endproc
 4673              	.LFE36:
 4675              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4676              		.align	1
 4677              		.global	vTaskInternalSetTimeOutState
 4678              		.syntax unified
 4679              		.thumb
 4680              		.thumb_func
 4682              	vTaskInternalSetTimeOutState:
 4683              	.LFB37:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4684              		.loc 1 3267 1
 4685              		.cfi_startproc
 4686              		@ args = 0, pretend = 0, frame = 8
 4687              		@ frame_needed = 1, uses_anonymous_args = 0
 4688              		@ link register save eliminated.
 4689 0000 80B4     		push	{r7}
 4690              	.LCFI167:
 4691              		.cfi_def_cfa_offset 4
 4692              		.cfi_offset 7, -4
 4693 0002 83B0     		sub	sp, sp, #12
 4694              	.LCFI168:
 4695              		.cfi_def_cfa_offset 16
 4696 0004 00AF     		add	r7, sp, #0
 4697              	.LCFI169:
 4698              		.cfi_def_cfa_register 7
 4699 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4700              		.loc 1 3269 28
 4701 0008 064B     		ldr	r3, .L293
 4702 000a 1A68     		ldr	r2, [r3]
 4703 000c 7B68     		ldr	r3, [r7, #4]
 4704 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4705              		.loc 1 3270 29
 4706 0010 054B     		ldr	r3, .L293+4
 4707 0012 1A68     		ldr	r2, [r3]
 4708 0014 7B68     		ldr	r3, [r7, #4]
 4709 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4710              		.loc 1 3271 1
 4711 0018 00BF     		nop
 4712 001a 0C37     		adds	r7, r7, #12
 4713              	.LCFI170:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 145


 4714              		.cfi_def_cfa_offset 4
 4715 001c BD46     		mov	sp, r7
 4716              	.LCFI171:
 4717              		.cfi_def_cfa_register 13
 4718              		@ sp needed
 4719 001e 5DF8047B 		ldr	r7, [sp], #4
 4720              	.LCFI172:
 4721              		.cfi_restore 7
 4722              		.cfi_def_cfa_offset 0
 4723 0022 7047     		bx	lr
 4724              	.L294:
 4725              		.align	2
 4726              	.L293:
 4727 0024 00000000 		.word	xNumOfOverflows
 4728 0028 00000000 		.word	xTickCount
 4729              		.cfi_endproc
 4730              	.LFE37:
 4732              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4733              		.align	1
 4734              		.global	xTaskCheckForTimeOut
 4735              		.syntax unified
 4736              		.thumb
 4737              		.thumb_func
 4739              	xTaskCheckForTimeOut:
 4740              	.LFB38:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4741              		.loc 1 3275 1
 4742              		.cfi_startproc
 4743              		@ args = 0, pretend = 0, frame = 32
 4744              		@ frame_needed = 1, uses_anonymous_args = 0
 4745 0000 80B5     		push	{r7, lr}
 4746              	.LCFI173:
 4747              		.cfi_def_cfa_offset 8
 4748              		.cfi_offset 7, -8
 4749              		.cfi_offset 14, -4
 4750 0002 88B0     		sub	sp, sp, #32
 4751              	.LCFI174:
 4752              		.cfi_def_cfa_offset 40
 4753 0004 00AF     		add	r7, sp, #0
 4754              	.LCFI175:
 4755              		.cfi_def_cfa_register 7
 4756 0006 7860     		str	r0, [r7, #4]
 4757 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4758              		.loc 1 3278 2
 4759 000a 7B68     		ldr	r3, [r7, #4]
 4760 000c 002B     		cmp	r3, #0
 4761 000e 0AD1     		bne	.L296
 4762              	.LBB198:
 4763              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4764              		.loc 2 195 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 146


 4765              		.syntax unified
 4766              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4767 0010 4FF05003 			mov r3, #80												
 4768 0014 83F31188 		msr basepri, r3											
 4769 0018 BFF36F8F 		isb														
 4770 001c BFF34F8F 		dsb														
 4771              	
 4772              	@ 0 "" 2
 4773              		.thumb
 4774              		.syntax unified
 4775 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4776              		.loc 2 203 1
 4777 0022 00BF     		nop
 4778              	.L297:
 4779              	.LBE199:
 4780              	.LBE198:
 4781              		.loc 1 3278 2 discriminator 1
 4782 0024 FEE7     		b	.L297
 4783              	.L296:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4784              		.loc 1 3279 2
 4785 0026 3B68     		ldr	r3, [r7]
 4786 0028 002B     		cmp	r3, #0
 4787 002a 0AD1     		bne	.L298
 4788              	.LBB200:
 4789              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4790              		.loc 2 195 2
 4791              		.syntax unified
 4792              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4793 002c 4FF05003 			mov r3, #80												
 4794 0030 83F31188 		msr basepri, r3											
 4795 0034 BFF36F8F 		isb														
 4796 0038 BFF34F8F 		dsb														
 4797              	
 4798              	@ 0 "" 2
 4799              		.thumb
 4800              		.syntax unified
 4801 003c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4802              		.loc 2 203 1
 4803 003e 00BF     		nop
 4804              	.L299:
 4805              	.LBE201:
 4806              	.LBE200:
 4807              		.loc 1 3279 2 discriminator 2
 4808 0040 FEE7     		b	.L299
 4809              	.L298:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4810              		.loc 1 3281 2
 4811 0042 FFF7FEFF 		bl	vPortEnterCritical
 4812              	.LBB202:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 147


 4813              		.loc 1 3284 20
 4814 0046 1D4B     		ldr	r3, .L305
 4815 0048 1B68     		ldr	r3, [r3]
 4816 004a BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4817              		.loc 1 3285 62
 4818 004c 7B68     		ldr	r3, [r7, #4]
 4819 004e 5B68     		ldr	r3, [r3, #4]
 4820              		.loc 1 3285 20
 4821 0050 BA69     		ldr	r2, [r7, #24]
 4822 0052 D31A     		subs	r3, r2, r3
 4823 0054 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4824              		.loc 1 3299 8
 4825 0056 3B68     		ldr	r3, [r7]
 4826 0058 1B68     		ldr	r3, [r3]
 4827              		.loc 1 3299 6
 4828 005a B3F1FF3F 		cmp	r3, #-1
 4829 005e 02D1     		bne	.L300
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4830              		.loc 1 3304 13
 4831 0060 0023     		movs	r3, #0
 4832 0062 FB61     		str	r3, [r7, #28]
 4833 0064 23E0     		b	.L301
 4834              	.L300:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4835              		.loc 1 3309 37
 4836 0066 7B68     		ldr	r3, [r7, #4]
 4837 0068 1A68     		ldr	r2, [r3]
 4838              		.loc 1 3309 25
 4839 006a 154B     		ldr	r3, .L305+4
 4840 006c 1B68     		ldr	r3, [r3]
 4841              		.loc 1 3309 5
 4842 006e 9A42     		cmp	r2, r3
 4843 0070 07D0     		beq	.L302
 4844              		.loc 1 3309 89 discriminator 1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 148


 4845 0072 7B68     		ldr	r3, [r7, #4]
 4846 0074 5B68     		ldr	r3, [r3, #4]
 4847              		.loc 1 3309 56 discriminator 1
 4848 0076 BA69     		ldr	r2, [r7, #24]
 4849 0078 9A42     		cmp	r2, r3
 4850 007a 02D3     		bcc	.L302
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4851              		.loc 1 3316 12
 4852 007c 0123     		movs	r3, #1
 4853 007e FB61     		str	r3, [r7, #28]
 4854 0080 15E0     		b	.L301
 4855              	.L302:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4856              		.loc 1 3318 27
 4857 0082 3B68     		ldr	r3, [r7]
 4858 0084 1B68     		ldr	r3, [r3]
 4859              		.loc 1 3318 10
 4860 0086 7A69     		ldr	r2, [r7, #20]
 4861 0088 9A42     		cmp	r2, r3
 4862 008a 0BD2     		bcs	.L303
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4863              		.loc 1 3321 19
 4864 008c 3B68     		ldr	r3, [r7]
 4865 008e 1A68     		ldr	r2, [r3]
 4866 0090 7B69     		ldr	r3, [r7, #20]
 4867 0092 D21A     		subs	r2, r2, r3
 4868 0094 3B68     		ldr	r3, [r7]
 4869 0096 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4870              		.loc 1 3322 4
 4871 0098 7868     		ldr	r0, [r7, #4]
 4872 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4873              		.loc 1 3323 12
 4874 009e 0023     		movs	r3, #0
 4875 00a0 FB61     		str	r3, [r7, #28]
 4876 00a2 04E0     		b	.L301
 4877              	.L303:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4878              		.loc 1 3327 19
 4879 00a4 3B68     		ldr	r3, [r7]
 4880 00a6 0022     		movs	r2, #0
 4881 00a8 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4882              		.loc 1 3328 12
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 149


 4883 00aa 0123     		movs	r3, #1
 4884 00ac FB61     		str	r3, [r7, #28]
 4885              	.L301:
 4886              	.LBE202:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4887              		.loc 1 3331 2
 4888 00ae FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4889              		.loc 1 3333 9
 4890 00b2 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4891              		.loc 1 3334 1
 4892 00b4 1846     		mov	r0, r3
 4893 00b6 2037     		adds	r7, r7, #32
 4894              	.LCFI176:
 4895              		.cfi_def_cfa_offset 8
 4896 00b8 BD46     		mov	sp, r7
 4897              	.LCFI177:
 4898              		.cfi_def_cfa_register 13
 4899              		@ sp needed
 4900 00ba 80BD     		pop	{r7, pc}
 4901              	.L306:
 4902              		.align	2
 4903              	.L305:
 4904 00bc 00000000 		.word	xTickCount
 4905 00c0 00000000 		.word	xNumOfOverflows
 4906              		.cfi_endproc
 4907              	.LFE38:
 4909              		.section	.text.vTaskMissedYield,"ax",%progbits
 4910              		.align	1
 4911              		.global	vTaskMissedYield
 4912              		.syntax unified
 4913              		.thumb
 4914              		.thumb_func
 4916              	vTaskMissedYield:
 4917              	.LFB39:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4918              		.loc 1 3338 1
 4919              		.cfi_startproc
 4920              		@ args = 0, pretend = 0, frame = 0
 4921              		@ frame_needed = 1, uses_anonymous_args = 0
 4922              		@ link register save eliminated.
 4923 0000 80B4     		push	{r7}
 4924              	.LCFI178:
 4925              		.cfi_def_cfa_offset 4
 4926              		.cfi_offset 7, -4
 4927 0002 00AF     		add	r7, sp, #0
 4928              	.LCFI179:
 4929              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4930              		.loc 1 3339 16
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 150


 4931 0004 034B     		ldr	r3, .L308
 4932 0006 0122     		movs	r2, #1
 4933 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4934              		.loc 1 3340 1
 4935 000a 00BF     		nop
 4936 000c BD46     		mov	sp, r7
 4937              	.LCFI180:
 4938              		.cfi_def_cfa_register 13
 4939              		@ sp needed
 4940 000e 5DF8047B 		ldr	r7, [sp], #4
 4941              	.LCFI181:
 4942              		.cfi_restore 7
 4943              		.cfi_def_cfa_offset 0
 4944 0012 7047     		bx	lr
 4945              	.L309:
 4946              		.align	2
 4947              	.L308:
 4948 0014 00000000 		.word	xYieldPending
 4949              		.cfi_endproc
 4950              	.LFE39:
 4952              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4953              		.align	1
 4954              		.global	uxTaskGetTaskNumber
 4955              		.syntax unified
 4956              		.thumb
 4957              		.thumb_func
 4959              	uxTaskGetTaskNumber:
 4960              	.LFB40:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4961              		.loc 1 3346 2
 4962              		.cfi_startproc
 4963              		@ args = 0, pretend = 0, frame = 16
 4964              		@ frame_needed = 1, uses_anonymous_args = 0
 4965              		@ link register save eliminated.
 4966 0000 80B4     		push	{r7}
 4967              	.LCFI182:
 4968              		.cfi_def_cfa_offset 4
 4969              		.cfi_offset 7, -4
 4970 0002 85B0     		sub	sp, sp, #20
 4971              	.LCFI183:
 4972              		.cfi_def_cfa_offset 24
 4973 0004 00AF     		add	r7, sp, #0
 4974              	.LCFI184:
 4975              		.cfi_def_cfa_register 7
 4976 0006 7860     		str	r0, [r7, #4]
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 4977              		.loc 1 3350 5
 4978 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 151


 4979 000a 002B     		cmp	r3, #0
 4980 000c 05D0     		beq	.L311
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 4981              		.loc 1 3352 10
 4982 000e 7B68     		ldr	r3, [r7, #4]
 4983 0010 BB60     		str	r3, [r7, #8]
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4984              		.loc 1 3353 13
 4985 0012 BB68     		ldr	r3, [r7, #8]
 4986 0014 9B6C     		ldr	r3, [r3, #72]
 4987 0016 FB60     		str	r3, [r7, #12]
 4988 0018 01E0     		b	.L312
 4989              	.L311:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 4990              		.loc 1 3357 13
 4991 001a 0023     		movs	r3, #0
 4992 001c FB60     		str	r3, [r7, #12]
 4993              	.L312:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 4994              		.loc 1 3360 10
 4995 001e FB68     		ldr	r3, [r7, #12]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4996              		.loc 1 3361 2
 4997 0020 1846     		mov	r0, r3
 4998 0022 1437     		adds	r7, r7, #20
 4999              	.LCFI185:
 5000              		.cfi_def_cfa_offset 4
 5001 0024 BD46     		mov	sp, r7
 5002              	.LCFI186:
 5003              		.cfi_def_cfa_register 13
 5004              		@ sp needed
 5005 0026 5DF8047B 		ldr	r7, [sp], #4
 5006              	.LCFI187:
 5007              		.cfi_restore 7
 5008              		.cfi_def_cfa_offset 0
 5009 002a 7047     		bx	lr
 5010              		.cfi_endproc
 5011              	.LFE40:
 5013              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5014              		.align	1
 5015              		.global	vTaskSetTaskNumber
 5016              		.syntax unified
 5017              		.thumb
 5018              		.thumb_func
 5020              	vTaskSetTaskNumber:
 5021              	.LFB41:
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 152


3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5022              		.loc 1 3369 2
 5023              		.cfi_startproc
 5024              		@ args = 0, pretend = 0, frame = 16
 5025              		@ frame_needed = 1, uses_anonymous_args = 0
 5026              		@ link register save eliminated.
 5027 0000 80B4     		push	{r7}
 5028              	.LCFI188:
 5029              		.cfi_def_cfa_offset 4
 5030              		.cfi_offset 7, -4
 5031 0002 85B0     		sub	sp, sp, #20
 5032              	.LCFI189:
 5033              		.cfi_def_cfa_offset 24
 5034 0004 00AF     		add	r7, sp, #0
 5035              	.LCFI190:
 5036              		.cfi_def_cfa_register 7
 5037 0006 7860     		str	r0, [r7, #4]
 5038 0008 3960     		str	r1, [r7]
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5039              		.loc 1 3372 5
 5040 000a 7B68     		ldr	r3, [r7, #4]
 5041 000c 002B     		cmp	r3, #0
 5042 000e 04D0     		beq	.L316
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5043              		.loc 1 3374 10
 5044 0010 7B68     		ldr	r3, [r7, #4]
 5045 0012 FB60     		str	r3, [r7, #12]
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5046              		.loc 1 3375 24
 5047 0014 FB68     		ldr	r3, [r7, #12]
 5048 0016 3A68     		ldr	r2, [r7]
 5049 0018 9A64     		str	r2, [r3, #72]
 5050              	.L316:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5051              		.loc 1 3377 2
 5052 001a 00BF     		nop
 5053 001c 1437     		adds	r7, r7, #20
 5054              	.LCFI191:
 5055              		.cfi_def_cfa_offset 4
 5056 001e BD46     		mov	sp, r7
 5057              	.LCFI192:
 5058              		.cfi_def_cfa_register 13
 5059              		@ sp needed
 5060 0020 5DF8047B 		ldr	r7, [sp], #4
 5061              	.LCFI193:
 5062              		.cfi_restore 7
 5063              		.cfi_def_cfa_offset 0
 5064 0024 7047     		bx	lr
 5065              		.cfi_endproc
 5066              	.LFE41:
 5068              		.section	.text.prvIdleTask,"ax",%progbits
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 153


 5069              		.align	1
 5070              		.syntax unified
 5071              		.thumb
 5072              		.thumb_func
 5074              	prvIdleTask:
 5075              	.LFB42:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5076              		.loc 1 3393 1
 5077              		.cfi_startproc
 5078              		@ args = 0, pretend = 0, frame = 8
 5079              		@ frame_needed = 1, uses_anonymous_args = 0
 5080 0000 80B5     		push	{r7, lr}
 5081              	.LCFI194:
 5082              		.cfi_def_cfa_offset 8
 5083              		.cfi_offset 7, -8
 5084              		.cfi_offset 14, -4
 5085 0002 82B0     		sub	sp, sp, #8
 5086              	.LCFI195:
 5087              		.cfi_def_cfa_offset 16
 5088 0004 00AF     		add	r7, sp, #0
 5089              	.LCFI196:
 5090              		.cfi_def_cfa_register 7
 5091 0006 7860     		str	r0, [r7, #4]
 5092              	.L319:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5093              		.loc 1 3409 3
 5094 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 154


3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5095              		.loc 1 3432 8
 5096 000c 064B     		ldr	r3, .L320
 5097 000e 1B68     		ldr	r3, [r3]
 5098              		.loc 1 3432 6
 5099 0010 012B     		cmp	r3, #1
 5100 0012 F9D9     		bls	.L319
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5101              		.loc 1 3434 5
 5102 0014 054B     		ldr	r3, .L320+4
 5103 0016 4FF08052 		mov	r2, #268435456
 5104 001a 1A60     		str	r2, [r3]
 5105              		.syntax unified
 5106              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5107 001c BFF34F8F 		dsb
 5108              	@ 0 "" 2
 5109              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5110 0020 BFF36F8F 		isb
 5111              	@ 0 "" 2
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5112              		.loc 1 3409 3
 5113              		.thumb
 5114              		.syntax unified
 5115 0024 F0E7     		b	.L319
 5116              	.L321:
 5117 0026 00BF     		.align	2
 5118              	.L320:
 5119 0028 00000000 		.word	pxReadyTasksLists
 5120 002c 04ED00E0 		.word	-536810236
 5121              		.cfi_endproc
 5122              	.LFE42:
 5124              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5125              		.align	1
 5126              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 155


 5127              		.thumb
 5128              		.thumb_func
 5130              	prvInitialiseTaskLists:
 5131              	.LFB43:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 156


3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 157


3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 158


3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5132              		.loc 1 3608 1
 5133              		.cfi_startproc
 5134              		@ args = 0, pretend = 0, frame = 8
 5135              		@ frame_needed = 1, uses_anonymous_args = 0
 5136 0000 80B5     		push	{r7, lr}
 5137              	.LCFI197:
 5138              		.cfi_def_cfa_offset 8
 5139              		.cfi_offset 7, -8
 5140              		.cfi_offset 14, -4
 5141 0002 82B0     		sub	sp, sp, #8
 5142              	.LCFI198:
 5143              		.cfi_def_cfa_offset 16
 5144 0004 00AF     		add	r7, sp, #0
 5145              	.LCFI199:
 5146              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5147              		.loc 1 3611 18
 5148 0006 0023     		movs	r3, #0
 5149 0008 7B60     		str	r3, [r7, #4]
 5150              		.loc 1 3611 2
 5151 000a 0CE0     		b	.L323
 5152              	.L324:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5153              		.loc 1 3613 3 discriminator 3
 5154 000c 7A68     		ldr	r2, [r7, #4]
 5155 000e 1346     		mov	r3, r2
 5156 0010 9B00     		lsls	r3, r3, #2
 5157 0012 1344     		add	r3, r3, r2
 5158 0014 9B00     		lsls	r3, r3, #2
 5159 0016 124A     		ldr	r2, .L325
 5160 0018 1344     		add	r3, r3, r2
 5161 001a 1846     		mov	r0, r3
 5162 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5163              		.loc 1 3611 101 discriminator 3
 5164 0020 7B68     		ldr	r3, [r7, #4]
 5165 0022 0133     		adds	r3, r3, #1
 5166 0024 7B60     		str	r3, [r7, #4]
 5167              	.L323:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5168              		.loc 1 3611 51 discriminator 1
 5169 0026 7B68     		ldr	r3, [r7, #4]
 5170 0028 372B     		cmp	r3, #55
 5171 002a EFD9     		bls	.L324
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 159


 5172              		.loc 1 3616 2
 5173 002c 0D48     		ldr	r0, .L325+4
 5174 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5175              		.loc 1 3617 2
 5176 0032 0D48     		ldr	r0, .L325+8
 5177 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5178              		.loc 1 3618 2
 5179 0038 0C48     		ldr	r0, .L325+12
 5180 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5181              		.loc 1 3622 3
 5182 003e 0C48     		ldr	r0, .L325+16
 5183 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5184              		.loc 1 3628 3
 5185 0044 0B48     		ldr	r0, .L325+20
 5186 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5187              		.loc 1 3634 20
 5188 004a 0B4B     		ldr	r3, .L325+24
 5189 004c 054A     		ldr	r2, .L325+4
 5190 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5191              		.loc 1 3635 28
 5192 0050 0A4B     		ldr	r3, .L325+28
 5193 0052 054A     		ldr	r2, .L325+8
 5194 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5195              		.loc 1 3636 1
 5196 0056 00BF     		nop
 5197 0058 0837     		adds	r7, r7, #8
 5198              	.LCFI200:
 5199              		.cfi_def_cfa_offset 8
 5200 005a BD46     		mov	sp, r7
 5201              	.LCFI201:
 5202              		.cfi_def_cfa_register 13
 5203              		@ sp needed
 5204 005c 80BD     		pop	{r7, pc}
 5205              	.L326:
 5206 005e 00BF     		.align	2
 5207              	.L325:
 5208 0060 00000000 		.word	pxReadyTasksLists
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 160


 5209 0064 00000000 		.word	xDelayedTaskList1
 5210 0068 00000000 		.word	xDelayedTaskList2
 5211 006c 00000000 		.word	xPendingReadyList
 5212 0070 00000000 		.word	xTasksWaitingTermination
 5213 0074 00000000 		.word	xSuspendedTaskList
 5214 0078 00000000 		.word	pxDelayedTaskList
 5215 007c 00000000 		.word	pxOverflowDelayedTaskList
 5216              		.cfi_endproc
 5217              	.LFE43:
 5219              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5220              		.align	1
 5221              		.syntax unified
 5222              		.thumb
 5223              		.thumb_func
 5225              	prvCheckTasksWaitingTermination:
 5226              	.LFB44:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5227              		.loc 1 3640 1
 5228              		.cfi_startproc
 5229              		@ args = 0, pretend = 0, frame = 8
 5230              		@ frame_needed = 1, uses_anonymous_args = 0
 5231 0000 80B5     		push	{r7, lr}
 5232              	.LCFI202:
 5233              		.cfi_def_cfa_offset 8
 5234              		.cfi_offset 7, -8
 5235              		.cfi_offset 14, -4
 5236 0002 82B0     		sub	sp, sp, #8
 5237              	.LCFI203:
 5238              		.cfi_def_cfa_offset 16
 5239 0004 00AF     		add	r7, sp, #0
 5240              	.LCFI204:
 5241              		.cfi_def_cfa_register 7
 5242              	.LBB203:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5243              		.loc 1 3650 8
 5244 0006 19E0     		b	.L328
 5245              	.L329:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5246              		.loc 1 3652 4
 5247 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5248              		.loc 1 3654 13
 5249 000c 104B     		ldr	r3, .L330
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 161


 5250 000e DB68     		ldr	r3, [r3, #12]
 5251              		.loc 1 3654 11
 5252 0010 DB68     		ldr	r3, [r3, #12]
 5253 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5254              		.loc 1 3655 14
 5255 0014 7B68     		ldr	r3, [r7, #4]
 5256 0016 0433     		adds	r3, r3, #4
 5257 0018 1846     		mov	r0, r3
 5258 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5259              		.loc 1 3656 5
 5260 001e 0D4B     		ldr	r3, .L330+4
 5261 0020 1B68     		ldr	r3, [r3]
 5262 0022 013B     		subs	r3, r3, #1
 5263 0024 0B4A     		ldr	r2, .L330+4
 5264 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5265              		.loc 1 3657 5
 5266 0028 0B4B     		ldr	r3, .L330+8
 5267 002a 1B68     		ldr	r3, [r3]
 5268 002c 013B     		subs	r3, r3, #1
 5269 002e 0A4A     		ldr	r2, .L330+8
 5270 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5271              		.loc 1 3659 4
 5272 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5273              		.loc 1 3661 4
 5274 0036 7868     		ldr	r0, [r7, #4]
 5275 0038 FFF7FEFF 		bl	prvDeleteTCB
 5276              	.L328:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5277              		.loc 1 3650 39
 5278 003c 064B     		ldr	r3, .L330+8
 5279 003e 1B68     		ldr	r3, [r3]
 5280 0040 002B     		cmp	r3, #0
 5281 0042 E1D1     		bne	.L329
 5282              	.LBE203:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5283              		.loc 1 3665 1
 5284 0044 00BF     		nop
 5285 0046 00BF     		nop
 5286 0048 0837     		adds	r7, r7, #8
 5287              	.LCFI205:
 5288              		.cfi_def_cfa_offset 8
 5289 004a BD46     		mov	sp, r7
 5290              	.LCFI206:
 5291              		.cfi_def_cfa_register 13
 5292              		@ sp needed
 5293 004c 80BD     		pop	{r7, pc}
 5294              	.L331:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 162


 5295 004e 00BF     		.align	2
 5296              	.L330:
 5297 0050 00000000 		.word	xTasksWaitingTermination
 5298 0054 00000000 		.word	uxCurrentNumberOfTasks
 5299 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5300              		.cfi_endproc
 5301              	.LFE44:
 5303              		.section	.text.vTaskGetInfo,"ax",%progbits
 5304              		.align	1
 5305              		.global	vTaskGetInfo
 5306              		.syntax unified
 5307              		.thumb
 5308              		.thumb_func
 5310              	vTaskGetInfo:
 5311              	.LFB45:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5312              		.loc 1 3671 2
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 24
 5315              		@ frame_needed = 1, uses_anonymous_args = 0
 5316 0000 80B5     		push	{r7, lr}
 5317              	.LCFI207:
 5318              		.cfi_def_cfa_offset 8
 5319              		.cfi_offset 7, -8
 5320              		.cfi_offset 14, -4
 5321 0002 86B0     		sub	sp, sp, #24
 5322              	.LCFI208:
 5323              		.cfi_def_cfa_offset 32
 5324 0004 00AF     		add	r7, sp, #0
 5325              	.LCFI209:
 5326              		.cfi_def_cfa_register 7
 5327 0006 F860     		str	r0, [r7, #12]
 5328 0008 B960     		str	r1, [r7, #8]
 5329 000a 7A60     		str	r2, [r7, #4]
 5330 000c FB70     		strb	r3, [r7, #3]
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5331              		.loc 1 3675 11
 5332 000e FB68     		ldr	r3, [r7, #12]
 5333 0010 002B     		cmp	r3, #0
 5334 0012 02D1     		bne	.L333
 5335              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5336 0014 2C4B     		ldr	r3, .L342
 5337 0016 1B68     		ldr	r3, [r3]
 5338 0018 00E0     		b	.L334
 5339              	.L333:
 5340              		.loc 1 3675 11 discriminator 2
 5341 001a FB68     		ldr	r3, [r7, #12]
 5342              	.L334:
 5343              		.loc 1 3675 9 is_stmt 1 discriminator 4
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 163


 5344 001c 7B61     		str	r3, [r7, #20]
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5345              		.loc 1 3677 25 discriminator 4
 5346 001e BB68     		ldr	r3, [r7, #8]
 5347 0020 7A69     		ldr	r2, [r7, #20]
 5348 0022 1A60     		str	r2, [r3]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5349              		.loc 1 3678 47 discriminator 4
 5350 0024 7B69     		ldr	r3, [r7, #20]
 5351 0026 03F13402 		add	r2, r3, #52
 5352              		.loc 1 3678 28 discriminator 4
 5353 002a BB68     		ldr	r3, [r7, #8]
 5354 002c 5A60     		str	r2, [r3, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5355              		.loc 1 3679 42 discriminator 4
 5356 002e 7B69     		ldr	r3, [r7, #20]
 5357 0030 DA6A     		ldr	r2, [r3, #44]
 5358              		.loc 1 3679 35 discriminator 4
 5359 0032 BB68     		ldr	r3, [r7, #8]
 5360 0034 1A61     		str	r2, [r3, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5361              		.loc 1 3680 36 discriminator 4
 5362 0036 7B69     		ldr	r3, [r7, #20]
 5363 0038 1A6B     		ldr	r2, [r3, #48]
 5364              		.loc 1 3680 29 discriminator 4
 5365 003a BB68     		ldr	r3, [r7, #8]
 5366 003c DA61     		str	r2, [r3, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5367              		.loc 1 3681 36 discriminator 4
 5368 003e 7B69     		ldr	r3, [r7, #20]
 5369 0040 5A6C     		ldr	r2, [r3, #68]
 5370              		.loc 1 3681 29 discriminator 4
 5371 0042 BB68     		ldr	r3, [r7, #8]
 5372 0044 9A60     		str	r2, [r3, #8]
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5373              		.loc 1 3685 40 discriminator 4
 5374 0046 7B69     		ldr	r3, [r7, #20]
 5375 0048 DA6C     		ldr	r2, [r3, #76]
 5376              		.loc 1 3685 33 discriminator 4
 5377 004a BB68     		ldr	r3, [r7, #8]
 5378 004c 5A61     		str	r2, [r3, #20]
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 164


3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5379              		.loc 1 3699 35 discriminator 4
 5380 004e BB68     		ldr	r3, [r7, #8]
 5381 0050 0022     		movs	r2, #0
 5382 0052 9A61     		str	r2, [r3, #24]
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5383              		.loc 1 3706 5 discriminator 4
 5384 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5385 0056 052B     		cmp	r3, #5
 5386 0058 1AD0     		beq	.L335
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5387              		.loc 1 3708 14
 5388 005a 1B4B     		ldr	r3, .L342
 5389 005c 1B68     		ldr	r3, [r3]
 5390              		.loc 1 3708 6
 5391 005e 7A69     		ldr	r2, [r7, #20]
 5392 0060 9A42     		cmp	r2, r3
 5393 0062 03D1     		bne	.L336
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5394              		.loc 1 3710 33
 5395 0064 BB68     		ldr	r3, [r7, #8]
 5396 0066 0022     		movs	r2, #0
 5397 0068 1A73     		strb	r2, [r3, #12]
 5398 006a 18E0     		b	.L337
 5399              	.L336:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5400              		.loc 1 3714 33
 5401 006c BB68     		ldr	r3, [r7, #8]
 5402 006e FA78     		ldrb	r2, [r7, #3]
 5403 0070 1A73     		strb	r2, [r3, #12]
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5404              		.loc 1 3721 8
 5405 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5406 0074 032B     		cmp	r3, #3
 5407 0076 12D1     		bne	.L337
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5408              		.loc 1 3723 7
 5409 0078 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 165


3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5410              		.loc 1 3725 12
 5411 007c 7B69     		ldr	r3, [r7, #20]
 5412 007e 9B6A     		ldr	r3, [r3, #40]
 5413              		.loc 1 3725 10
 5414 0080 002B     		cmp	r3, #0
 5415 0082 02D0     		beq	.L338
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5416              		.loc 1 3727 37
 5417 0084 BB68     		ldr	r3, [r7, #8]
 5418 0086 0222     		movs	r2, #2
 5419 0088 1A73     		strb	r2, [r3, #12]
 5420              	.L338:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5421              		.loc 1 3730 16
 5422 008a FFF7FEFF 		bl	xTaskResumeAll
 5423 008e 06E0     		b	.L337
 5424              	.L335:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5425              		.loc 1 3738 34
 5426 0090 7869     		ldr	r0, [r7, #20]
 5427 0092 FFF7FEFF 		bl	eTaskGetState
 5428 0096 0346     		mov	r3, r0
 5429 0098 1A46     		mov	r2, r3
 5430              		.loc 1 3738 32
 5431 009a BB68     		ldr	r3, [r7, #8]
 5432 009c 1A73     		strb	r2, [r3, #12]
 5433              	.L337:
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5434              		.loc 1 3743 5
 5435 009e 7B68     		ldr	r3, [r7, #4]
 5436 00a0 002B     		cmp	r3, #0
 5437 00a2 09D0     		beq	.L339
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5438              		.loc 1 3751 89
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 166


 5439 00a4 7B69     		ldr	r3, [r7, #20]
 5440 00a6 1B6B     		ldr	r3, [r3, #48]
 5441              		.loc 1 3751 42
 5442 00a8 1846     		mov	r0, r3
 5443 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5444 00ae 0346     		mov	r3, r0
 5445 00b0 1A46     		mov	r2, r3
 5446              		.loc 1 3751 40
 5447 00b2 BB68     		ldr	r3, [r7, #8]
 5448 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5449              		.loc 1 3759 2
 5450 00b6 02E0     		b	.L341
 5451              	.L339:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5452              		.loc 1 3757 39
 5453 00b8 BB68     		ldr	r3, [r7, #8]
 5454 00ba 0022     		movs	r2, #0
 5455 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5456              	.L341:
 5457              		.loc 1 3759 2
 5458 00be 00BF     		nop
 5459 00c0 1837     		adds	r7, r7, #24
 5460              	.LCFI210:
 5461              		.cfi_def_cfa_offset 8
 5462 00c2 BD46     		mov	sp, r7
 5463              	.LCFI211:
 5464              		.cfi_def_cfa_register 13
 5465              		@ sp needed
 5466 00c4 80BD     		pop	{r7, pc}
 5467              	.L343:
 5468 00c6 00BF     		.align	2
 5469              	.L342:
 5470 00c8 00000000 		.word	pxCurrentTCB
 5471              		.cfi_endproc
 5472              	.LFE45:
 5474              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5475              		.align	1
 5476              		.syntax unified
 5477              		.thumb
 5478              		.thumb_func
 5480              	prvListTasksWithinSingleList:
 5481              	.LFB46:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 167


3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5482              		.loc 1 3767 2
 5483              		.cfi_startproc
 5484              		@ args = 0, pretend = 0, frame = 40
 5485              		@ frame_needed = 1, uses_anonymous_args = 0
 5486 0000 80B5     		push	{r7, lr}
 5487              	.LCFI212:
 5488              		.cfi_def_cfa_offset 8
 5489              		.cfi_offset 7, -8
 5490              		.cfi_offset 14, -4
 5491 0002 8AB0     		sub	sp, sp, #40
 5492              	.LCFI213:
 5493              		.cfi_def_cfa_offset 48
 5494 0004 00AF     		add	r7, sp, #0
 5495              	.LCFI214:
 5496              		.cfi_def_cfa_register 7
 5497 0006 F860     		str	r0, [r7, #12]
 5498 0008 B960     		str	r1, [r7, #8]
 5499 000a 1346     		mov	r3, r2
 5500 000c FB71     		strb	r3, [r7, #7]
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5501              		.loc 1 3769 14
 5502 000e 0023     		movs	r3, #0
 5503 0010 7B62     		str	r3, [r7, #36]
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5504              		.loc 1 3771 7
 5505 0012 BB68     		ldr	r3, [r7, #8]
 5506 0014 1B68     		ldr	r3, [r3]
 5507              		.loc 1 3771 5
 5508 0016 002B     		cmp	r3, #0
 5509 0018 3FD0     		beq	.L345
 5510              	.LBB204:
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5511              		.loc 1 3773 4
 5512 001a BB68     		ldr	r3, [r7, #8]
 5513 001c 3B62     		str	r3, [r7, #32]
 5514 001e 3B6A     		ldr	r3, [r7, #32]
 5515 0020 5B68     		ldr	r3, [r3, #4]
 5516 0022 5A68     		ldr	r2, [r3, #4]
 5517 0024 3B6A     		ldr	r3, [r7, #32]
 5518 0026 5A60     		str	r2, [r3, #4]
 5519 0028 3B6A     		ldr	r3, [r7, #32]
 5520 002a 5A68     		ldr	r2, [r3, #4]
 5521 002c 3B6A     		ldr	r3, [r7, #32]
 5522 002e 0833     		adds	r3, r3, #8
 5523 0030 9A42     		cmp	r2, r3
 5524 0032 04D1     		bne	.L346
 5525              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5526 0034 3B6A     		ldr	r3, [r7, #32]
 5527 0036 5B68     		ldr	r3, [r3, #4]
 5528 0038 5A68     		ldr	r2, [r3, #4]
 5529 003a 3B6A     		ldr	r3, [r7, #32]
 5530 003c 5A60     		str	r2, [r3, #4]
 5531              	.L346:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 168


 5532              		.loc 1 3773 4 discriminator 3
 5533 003e 3B6A     		ldr	r3, [r7, #32]
 5534 0040 5B68     		ldr	r3, [r3, #4]
 5535 0042 DB68     		ldr	r3, [r3, #12]
 5536 0044 FB61     		str	r3, [r7, #28]
 5537              	.L348:
 5538              	.LBE204:
 5539              	.LBB205:
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5540              		.loc 1 3781 5 is_stmt 1
 5541 0046 BB68     		ldr	r3, [r7, #8]
 5542 0048 BB61     		str	r3, [r7, #24]
 5543 004a BB69     		ldr	r3, [r7, #24]
 5544 004c 5B68     		ldr	r3, [r3, #4]
 5545 004e 5A68     		ldr	r2, [r3, #4]
 5546 0050 BB69     		ldr	r3, [r7, #24]
 5547 0052 5A60     		str	r2, [r3, #4]
 5548 0054 BB69     		ldr	r3, [r7, #24]
 5549 0056 5A68     		ldr	r2, [r3, #4]
 5550 0058 BB69     		ldr	r3, [r7, #24]
 5551 005a 0833     		adds	r3, r3, #8
 5552 005c 9A42     		cmp	r2, r3
 5553 005e 04D1     		bne	.L347
 5554              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5555 0060 BB69     		ldr	r3, [r7, #24]
 5556 0062 5B68     		ldr	r3, [r3, #4]
 5557 0064 5A68     		ldr	r2, [r3, #4]
 5558 0066 BB69     		ldr	r3, [r7, #24]
 5559 0068 5A60     		str	r2, [r3, #4]
 5560              	.L347:
 5561              		.loc 1 3781 5 discriminator 3
 5562 006a BB69     		ldr	r3, [r7, #24]
 5563 006c 5B68     		ldr	r3, [r3, #4]
 5564 006e DB68     		ldr	r3, [r3, #12]
 5565 0070 7B61     		str	r3, [r7, #20]
 5566              	.LBE205:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5567              		.loc 1 3782 67 is_stmt 1 discriminator 3
 5568 0072 7A6A     		ldr	r2, [r7, #36]
 5569 0074 1346     		mov	r3, r2
 5570 0076 DB00     		lsls	r3, r3, #3
 5571 0078 1344     		add	r3, r3, r2
 5572 007a 9B00     		lsls	r3, r3, #2
 5573 007c 1A46     		mov	r2, r3
 5574              		.loc 1 3782 5 discriminator 3
 5575 007e FB68     		ldr	r3, [r7, #12]
 5576 0080 9918     		adds	r1, r3, r2
 5577 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5578 0084 0122     		movs	r2, #1
 5579 0086 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 169


 5580 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5581              		.loc 1 3783 11 discriminator 3
 5582 008c 7B6A     		ldr	r3, [r7, #36]
 5583 008e 0133     		adds	r3, r3, #1
 5584 0090 7B62     		str	r3, [r7, #36]
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5585              		.loc 1 3784 23 discriminator 3
 5586 0092 7A69     		ldr	r2, [r7, #20]
 5587 0094 FB69     		ldr	r3, [r7, #28]
 5588 0096 9A42     		cmp	r2, r3
 5589 0098 D5D1     		bne	.L348
 5590              	.L345:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5591              		.loc 1 3791 10
 5592 009a 7B6A     		ldr	r3, [r7, #36]
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5593              		.loc 1 3792 2
 5594 009c 1846     		mov	r0, r3
 5595 009e 2837     		adds	r7, r7, #40
 5596              	.LCFI215:
 5597              		.cfi_def_cfa_offset 8
 5598 00a0 BD46     		mov	sp, r7
 5599              	.LCFI216:
 5600              		.cfi_def_cfa_register 13
 5601              		@ sp needed
 5602 00a2 80BD     		pop	{r7, pc}
 5603              		.cfi_endproc
 5604              	.LFE46:
 5606              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5607              		.align	1
 5608              		.syntax unified
 5609              		.thumb
 5610              		.thumb_func
 5612              	prvTaskCheckFreeStackSpace:
 5613              	.LFB47:
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5614              		.loc 1 3800 2
 5615              		.cfi_startproc
 5616              		@ args = 0, pretend = 0, frame = 16
 5617              		@ frame_needed = 1, uses_anonymous_args = 0
 5618              		@ link register save eliminated.
 5619 0000 80B4     		push	{r7}
 5620              	.LCFI217:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 170


 5621              		.cfi_def_cfa_offset 4
 5622              		.cfi_offset 7, -4
 5623 0002 85B0     		sub	sp, sp, #20
 5624              	.LCFI218:
 5625              		.cfi_def_cfa_offset 24
 5626 0004 00AF     		add	r7, sp, #0
 5627              	.LCFI219:
 5628              		.cfi_def_cfa_register 7
 5629 0006 7860     		str	r0, [r7, #4]
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5630              		.loc 1 3801 11
 5631 0008 0023     		movs	r3, #0
 5632 000a FB60     		str	r3, [r7, #12]
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5633              		.loc 1 3803 8
 5634 000c 05E0     		b	.L351
 5635              	.L352:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5636              		.loc 1 3805 17
 5637 000e 7B68     		ldr	r3, [r7, #4]
 5638 0010 0133     		adds	r3, r3, #1
 5639 0012 7B60     		str	r3, [r7, #4]
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5640              		.loc 1 3806 11
 5641 0014 FB68     		ldr	r3, [r7, #12]
 5642 0016 0133     		adds	r3, r3, #1
 5643 0018 FB60     		str	r3, [r7, #12]
 5644              	.L351:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5645              		.loc 1 3803 10
 5646 001a 7B68     		ldr	r3, [r7, #4]
 5647 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5648              		.loc 1 3803 24
 5649 001e A52B     		cmp	r3, #165
 5650 0020 F5D0     		beq	.L352
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5651              		.loc 1 3809 11
 5652 0022 FB68     		ldr	r3, [r7, #12]
 5653 0024 9B08     		lsrs	r3, r3, #2
 5654 0026 FB60     		str	r3, [r7, #12]
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5655              		.loc 1 3811 10
 5656 0028 FB68     		ldr	r3, [r7, #12]
 5657 002a 9BB2     		uxth	r3, r3
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5658              		.loc 1 3812 2
 5659 002c 1846     		mov	r0, r3
 5660 002e 1437     		adds	r7, r7, #20
 5661              	.LCFI220:
 5662              		.cfi_def_cfa_offset 4
 5663 0030 BD46     		mov	sp, r7
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 171


 5664              	.LCFI221:
 5665              		.cfi_def_cfa_register 13
 5666              		@ sp needed
 5667 0032 5DF8047B 		ldr	r7, [sp], #4
 5668              	.LCFI222:
 5669              		.cfi_restore 7
 5670              		.cfi_def_cfa_offset 0
 5671 0036 7047     		bx	lr
 5672              		.cfi_endproc
 5673              	.LFE47:
 5675              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5676              		.align	1
 5677              		.global	uxTaskGetStackHighWaterMark
 5678              		.syntax unified
 5679              		.thumb
 5680              		.thumb_func
 5682              	uxTaskGetStackHighWaterMark:
 5683              	.LFB48:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 172


3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5684              		.loc 1 3860 2
 5685              		.cfi_startproc
 5686              		@ args = 0, pretend = 0, frame = 24
 5687              		@ frame_needed = 1, uses_anonymous_args = 0
 5688 0000 80B5     		push	{r7, lr}
 5689              	.LCFI223:
 5690              		.cfi_def_cfa_offset 8
 5691              		.cfi_offset 7, -8
 5692              		.cfi_offset 14, -4
 5693 0002 86B0     		sub	sp, sp, #24
 5694              	.LCFI224:
 5695              		.cfi_def_cfa_offset 32
 5696 0004 00AF     		add	r7, sp, #0
 5697              	.LCFI225:
 5698              		.cfi_def_cfa_register 7
 5699 0006 7860     		str	r0, [r7, #4]
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5700              		.loc 1 3865 11
 5701 0008 7B68     		ldr	r3, [r7, #4]
 5702 000a 002B     		cmp	r3, #0
 5703 000c 02D1     		bne	.L355
 5704              		.loc 1 3865 11 is_stmt 0 discriminator 1
 5705 000e 094B     		ldr	r3, .L358
 5706 0010 1B68     		ldr	r3, [r3]
 5707 0012 00E0     		b	.L356
 5708              	.L355:
 5709              		.loc 1 3865 11 discriminator 2
 5710 0014 7B68     		ldr	r3, [r7, #4]
 5711              	.L356:
 5712              		.loc 1 3865 9 is_stmt 1 discriminator 4
 5713 0016 7B61     		str	r3, [r7, #20]
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5714              		.loc 1 3869 18 discriminator 4
 5715 0018 7B69     		ldr	r3, [r7, #20]
 5716 001a 1B6B     		ldr	r3, [r3, #48]
 5717 001c 3B61     		str	r3, [r7, #16]
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 173


3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5718              		.loc 1 3877 30 discriminator 4
 5719 001e 3869     		ldr	r0, [r7, #16]
 5720 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5721 0024 0346     		mov	r3, r0
 5722              		.loc 1 3877 12 discriminator 4
 5723 0026 FB60     		str	r3, [r7, #12]
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5724              		.loc 1 3879 10 discriminator 4
 5725 0028 FB68     		ldr	r3, [r7, #12]
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5726              		.loc 1 3880 2 discriminator 4
 5727 002a 1846     		mov	r0, r3
 5728 002c 1837     		adds	r7, r7, #24
 5729              	.LCFI226:
 5730              		.cfi_def_cfa_offset 8
 5731 002e BD46     		mov	sp, r7
 5732              	.LCFI227:
 5733              		.cfi_def_cfa_register 13
 5734              		@ sp needed
 5735 0030 80BD     		pop	{r7, pc}
 5736              	.L359:
 5737 0032 00BF     		.align	2
 5738              	.L358:
 5739 0034 00000000 		.word	pxCurrentTCB
 5740              		.cfi_endproc
 5741              	.LFE48:
 5743              		.section	.text.prvDeleteTCB,"ax",%progbits
 5744              		.align	1
 5745              		.syntax unified
 5746              		.thumb
 5747              		.thumb_func
 5749              	prvDeleteTCB:
 5750              	.LFB49:
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5751              		.loc 1 3888 2
 5752              		.cfi_startproc
 5753              		@ args = 0, pretend = 0, frame = 16
 5754              		@ frame_needed = 1, uses_anonymous_args = 0
 5755 0000 80B5     		push	{r7, lr}
 5756              	.LCFI228:
 5757              		.cfi_def_cfa_offset 8
 5758              		.cfi_offset 7, -8
 5759              		.cfi_offset 14, -4
 5760 0002 84B0     		sub	sp, sp, #16
 5761              	.LCFI229:
 5762              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 174


 5763 0004 00AF     		add	r7, sp, #0
 5764              	.LCFI230:
 5765              		.cfi_def_cfa_register 7
 5766 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 5767              		.loc 1 3916 13
 5768 0008 7B68     		ldr	r3, [r7, #4]
 5769 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5770              		.loc 1 3916 6
 5771 000e 002B     		cmp	r3, #0
 5772 0010 08D1     		bne	.L361
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 5773              		.loc 1 3920 21
 5774 0012 7B68     		ldr	r3, [r7, #4]
 5775 0014 1B6B     		ldr	r3, [r3, #48]
 5776              		.loc 1 3920 5
 5777 0016 1846     		mov	r0, r3
 5778 0018 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 5779              		.loc 1 3921 5
 5780 001c 7868     		ldr	r0, [r7, #4]
 5781 001e FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 175


3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5782              		.loc 1 3938 2
 5783 0022 18E0     		b	.L365
 5784              	.L361:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5785              		.loc 1 3923 18
 5786 0024 7B68     		ldr	r3, [r7, #4]
 5787 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5788              		.loc 1 3923 11
 5789 002a 012B     		cmp	r3, #1
 5790 002c 03D1     		bne	.L363
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5791              		.loc 1 3927 5
 5792 002e 7868     		ldr	r0, [r7, #4]
 5793 0030 FFF7FEFF 		bl	vPortFree
 5794              		.loc 1 3938 2
 5795 0034 0FE0     		b	.L365
 5796              	.L363:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5797              		.loc 1 3933 5
 5798 0036 7B68     		ldr	r3, [r7, #4]
 5799 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5800 003c 022B     		cmp	r3, #2
 5801 003e 0AD0     		beq	.L365
 5802              	.LBB206:
 5803              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5804              		.loc 2 195 2
 5805              		.syntax unified
 5806              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5807 0040 4FF05003 			mov r3, #80												
 5808 0044 83F31188 		msr basepri, r3											
 5809 0048 BFF36F8F 		isb														
 5810 004c BFF34F8F 		dsb														
 5811              	
 5812              	@ 0 "" 2
 5813              		.thumb
 5814              		.syntax unified
 5815 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5816              		.loc 2 203 1
 5817 0052 00BF     		nop
 5818              	.L364:
 5819              	.LBE207:
 5820              	.LBE206:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 176


3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5821              		.loc 1 3933 5 discriminator 1
 5822 0054 FEE7     		b	.L364
 5823              	.L365:
 5824              		.loc 1 3938 2
 5825 0056 00BF     		nop
 5826 0058 1037     		adds	r7, r7, #16
 5827              	.LCFI231:
 5828              		.cfi_def_cfa_offset 8
 5829 005a BD46     		mov	sp, r7
 5830              	.LCFI232:
 5831              		.cfi_def_cfa_register 13
 5832              		@ sp needed
 5833 005c 80BD     		pop	{r7, pc}
 5834              		.cfi_endproc
 5835              	.LFE49:
 5837              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5838              		.align	1
 5839              		.syntax unified
 5840              		.thumb
 5841              		.thumb_func
 5843              	prvResetNextTaskUnblockTime:
 5844              	.LFB50:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5845              		.loc 1 3944 1
 5846              		.cfi_startproc
 5847              		@ args = 0, pretend = 0, frame = 8
 5848              		@ frame_needed = 1, uses_anonymous_args = 0
 5849              		@ link register save eliminated.
 5850 0000 80B4     		push	{r7}
 5851              	.LCFI233:
 5852              		.cfi_def_cfa_offset 4
 5853              		.cfi_offset 7, -4
 5854 0002 83B0     		sub	sp, sp, #12
 5855              	.LCFI234:
 5856              		.cfi_def_cfa_offset 16
 5857 0004 00AF     		add	r7, sp, #0
 5858              	.LCFI235:
 5859              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5860              		.loc 1 3947 6
 5861 0006 0C4B     		ldr	r3, .L370
 5862 0008 1B68     		ldr	r3, [r3]
 5863 000a 1B68     		ldr	r3, [r3]
 5864              		.loc 1 3947 4
 5865 000c 002B     		cmp	r3, #0
 5866 000e 04D1     		bne	.L367
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 177


3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5867              		.loc 1 3953 24
 5868 0010 0A4B     		ldr	r3, .L370+4
 5869 0012 4FF0FF32 		mov	r2, #-1
 5870 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5871              		.loc 1 3964 1
 5872 0018 08E0     		b	.L369
 5873              	.L367:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5874              		.loc 1 3961 15
 5875 001a 074B     		ldr	r3, .L370
 5876 001c 1B68     		ldr	r3, [r3]
 5877 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5878              		.loc 1 3961 13
 5879 0020 DB68     		ldr	r3, [r3, #12]
 5880 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5881              		.loc 1 3962 26
 5882 0024 7B68     		ldr	r3, [r7, #4]
 5883 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5884              		.loc 1 3962 24
 5885 0028 044A     		ldr	r2, .L370+4
 5886 002a 1360     		str	r3, [r2]
 5887              	.L369:
 5888              		.loc 1 3964 1
 5889 002c 00BF     		nop
 5890 002e 0C37     		adds	r7, r7, #12
 5891              	.LCFI236:
 5892              		.cfi_def_cfa_offset 4
 5893 0030 BD46     		mov	sp, r7
 5894              	.LCFI237:
 5895              		.cfi_def_cfa_register 13
 5896              		@ sp needed
 5897 0032 5DF8047B 		ldr	r7, [sp], #4
 5898              	.LCFI238:
 5899              		.cfi_restore 7
 5900              		.cfi_def_cfa_offset 0
 5901 0036 7047     		bx	lr
 5902              	.L371:
 5903              		.align	2
 5904              	.L370:
 5905 0038 00000000 		.word	pxDelayedTaskList
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 178


 5906 003c 00000000 		.word	xNextTaskUnblockTime
 5907              		.cfi_endproc
 5908              	.LFE50:
 5910              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5911              		.align	1
 5912              		.global	xTaskGetCurrentTaskHandle
 5913              		.syntax unified
 5914              		.thumb
 5915              		.thumb_func
 5917              	xTaskGetCurrentTaskHandle:
 5918              	.LFB51:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5919              		.loc 1 3970 2
 5920              		.cfi_startproc
 5921              		@ args = 0, pretend = 0, frame = 8
 5922              		@ frame_needed = 1, uses_anonymous_args = 0
 5923              		@ link register save eliminated.
 5924 0000 80B4     		push	{r7}
 5925              	.LCFI239:
 5926              		.cfi_def_cfa_offset 4
 5927              		.cfi_offset 7, -4
 5928 0002 83B0     		sub	sp, sp, #12
 5929              	.LCFI240:
 5930              		.cfi_def_cfa_offset 16
 5931 0004 00AF     		add	r7, sp, #0
 5932              	.LCFI241:
 5933              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5934              		.loc 1 3976 11
 5935 0006 054B     		ldr	r3, .L374
 5936 0008 1B68     		ldr	r3, [r3]
 5937 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5938              		.loc 1 3978 10
 5939 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5940              		.loc 1 3979 2
 5941 000e 1846     		mov	r0, r3
 5942 0010 0C37     		adds	r7, r7, #12
 5943              	.LCFI242:
 5944              		.cfi_def_cfa_offset 4
 5945 0012 BD46     		mov	sp, r7
 5946              	.LCFI243:
 5947              		.cfi_def_cfa_register 13
 5948              		@ sp needed
 5949 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 179


 5950              	.LCFI244:
 5951              		.cfi_restore 7
 5952              		.cfi_def_cfa_offset 0
 5953 0018 7047     		bx	lr
 5954              	.L375:
 5955 001a 00BF     		.align	2
 5956              	.L374:
 5957 001c 00000000 		.word	pxCurrentTCB
 5958              		.cfi_endproc
 5959              	.LFE51:
 5961              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5962              		.align	1
 5963              		.global	xTaskGetSchedulerState
 5964              		.syntax unified
 5965              		.thumb
 5966              		.thumb_func
 5968              	xTaskGetSchedulerState:
 5969              	.LFB52:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5970              		.loc 1 3987 2
 5971              		.cfi_startproc
 5972              		@ args = 0, pretend = 0, frame = 8
 5973              		@ frame_needed = 1, uses_anonymous_args = 0
 5974              		@ link register save eliminated.
 5975 0000 80B4     		push	{r7}
 5976              	.LCFI245:
 5977              		.cfi_def_cfa_offset 4
 5978              		.cfi_offset 7, -4
 5979 0002 83B0     		sub	sp, sp, #12
 5980              	.LCFI246:
 5981              		.cfi_def_cfa_offset 16
 5982 0004 00AF     		add	r7, sp, #0
 5983              	.LCFI247:
 5984              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5985              		.loc 1 3990 25
 5986 0006 0B4B     		ldr	r3, .L381
 5987 0008 1B68     		ldr	r3, [r3]
 5988              		.loc 1 3990 5
 5989 000a 002B     		cmp	r3, #0
 5990 000c 02D1     		bne	.L377
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5991              		.loc 1 3992 12
 5992 000e 0123     		movs	r3, #1
 5993 0010 7B60     		str	r3, [r7, #4]
 5994 0012 08E0     		b	.L378
 5995              	.L377:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 180


3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5996              		.loc 1 3996 29
 5997 0014 084B     		ldr	r3, .L381+4
 5998 0016 1B68     		ldr	r3, [r3]
 5999              		.loc 1 3996 6
 6000 0018 002B     		cmp	r3, #0
 6001 001a 02D1     		bne	.L379
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6002              		.loc 1 3998 13
 6003 001c 0223     		movs	r3, #2
 6004 001e 7B60     		str	r3, [r7, #4]
 6005 0020 01E0     		b	.L378
 6006              	.L379:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6007              		.loc 1 4002 13
 6008 0022 0023     		movs	r3, #0
 6009 0024 7B60     		str	r3, [r7, #4]
 6010              	.L378:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6011              		.loc 1 4006 10
 6012 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6013              		.loc 1 4007 2
 6014 0028 1846     		mov	r0, r3
 6015 002a 0C37     		adds	r7, r7, #12
 6016              	.LCFI248:
 6017              		.cfi_def_cfa_offset 4
 6018 002c BD46     		mov	sp, r7
 6019              	.LCFI249:
 6020              		.cfi_def_cfa_register 13
 6021              		@ sp needed
 6022 002e 5DF8047B 		ldr	r7, [sp], #4
 6023              	.LCFI250:
 6024              		.cfi_restore 7
 6025              		.cfi_def_cfa_offset 0
 6026 0032 7047     		bx	lr
 6027              	.L382:
 6028              		.align	2
 6029              	.L381:
 6030 0034 00000000 		.word	xSchedulerRunning
 6031 0038 00000000 		.word	uxSchedulerSuspended
 6032              		.cfi_endproc
 6033              	.LFE52:
 6035              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6036              		.align	1
 6037              		.global	xTaskPriorityInherit
 6038              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 181


 6039              		.thumb
 6040              		.thumb_func
 6042              	xTaskPriorityInherit:
 6043              	.LFB53:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6044              		.loc 1 4015 2
 6045              		.cfi_startproc
 6046              		@ args = 0, pretend = 0, frame = 16
 6047              		@ frame_needed = 1, uses_anonymous_args = 0
 6048 0000 80B5     		push	{r7, lr}
 6049              	.LCFI251:
 6050              		.cfi_def_cfa_offset 8
 6051              		.cfi_offset 7, -8
 6052              		.cfi_offset 14, -4
 6053 0002 84B0     		sub	sp, sp, #16
 6054              	.LCFI252:
 6055              		.cfi_def_cfa_offset 24
 6056 0004 00AF     		add	r7, sp, #0
 6057              	.LCFI253:
 6058              		.cfi_def_cfa_register 7
 6059 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6060              		.loc 1 4016 16
 6061 0008 7B68     		ldr	r3, [r7, #4]
 6062 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6063              		.loc 1 4017 13
 6064 000c 0023     		movs	r3, #0
 6065 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6066              		.loc 1 4022 5
 6067 0010 7B68     		ldr	r3, [r7, #4]
 6068 0012 002B     		cmp	r3, #0
 6069 0014 51D0     		beq	.L384
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6070              		.loc 1 4027 24
 6071 0016 BB68     		ldr	r3, [r7, #8]
 6072 0018 DA6A     		ldr	r2, [r3, #44]
 6073              		.loc 1 4027 51
 6074 001a 2A4B     		ldr	r3, .L391
 6075 001c 1B68     		ldr	r3, [r3]
 6076 001e DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 182


 6077              		.loc 1 4027 6
 6078 0020 9A42     		cmp	r2, r3
 6079 0022 41D2     		bcs	.L385
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6080              		.loc 1 4032 11
 6081 0024 BB68     		ldr	r3, [r7, #8]
 6082 0026 9B69     		ldr	r3, [r3, #24]
 6083              		.loc 1 4032 7
 6084 0028 002B     		cmp	r3, #0
 6085 002a 06DB     		blt	.L386
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6086              		.loc 1 4034 6
 6087 002c 254B     		ldr	r3, .L391
 6088 002e 1B68     		ldr	r3, [r3]
 6089 0030 DB6A     		ldr	r3, [r3, #44]
 6090 0032 C3F13802 		rsb	r2, r3, #56
 6091 0036 BB68     		ldr	r3, [r7, #8]
 6092 0038 9A61     		str	r2, [r3, #24]
 6093              	.L386:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6094              		.loc 1 4043 9
 6095 003a BB68     		ldr	r3, [r7, #8]
 6096 003c 5969     		ldr	r1, [r3, #20]
 6097 003e BB68     		ldr	r3, [r7, #8]
 6098 0040 DA6A     		ldr	r2, [r3, #44]
 6099 0042 1346     		mov	r3, r2
 6100 0044 9B00     		lsls	r3, r3, #2
 6101 0046 1344     		add	r3, r3, r2
 6102 0048 9B00     		lsls	r3, r3, #2
 6103 004a 1F4A     		ldr	r2, .L391+4
 6104 004c 1344     		add	r3, r3, r2
 6105              		.loc 1 4043 7
 6106 004e 9942     		cmp	r1, r3
 6107 0050 22D1     		bne	.L387
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6108              		.loc 1 4045 10
 6109 0052 BB68     		ldr	r3, [r7, #8]
 6110 0054 0433     		adds	r3, r3, #4
 6111 0056 1846     		mov	r0, r3
 6112 0058 FFF7FEFF 		bl	uxListRemove
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 183


4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6113              		.loc 1 4058 49
 6114 005c 194B     		ldr	r3, .L391
 6115 005e 1B68     		ldr	r3, [r3]
 6116 0060 DA6A     		ldr	r2, [r3, #44]
 6117              		.loc 1 4058 35
 6118 0062 BB68     		ldr	r3, [r7, #8]
 6119 0064 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6120              		.loc 1 4059 6
 6121 0066 BB68     		ldr	r3, [r7, #8]
 6122 0068 DA6A     		ldr	r2, [r3, #44]
 6123 006a 184B     		ldr	r3, .L391+8
 6124 006c 1B68     		ldr	r3, [r3]
 6125 006e 9A42     		cmp	r2, r3
 6126 0070 03D9     		bls	.L388
 6127              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6128 0072 BB68     		ldr	r3, [r7, #8]
 6129 0074 DB6A     		ldr	r3, [r3, #44]
 6130 0076 154A     		ldr	r2, .L391+8
 6131 0078 1360     		str	r3, [r2]
 6132              	.L388:
 6133              		.loc 1 4059 6 discriminator 3
 6134 007a BB68     		ldr	r3, [r7, #8]
 6135 007c DA6A     		ldr	r2, [r3, #44]
 6136 007e 1346     		mov	r3, r2
 6137 0080 9B00     		lsls	r3, r3, #2
 6138 0082 1344     		add	r3, r3, r2
 6139 0084 9B00     		lsls	r3, r3, #2
 6140 0086 104A     		ldr	r2, .L391+4
 6141 0088 1A44     		add	r2, r2, r3
 6142 008a BB68     		ldr	r3, [r7, #8]
 6143 008c 0433     		adds	r3, r3, #4
 6144 008e 1946     		mov	r1, r3
 6145 0090 1046     		mov	r0, r2
 6146 0092 FFF7FEFF 		bl	vListInsertEnd
 6147 0096 04E0     		b	.L389
 6148              	.L387:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6149              		.loc 1 4064 49 is_stmt 1
 6150 0098 0A4B     		ldr	r3, .L391
 6151 009a 1B68     		ldr	r3, [r3]
 6152 009c DA6A     		ldr	r2, [r3, #44]
 6153              		.loc 1 4064 35
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 184


 6154 009e BB68     		ldr	r3, [r7, #8]
 6155 00a0 DA62     		str	r2, [r3, #44]
 6156              	.L389:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6157              		.loc 1 4070 13
 6158 00a2 0123     		movs	r3, #1
 6159 00a4 FB60     		str	r3, [r7, #12]
 6160 00a6 08E0     		b	.L384
 6161              	.L385:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6162              		.loc 1 4074 25
 6163 00a8 BB68     		ldr	r3, [r7, #8]
 6164 00aa DA6C     		ldr	r2, [r3, #76]
 6165              		.loc 1 4074 56
 6166 00ac 054B     		ldr	r3, .L391
 6167 00ae 1B68     		ldr	r3, [r3]
 6168 00b0 DB6A     		ldr	r3, [r3, #44]
 6169              		.loc 1 4074 7
 6170 00b2 9A42     		cmp	r2, r3
 6171 00b4 01D2     		bcs	.L384
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6172              		.loc 1 4083 14
 6173 00b6 0123     		movs	r3, #1
 6174 00b8 FB60     		str	r3, [r7, #12]
 6175              	.L384:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6176              		.loc 1 4096 10
 6177 00ba FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 185


 6178              		.loc 1 4097 2
 6179 00bc 1846     		mov	r0, r3
 6180 00be 1037     		adds	r7, r7, #16
 6181              	.LCFI254:
 6182              		.cfi_def_cfa_offset 8
 6183 00c0 BD46     		mov	sp, r7
 6184              	.LCFI255:
 6185              		.cfi_def_cfa_register 13
 6186              		@ sp needed
 6187 00c2 80BD     		pop	{r7, pc}
 6188              	.L392:
 6189              		.align	2
 6190              	.L391:
 6191 00c4 00000000 		.word	pxCurrentTCB
 6192 00c8 00000000 		.word	pxReadyTasksLists
 6193 00cc 00000000 		.word	uxTopReadyPriority
 6194              		.cfi_endproc
 6195              	.LFE53:
 6197              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6198              		.align	1
 6199              		.global	xTaskPriorityDisinherit
 6200              		.syntax unified
 6201              		.thumb
 6202              		.thumb_func
 6204              	xTaskPriorityDisinherit:
 6205              	.LFB54:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6206              		.loc 1 4105 2
 6207              		.cfi_startproc
 6208              		@ args = 0, pretend = 0, frame = 24
 6209              		@ frame_needed = 1, uses_anonymous_args = 0
 6210 0000 80B5     		push	{r7, lr}
 6211              	.LCFI256:
 6212              		.cfi_def_cfa_offset 8
 6213              		.cfi_offset 7, -8
 6214              		.cfi_offset 14, -4
 6215 0002 86B0     		sub	sp, sp, #24
 6216              	.LCFI257:
 6217              		.cfi_def_cfa_offset 32
 6218 0004 00AF     		add	r7, sp, #0
 6219              	.LCFI258:
 6220              		.cfi_def_cfa_register 7
 6221 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6222              		.loc 1 4106 16
 6223 0008 7B68     		ldr	r3, [r7, #4]
 6224 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6225              		.loc 1 4107 13
 6226 000c 0023     		movs	r3, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 186


 6227 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6228              		.loc 1 4109 5
 6229 0010 7B68     		ldr	r3, [r7, #4]
 6230 0012 002B     		cmp	r3, #0
 6231 0014 56D0     		beq	.L394
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6232              		.loc 1 4115 4
 6233 0016 2E4B     		ldr	r3, .L401
 6234 0018 1B68     		ldr	r3, [r3]
 6235 001a 3A69     		ldr	r2, [r7, #16]
 6236 001c 9A42     		cmp	r2, r3
 6237 001e 0AD0     		beq	.L395
 6238              	.LBB208:
 6239              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6240              		.loc 2 195 2
 6241              		.syntax unified
 6242              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6243 0020 4FF05003 			mov r3, #80												
 6244 0024 83F31188 		msr basepri, r3											
 6245 0028 BFF36F8F 		isb														
 6246 002c BFF34F8F 		dsb														
 6247              	
 6248              	@ 0 "" 2
 6249              		.thumb
 6250              		.syntax unified
 6251 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6252              		.loc 2 203 1
 6253 0032 00BF     		nop
 6254              	.L396:
 6255              	.LBE209:
 6256              	.LBE208:
 6257              		.loc 1 4115 4 discriminator 1
 6258 0034 FEE7     		b	.L396
 6259              	.L395:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6260              		.loc 1 4116 4
 6261 0036 3B69     		ldr	r3, [r7, #16]
 6262 0038 1B6D     		ldr	r3, [r3, #80]
 6263 003a 002B     		cmp	r3, #0
 6264 003c 0AD1     		bne	.L397
 6265              	.LBB210:
 6266              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6267              		.loc 2 195 2
 6268              		.syntax unified
 6269              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6270 003e 4FF05003 			mov r3, #80												
 6271 0042 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 187


 6272 0046 BFF36F8F 		isb														
 6273 004a BFF34F8F 		dsb														
 6274              	
 6275              	@ 0 "" 2
 6276              		.thumb
 6277              		.syntax unified
 6278 004e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6279              		.loc 2 203 1
 6280 0050 00BF     		nop
 6281              	.L398:
 6282              	.LBE211:
 6283              	.LBE210:
 6284              		.loc 1 4116 4 discriminator 2
 6285 0052 FEE7     		b	.L398
 6286              	.L397:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6287              		.loc 1 4117 11
 6288 0054 3B69     		ldr	r3, [r7, #16]
 6289 0056 1B6D     		ldr	r3, [r3, #80]
 6290              		.loc 1 4117 28
 6291 0058 5A1E     		subs	r2, r3, #1
 6292 005a 3B69     		ldr	r3, [r7, #16]
 6293 005c 1A65     		str	r2, [r3, #80]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6294              		.loc 1 4121 13
 6295 005e 3B69     		ldr	r3, [r7, #16]
 6296 0060 DA6A     		ldr	r2, [r3, #44]
 6297              		.loc 1 4121 34
 6298 0062 3B69     		ldr	r3, [r7, #16]
 6299 0064 DB6C     		ldr	r3, [r3, #76]
 6300              		.loc 1 4121 6
 6301 0066 9A42     		cmp	r2, r3
 6302 0068 2CD0     		beq	.L394
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6303              		.loc 1 4124 14
 6304 006a 3B69     		ldr	r3, [r7, #16]
 6305 006c 1B6D     		ldr	r3, [r3, #80]
 6306              		.loc 1 4124 7
 6307 006e 002B     		cmp	r3, #0
 6308 0070 28D1     		bne	.L394
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6309              		.loc 1 4131 10
 6310 0072 3B69     		ldr	r3, [r7, #16]
 6311 0074 0433     		adds	r3, r3, #4
 6312 0076 1846     		mov	r0, r3
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 188


 6313 0078 FFF7FEFF 		bl	uxListRemove
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6314              		.loc 1 4143 31
 6315 007c 3B69     		ldr	r3, [r7, #16]
 6316 007e DA6C     		ldr	r2, [r3, #76]
 6317              		.loc 1 4143 24
 6318 0080 3B69     		ldr	r3, [r7, #16]
 6319 0082 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6320              		.loc 1 4148 6
 6321 0084 3B69     		ldr	r3, [r7, #16]
 6322 0086 DB6A     		ldr	r3, [r3, #44]
 6323 0088 C3F13802 		rsb	r2, r3, #56
 6324 008c 3B69     		ldr	r3, [r7, #16]
 6325 008e 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6326              		.loc 1 4149 6
 6327 0090 3B69     		ldr	r3, [r7, #16]
 6328 0092 DA6A     		ldr	r2, [r3, #44]
 6329 0094 0F4B     		ldr	r3, .L401+4
 6330 0096 1B68     		ldr	r3, [r3]
 6331 0098 9A42     		cmp	r2, r3
 6332 009a 03D9     		bls	.L399
 6333              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6334 009c 3B69     		ldr	r3, [r7, #16]
 6335 009e DB6A     		ldr	r3, [r3, #44]
 6336 00a0 0C4A     		ldr	r2, .L401+4
 6337 00a2 1360     		str	r3, [r2]
 6338              	.L399:
 6339              		.loc 1 4149 6 discriminator 3
 6340 00a4 3B69     		ldr	r3, [r7, #16]
 6341 00a6 DA6A     		ldr	r2, [r3, #44]
 6342 00a8 1346     		mov	r3, r2
 6343 00aa 9B00     		lsls	r3, r3, #2
 6344 00ac 1344     		add	r3, r3, r2
 6345 00ae 9B00     		lsls	r3, r3, #2
 6346 00b0 094A     		ldr	r2, .L401+8
 6347 00b2 1A44     		add	r2, r2, r3
 6348 00b4 3B69     		ldr	r3, [r7, #16]
 6349 00b6 0433     		adds	r3, r3, #4
 6350 00b8 1946     		mov	r1, r3
 6351 00ba 1046     		mov	r0, r2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 189


 6352 00bc FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6353              		.loc 1 4159 14 is_stmt 1 discriminator 3
 6354 00c0 0123     		movs	r3, #1
 6355 00c2 7B61     		str	r3, [r7, #20]
 6356              	.L394:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6357              		.loc 1 4176 10
 6358 00c4 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6359              		.loc 1 4177 2
 6360 00c6 1846     		mov	r0, r3
 6361 00c8 1837     		adds	r7, r7, #24
 6362              	.LCFI259:
 6363              		.cfi_def_cfa_offset 8
 6364 00ca BD46     		mov	sp, r7
 6365              	.LCFI260:
 6366              		.cfi_def_cfa_register 13
 6367              		@ sp needed
 6368 00cc 80BD     		pop	{r7, pc}
 6369              	.L402:
 6370 00ce 00BF     		.align	2
 6371              	.L401:
 6372 00d0 00000000 		.word	pxCurrentTCB
 6373 00d4 00000000 		.word	uxTopReadyPriority
 6374 00d8 00000000 		.word	pxReadyTasksLists
 6375              		.cfi_endproc
 6376              	.LFE54:
 6378              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6379              		.align	1
 6380              		.global	vTaskPriorityDisinheritAfterTimeout
 6381              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 190


 6382              		.thumb
 6383              		.thumb_func
 6385              	vTaskPriorityDisinheritAfterTimeout:
 6386              	.LFB55:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6387              		.loc 1 4185 2
 6388              		.cfi_startproc
 6389              		@ args = 0, pretend = 0, frame = 32
 6390              		@ frame_needed = 1, uses_anonymous_args = 0
 6391 0000 80B5     		push	{r7, lr}
 6392              	.LCFI261:
 6393              		.cfi_def_cfa_offset 8
 6394              		.cfi_offset 7, -8
 6395              		.cfi_offset 14, -4
 6396 0002 88B0     		sub	sp, sp, #32
 6397              	.LCFI262:
 6398              		.cfi_def_cfa_offset 40
 6399 0004 00AF     		add	r7, sp, #0
 6400              	.LCFI263:
 6401              		.cfi_def_cfa_register 7
 6402 0006 7860     		str	r0, [r7, #4]
 6403 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6404              		.loc 1 4186 16
 6405 000a 7B68     		ldr	r3, [r7, #4]
 6406 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6407              		.loc 1 4188 20
 6408 000e 0123     		movs	r3, #1
 6409 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6410              		.loc 1 4190 5
 6411 0012 7B68     		ldr	r3, [r7, #4]
 6412 0014 002B     		cmp	r3, #0
 6413 0016 6AD0     		beq	.L413
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6414              		.loc 1 4194 4
 6415 0018 BB69     		ldr	r3, [r7, #24]
 6416 001a 1B6D     		ldr	r3, [r3, #80]
 6417 001c 002B     		cmp	r3, #0
 6418 001e 0AD1     		bne	.L405
 6419              	.LBB212:
 6420              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6421              		.loc 2 195 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 191


 6422              		.syntax unified
 6423              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6424 0020 4FF05003 			mov r3, #80												
 6425 0024 83F31188 		msr basepri, r3											
 6426 0028 BFF36F8F 		isb														
 6427 002c BFF34F8F 		dsb														
 6428              	
 6429              	@ 0 "" 2
 6430              		.thumb
 6431              		.syntax unified
 6432 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6433              		.loc 2 203 1
 6434 0032 00BF     		nop
 6435              	.L406:
 6436              	.LBE213:
 6437              	.LBE212:
 6438              		.loc 1 4194 4 discriminator 1
 6439 0034 FEE7     		b	.L406
 6440              	.L405:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6441              		.loc 1 4200 13
 6442 0036 BB69     		ldr	r3, [r7, #24]
 6443 0038 DB6C     		ldr	r3, [r3, #76]
 6444              		.loc 1 4200 6
 6445 003a 3A68     		ldr	r2, [r7]
 6446 003c 9A42     		cmp	r2, r3
 6447 003e 02D9     		bls	.L407
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6448              		.loc 1 4202 21
 6449 0040 3B68     		ldr	r3, [r7]
 6450 0042 FB61     		str	r3, [r7, #28]
 6451 0044 02E0     		b	.L408
 6452              	.L407:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6453              		.loc 1 4206 21
 6454 0046 BB69     		ldr	r3, [r7, #24]
 6455 0048 DB6C     		ldr	r3, [r3, #76]
 6456 004a FB61     		str	r3, [r7, #28]
 6457              	.L408:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6458              		.loc 1 4210 13
 6459 004c BB69     		ldr	r3, [r7, #24]
 6460 004e DB6A     		ldr	r3, [r3, #44]
 6461              		.loc 1 4210 6
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 192


 6462 0050 FA69     		ldr	r2, [r7, #28]
 6463 0052 9A42     		cmp	r2, r3
 6464 0054 4BD0     		beq	.L413
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6465              		.loc 1 4216 14
 6466 0056 BB69     		ldr	r3, [r7, #24]
 6467 0058 1B6D     		ldr	r3, [r3, #80]
 6468              		.loc 1 4216 7
 6469 005a 7A69     		ldr	r2, [r7, #20]
 6470 005c 9A42     		cmp	r2, r3
 6471 005e 46D1     		bne	.L413
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6472              		.loc 1 4221 6
 6473 0060 254B     		ldr	r3, .L414
 6474 0062 1B68     		ldr	r3, [r3]
 6475 0064 BA69     		ldr	r2, [r7, #24]
 6476 0066 9A42     		cmp	r2, r3
 6477 0068 0AD1     		bne	.L409
 6478              	.LBB214:
 6479              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6480              		.loc 2 195 2
 6481              		.syntax unified
 6482              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6483 006a 4FF05003 			mov r3, #80												
 6484 006e 83F31188 		msr basepri, r3											
 6485 0072 BFF36F8F 		isb														
 6486 0076 BFF34F8F 		dsb														
 6487              	
 6488              	@ 0 "" 2
 6489              		.thumb
 6490              		.syntax unified
 6491 007a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6492              		.loc 2 203 1
 6493 007c 00BF     		nop
 6494              	.L410:
 6495              	.LBE215:
 6496              	.LBE214:
 6497              		.loc 1 4221 6 discriminator 2
 6498 007e FEE7     		b	.L410
 6499              	.L409:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 193


 6500              		.loc 1 4227 28
 6501 0080 BB69     		ldr	r3, [r7, #24]
 6502 0082 DB6A     		ldr	r3, [r3, #44]
 6503 0084 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6504              		.loc 1 4228 24
 6505 0086 BB69     		ldr	r3, [r7, #24]
 6506 0088 FA69     		ldr	r2, [r7, #28]
 6507 008a DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6508              		.loc 1 4232 12
 6509 008c BB69     		ldr	r3, [r7, #24]
 6510 008e 9B69     		ldr	r3, [r3, #24]
 6511              		.loc 1 4232 8
 6512 0090 002B     		cmp	r3, #0
 6513 0092 04DB     		blt	.L411
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6514              		.loc 1 4234 7
 6515 0094 FB69     		ldr	r3, [r7, #28]
 6516 0096 C3F13802 		rsb	r2, r3, #56
 6517 009a BB69     		ldr	r3, [r7, #24]
 6518 009c 9A61     		str	r2, [r3, #24]
 6519              	.L411:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6520              		.loc 1 4247 10
 6521 009e BB69     		ldr	r3, [r7, #24]
 6522 00a0 5969     		ldr	r1, [r3, #20]
 6523 00a2 3A69     		ldr	r2, [r7, #16]
 6524 00a4 1346     		mov	r3, r2
 6525 00a6 9B00     		lsls	r3, r3, #2
 6526 00a8 1344     		add	r3, r3, r2
 6527 00aa 9B00     		lsls	r3, r3, #2
 6528 00ac 134A     		ldr	r2, .L414+4
 6529 00ae 1344     		add	r3, r3, r2
 6530              		.loc 1 4247 8
 6531 00b0 9942     		cmp	r1, r3
 6532 00b2 1CD1     		bne	.L413
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6533              		.loc 1 4249 11
 6534 00b4 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 194


 6535 00b6 0433     		adds	r3, r3, #4
 6536 00b8 1846     		mov	r0, r3
 6537 00ba FFF7FEFF 		bl	uxListRemove
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6538              		.loc 1 4261 7
 6539 00be BB69     		ldr	r3, [r7, #24]
 6540 00c0 DA6A     		ldr	r2, [r3, #44]
 6541 00c2 0F4B     		ldr	r3, .L414+8
 6542 00c4 1B68     		ldr	r3, [r3]
 6543 00c6 9A42     		cmp	r2, r3
 6544 00c8 03D9     		bls	.L412
 6545              		.loc 1 4261 7 is_stmt 0 discriminator 1
 6546 00ca BB69     		ldr	r3, [r7, #24]
 6547 00cc DB6A     		ldr	r3, [r3, #44]
 6548 00ce 0C4A     		ldr	r2, .L414+8
 6549 00d0 1360     		str	r3, [r2]
 6550              	.L412:
 6551              		.loc 1 4261 7 discriminator 3
 6552 00d2 BB69     		ldr	r3, [r7, #24]
 6553 00d4 DA6A     		ldr	r2, [r3, #44]
 6554 00d6 1346     		mov	r3, r2
 6555 00d8 9B00     		lsls	r3, r3, #2
 6556 00da 1344     		add	r3, r3, r2
 6557 00dc 9B00     		lsls	r3, r3, #2
 6558 00de 074A     		ldr	r2, .L414+4
 6559 00e0 1A44     		add	r2, r2, r3
 6560 00e2 BB69     		ldr	r3, [r7, #24]
 6561 00e4 0433     		adds	r3, r3, #4
 6562 00e6 1946     		mov	r1, r3
 6563 00e8 1046     		mov	r0, r2
 6564 00ea FFF7FEFF 		bl	vListInsertEnd
 6565              	.L413:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 195


4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6566              		.loc 1 4282 2 is_stmt 1
 6567 00ee 00BF     		nop
 6568 00f0 2037     		adds	r7, r7, #32
 6569              	.LCFI264:
 6570              		.cfi_def_cfa_offset 8
 6571 00f2 BD46     		mov	sp, r7
 6572              	.LCFI265:
 6573              		.cfi_def_cfa_register 13
 6574              		@ sp needed
 6575 00f4 80BD     		pop	{r7, pc}
 6576              	.L415:
 6577 00f6 00BF     		.align	2
 6578              	.L414:
 6579 00f8 00000000 		.word	pxCurrentTCB
 6580 00fc 00000000 		.word	pxReadyTasksLists
 6581 0100 00000000 		.word	uxTopReadyPriority
 6582              		.cfi_endproc
 6583              	.LFE55:
 6585              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6586              		.align	1
 6587              		.global	uxTaskResetEventItemValue
 6588              		.syntax unified
 6589              		.thumb
 6590              		.thumb_func
 6592              	uxTaskResetEventItemValue:
 6593              	.LFB56:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 196


4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 197


4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 198


4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 199


4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 200


4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 201


4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6594              		.loc 1 4603 1
 6595              		.cfi_startproc
 6596              		@ args = 0, pretend = 0, frame = 8
 6597              		@ frame_needed = 1, uses_anonymous_args = 0
 6598              		@ link register save eliminated.
 6599 0000 80B4     		push	{r7}
 6600              	.LCFI266:
 6601              		.cfi_def_cfa_offset 4
 6602              		.cfi_offset 7, -4
 6603 0002 83B0     		sub	sp, sp, #12
 6604              	.LCFI267:
 6605              		.cfi_def_cfa_offset 16
 6606 0004 00AF     		add	r7, sp, #0
 6607              	.LCFI268:
 6608              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6609              		.loc 1 4606 13
 6610 0006 094B     		ldr	r3, .L418
 6611 0008 1B68     		ldr	r3, [r3]
 6612              		.loc 1 4606 11
 6613 000a 9B69     		ldr	r3, [r3, #24]
 6614 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6615              		.loc 1 4610 2
 6616 000e 074B     		ldr	r3, .L418
 6617 0010 1B68     		ldr	r3, [r3]
 6618 0012 DA6A     		ldr	r2, [r3, #44]
 6619 0014 054B     		ldr	r3, .L418
 6620 0016 1B68     		ldr	r3, [r3]
 6621 0018 C2F13802 		rsb	r2, r2, #56
 6622 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6623              		.loc 1 4612 9
 6624 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6625              		.loc 1 4613 1
 6626 0020 1846     		mov	r0, r3
 6627 0022 0C37     		adds	r7, r7, #12
 6628              	.LCFI269:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 202


 6629              		.cfi_def_cfa_offset 4
 6630 0024 BD46     		mov	sp, r7
 6631              	.LCFI270:
 6632              		.cfi_def_cfa_register 13
 6633              		@ sp needed
 6634 0026 5DF8047B 		ldr	r7, [sp], #4
 6635              	.LCFI271:
 6636              		.cfi_restore 7
 6637              		.cfi_def_cfa_offset 0
 6638 002a 7047     		bx	lr
 6639              	.L419:
 6640              		.align	2
 6641              	.L418:
 6642 002c 00000000 		.word	pxCurrentTCB
 6643              		.cfi_endproc
 6644              	.LFE56:
 6646              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6647              		.align	1
 6648              		.global	pvTaskIncrementMutexHeldCount
 6649              		.syntax unified
 6650              		.thumb
 6651              		.thumb_func
 6653              	pvTaskIncrementMutexHeldCount:
 6654              	.LFB57:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6655              		.loc 1 4619 2
 6656              		.cfi_startproc
 6657              		@ args = 0, pretend = 0, frame = 0
 6658              		@ frame_needed = 1, uses_anonymous_args = 0
 6659              		@ link register save eliminated.
 6660 0000 80B4     		push	{r7}
 6661              	.LCFI272:
 6662              		.cfi_def_cfa_offset 4
 6663              		.cfi_offset 7, -4
 6664 0002 00AF     		add	r7, sp, #0
 6665              	.LCFI273:
 6666              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6667              		.loc 1 4622 20
 6668 0004 074B     		ldr	r3, .L423
 6669 0006 1B68     		ldr	r3, [r3]
 6670              		.loc 1 4622 5
 6671 0008 002B     		cmp	r3, #0
 6672 000a 04D0     		beq	.L421
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6673              		.loc 1 4624 18
 6674 000c 054B     		ldr	r3, .L423
 6675 000e 1B68     		ldr	r3, [r3]
 6676 0010 1A6D     		ldr	r2, [r3, #80]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 203


 6677              		.loc 1 4624 35
 6678 0012 0132     		adds	r2, r2, #1
 6679 0014 1A65     		str	r2, [r3, #80]
 6680              	.L421:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6681              		.loc 1 4627 10
 6682 0016 034B     		ldr	r3, .L423
 6683 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6684              		.loc 1 4628 2
 6685 001a 1846     		mov	r0, r3
 6686 001c BD46     		mov	sp, r7
 6687              	.LCFI274:
 6688              		.cfi_def_cfa_register 13
 6689              		@ sp needed
 6690 001e 5DF8047B 		ldr	r7, [sp], #4
 6691              	.LCFI275:
 6692              		.cfi_restore 7
 6693              		.cfi_def_cfa_offset 0
 6694 0022 7047     		bx	lr
 6695              	.L424:
 6696              		.align	2
 6697              	.L423:
 6698 0024 00000000 		.word	pxCurrentTCB
 6699              		.cfi_endproc
 6700              	.LFE57:
 6702              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6703              		.align	1
 6704              		.global	ulTaskNotifyTake
 6705              		.syntax unified
 6706              		.thumb
 6707              		.thumb_func
 6709              	ulTaskNotifyTake:
 6710              	.LFB58:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6711              		.loc 1 4636 2
 6712              		.cfi_startproc
 6713              		@ args = 0, pretend = 0, frame = 16
 6714              		@ frame_needed = 1, uses_anonymous_args = 0
 6715 0000 80B5     		push	{r7, lr}
 6716              	.LCFI276:
 6717              		.cfi_def_cfa_offset 8
 6718              		.cfi_offset 7, -8
 6719              		.cfi_offset 14, -4
 6720 0002 84B0     		sub	sp, sp, #16
 6721              	.LCFI277:
 6722              		.cfi_def_cfa_offset 24
 6723 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 204


 6724              	.LCFI278:
 6725              		.cfi_def_cfa_register 7
 6726 0006 7860     		str	r0, [r7, #4]
 6727 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6728              		.loc 1 4639 3
 6729 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6730              		.loc 1 4642 20
 6731 000e 1E4B     		ldr	r3, .L430
 6732 0010 1B68     		ldr	r3, [r3]
 6733 0012 5B6D     		ldr	r3, [r3, #84]
 6734              		.loc 1 4642 6
 6735 0014 002B     		cmp	r3, #0
 6736 0016 13D1     		bne	.L426
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6737              		.loc 1 4645 17
 6738 0018 1B4B     		ldr	r3, .L430
 6739 001a 1B68     		ldr	r3, [r3]
 6740              		.loc 1 4645 33
 6741 001c 0122     		movs	r2, #1
 6742 001e 83F85820 		strb	r2, [r3, #88]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6743              		.loc 1 4647 7
 6744 0022 3B68     		ldr	r3, [r7]
 6745 0024 002B     		cmp	r3, #0
 6746 0026 0BD0     		beq	.L426
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6747              		.loc 1 4649 6
 6748 0028 0121     		movs	r1, #1
 6749 002a 3868     		ldr	r0, [r7]
 6750 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6751              		.loc 1 4656 6
 6752 0030 164B     		ldr	r3, .L430+4
 6753 0032 4FF08052 		mov	r2, #268435456
 6754 0036 1A60     		str	r2, [r3]
 6755              		.syntax unified
 6756              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6757 0038 BFF34F8F 		dsb
 6758              	@ 0 "" 2
 6759              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6760 003c BFF36F8F 		isb
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 205


 6761              	@ 0 "" 2
 6762              		.thumb
 6763              		.syntax unified
 6764              	.L426:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6765              		.loc 1 4668 3
 6766 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6767              		.loc 1 4670 3
 6768 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6769              		.loc 1 4673 27
 6770 0048 0F4B     		ldr	r3, .L430
 6771 004a 1B68     		ldr	r3, [r3]
 6772              		.loc 1 4673 13
 6773 004c 5B6D     		ldr	r3, [r3, #84]
 6774 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6775              		.loc 1 4675 6
 6776 0050 FB68     		ldr	r3, [r7, #12]
 6777 0052 002B     		cmp	r3, #0
 6778 0054 0CD0     		beq	.L427
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6779              		.loc 1 4677 7
 6780 0056 7B68     		ldr	r3, [r7, #4]
 6781 0058 002B     		cmp	r3, #0
 6782 005a 04D0     		beq	.L428
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6783              		.loc 1 4679 18
 6784 005c 0A4B     		ldr	r3, .L430
 6785 005e 1B68     		ldr	r3, [r3]
 6786              		.loc 1 4679 36
 6787 0060 0022     		movs	r2, #0
 6788 0062 5A65     		str	r2, [r3, #84]
 6789 0064 04E0     		b	.L427
 6790              	.L428:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 206


 6791              		.loc 1 4683 18
 6792 0066 084B     		ldr	r3, .L430
 6793 0068 1B68     		ldr	r3, [r3]
 6794              		.loc 1 4683 47
 6795 006a FA68     		ldr	r2, [r7, #12]
 6796 006c 013A     		subs	r2, r2, #1
 6797              		.loc 1 4683 36
 6798 006e 5A65     		str	r2, [r3, #84]
 6799              	.L427:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6800              		.loc 1 4691 16
 6801 0070 054B     		ldr	r3, .L430
 6802 0072 1B68     		ldr	r3, [r3]
 6803              		.loc 1 4691 32
 6804 0074 0022     		movs	r2, #0
 6805 0076 83F85820 		strb	r2, [r3, #88]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6806              		.loc 1 4693 3
 6807 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6808              		.loc 1 4695 10
 6809 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6810              		.loc 1 4696 2
 6811 0080 1846     		mov	r0, r3
 6812 0082 1037     		adds	r7, r7, #16
 6813              	.LCFI279:
 6814              		.cfi_def_cfa_offset 8
 6815 0084 BD46     		mov	sp, r7
 6816              	.LCFI280:
 6817              		.cfi_def_cfa_register 13
 6818              		@ sp needed
 6819 0086 80BD     		pop	{r7, pc}
 6820              	.L431:
 6821              		.align	2
 6822              	.L430:
 6823 0088 00000000 		.word	pxCurrentTCB
 6824 008c 04ED00E0 		.word	-536810236
 6825              		.cfi_endproc
 6826              	.LFE58:
 6828              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6829              		.align	1
 6830              		.global	xTaskNotifyWait
 6831              		.syntax unified
 6832              		.thumb
 6833              		.thumb_func
 6835              	xTaskNotifyWait:
 6836              	.LFB59:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 207


4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6837              		.loc 1 4704 2
 6838              		.cfi_startproc
 6839              		@ args = 0, pretend = 0, frame = 24
 6840              		@ frame_needed = 1, uses_anonymous_args = 0
 6841 0000 80B5     		push	{r7, lr}
 6842              	.LCFI281:
 6843              		.cfi_def_cfa_offset 8
 6844              		.cfi_offset 7, -8
 6845              		.cfi_offset 14, -4
 6846 0002 86B0     		sub	sp, sp, #24
 6847              	.LCFI282:
 6848              		.cfi_def_cfa_offset 32
 6849 0004 00AF     		add	r7, sp, #0
 6850              	.LCFI283:
 6851              		.cfi_def_cfa_register 7
 6852 0006 F860     		str	r0, [r7, #12]
 6853 0008 B960     		str	r1, [r7, #8]
 6854 000a 7A60     		str	r2, [r7, #4]
 6855 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6856              		.loc 1 4707 3
 6857 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6858              		.loc 1 4710 20
 6859 0012 264B     		ldr	r3, .L438
 6860 0014 1B68     		ldr	r3, [r3]
 6861 0016 93F85830 		ldrb	r3, [r3, #88]
 6862 001a DBB2     		uxtb	r3, r3
 6863              		.loc 1 4710 6
 6864 001c 022B     		cmp	r3, #2
 6865 001e 1AD0     		beq	.L433
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6866              		.loc 1 4715 35
 6867 0020 224B     		ldr	r3, .L438
 6868 0022 1B68     		ldr	r3, [r3]
 6869 0024 596D     		ldr	r1, [r3, #84]
 6870              		.loc 1 4715 38
 6871 0026 FA68     		ldr	r2, [r7, #12]
 6872 0028 D243     		mvns	r2, r2
 6873              		.loc 1 4715 35
 6874 002a 0A40     		ands	r2, r2, r1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 208


 6875 002c 5A65     		str	r2, [r3, #84]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6876              		.loc 1 4718 17
 6877 002e 1F4B     		ldr	r3, .L438
 6878 0030 1B68     		ldr	r3, [r3]
 6879              		.loc 1 4718 33
 6880 0032 0122     		movs	r2, #1
 6881 0034 83F85820 		strb	r2, [r3, #88]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6882              		.loc 1 4720 7
 6883 0038 3B68     		ldr	r3, [r7]
 6884 003a 002B     		cmp	r3, #0
 6885 003c 0BD0     		beq	.L433
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6886              		.loc 1 4722 6
 6887 003e 0121     		movs	r1, #1
 6888 0040 3868     		ldr	r0, [r7]
 6889 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6890              		.loc 1 4729 6
 6891 0046 1A4B     		ldr	r3, .L438+4
 6892 0048 4FF08052 		mov	r2, #268435456
 6893 004c 1A60     		str	r2, [r3]
 6894              		.syntax unified
 6895              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6896 004e BFF34F8F 		dsb
 6897              	@ 0 "" 2
 6898              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6899 0052 BFF36F8F 		isb
 6900              	@ 0 "" 2
 6901              		.thumb
 6902              		.syntax unified
 6903              	.L433:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6904              		.loc 1 4741 3
 6905 0056 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 209


4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6906              		.loc 1 4743 3
 6907 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6908              		.loc 1 4747 6
 6909 005e 7B68     		ldr	r3, [r7, #4]
 6910 0060 002B     		cmp	r3, #0
 6911 0062 04D0     		beq	.L434
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6912              		.loc 1 4751 41
 6913 0064 114B     		ldr	r3, .L438
 6914 0066 1B68     		ldr	r3, [r3]
 6915 0068 5A6D     		ldr	r2, [r3, #84]
 6916              		.loc 1 4751 27
 6917 006a 7B68     		ldr	r3, [r7, #4]
 6918 006c 1A60     		str	r2, [r3]
 6919              	.L434:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6920              		.loc 1 4758 20
 6921 006e 0F4B     		ldr	r3, .L438
 6922 0070 1B68     		ldr	r3, [r3]
 6923 0072 93F85830 		ldrb	r3, [r3, #88]
 6924 0076 DBB2     		uxtb	r3, r3
 6925              		.loc 1 4758 6
 6926 0078 022B     		cmp	r3, #2
 6927 007a 02D0     		beq	.L435
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6928              		.loc 1 4761 13
 6929 007c 0023     		movs	r3, #0
 6930 007e 7B61     		str	r3, [r7, #20]
 6931 0080 08E0     		b	.L436
 6932              	.L435:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6933              		.loc 1 4767 35
 6934 0082 0A4B     		ldr	r3, .L438
 6935 0084 1B68     		ldr	r3, [r3]
 6936 0086 596D     		ldr	r1, [r3, #84]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 210


 6937              		.loc 1 4767 38
 6938 0088 BA68     		ldr	r2, [r7, #8]
 6939 008a D243     		mvns	r2, r2
 6940              		.loc 1 4767 35
 6941 008c 0A40     		ands	r2, r2, r1
 6942 008e 5A65     		str	r2, [r3, #84]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6943              		.loc 1 4768 13
 6944 0090 0123     		movs	r3, #1
 6945 0092 7B61     		str	r3, [r7, #20]
 6946              	.L436:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6947              		.loc 1 4771 16
 6948 0094 054B     		ldr	r3, .L438
 6949 0096 1B68     		ldr	r3, [r3]
 6950              		.loc 1 4771 32
 6951 0098 0022     		movs	r2, #0
 6952 009a 83F85820 		strb	r2, [r3, #88]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6953              		.loc 1 4773 3
 6954 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6955              		.loc 1 4775 10
 6956 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6957              		.loc 1 4776 2
 6958 00a4 1846     		mov	r0, r3
 6959 00a6 1837     		adds	r7, r7, #24
 6960              	.LCFI284:
 6961              		.cfi_def_cfa_offset 8
 6962 00a8 BD46     		mov	sp, r7
 6963              	.LCFI285:
 6964              		.cfi_def_cfa_register 13
 6965              		@ sp needed
 6966 00aa 80BD     		pop	{r7, pc}
 6967              	.L439:
 6968              		.align	2
 6969              	.L438:
 6970 00ac 00000000 		.word	pxCurrentTCB
 6971 00b0 04ED00E0 		.word	-536810236
 6972              		.cfi_endproc
 6973              	.LFE59:
 6975              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6976              		.align	1
 6977              		.global	xTaskGenericNotify
 6978              		.syntax unified
 6979              		.thumb
 6980              		.thumb_func
 6982              	xTaskGenericNotify:
 6983              	.LFB60:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 211


4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6984              		.loc 1 4784 2
 6985              		.cfi_startproc
 6986              		@ args = 0, pretend = 0, frame = 40
 6987              		@ frame_needed = 1, uses_anonymous_args = 0
 6988 0000 80B5     		push	{r7, lr}
 6989              	.LCFI286:
 6990              		.cfi_def_cfa_offset 8
 6991              		.cfi_offset 7, -8
 6992              		.cfi_offset 14, -4
 6993 0002 8AB0     		sub	sp, sp, #40
 6994              	.LCFI287:
 6995              		.cfi_def_cfa_offset 48
 6996 0004 00AF     		add	r7, sp, #0
 6997              	.LCFI288:
 6998              		.cfi_def_cfa_register 7
 6999 0006 F860     		str	r0, [r7, #12]
 7000 0008 B960     		str	r1, [r7, #8]
 7001 000a 3B60     		str	r3, [r7]
 7002 000c 1346     		mov	r3, r2
 7003 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7004              		.loc 1 4786 13
 7005 0010 0123     		movs	r3, #1
 7006 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7007              		.loc 1 4789 3
 7008 0014 FB68     		ldr	r3, [r7, #12]
 7009 0016 002B     		cmp	r3, #0
 7010 0018 0AD1     		bne	.L441
 7011              	.LBB216:
 7012              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7013              		.loc 2 195 2
 7014              		.syntax unified
 7015              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7016 001a 4FF05003 			mov r3, #80												
 7017 001e 83F31188 		msr basepri, r3											
 7018 0022 BFF36F8F 		isb														
 7019 0026 BFF34F8F 		dsb														
 7020              	
 7021              	@ 0 "" 2
 7022              		.thumb
 7023              		.syntax unified
 7024 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7025              		.loc 2 203 1
 7026 002c 00BF     		nop
 7027              	.L442:
 7028              	.LBE217:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 212


 7029              	.LBE216:
 7030              		.loc 1 4789 3 discriminator 1
 7031 002e FEE7     		b	.L442
 7032              	.L441:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7033              		.loc 1 4790 9
 7034 0030 FB68     		ldr	r3, [r7, #12]
 7035 0032 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7036              		.loc 1 4792 3
 7037 0034 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7038              		.loc 1 4794 6
 7039 0038 3B68     		ldr	r3, [r7]
 7040 003a 002B     		cmp	r3, #0
 7041 003c 03D0     		beq	.L443
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7042              		.loc 1 4796 42
 7043 003e 3B6A     		ldr	r3, [r7, #32]
 7044 0040 5A6D     		ldr	r2, [r3, #84]
 7045              		.loc 1 4796 35
 7046 0042 3B68     		ldr	r3, [r7]
 7047 0044 1A60     		str	r2, [r3]
 7048              	.L443:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7049              		.loc 1 4799 26
 7050 0046 3B6A     		ldr	r3, [r7, #32]
 7051 0048 93F85830 		ldrb	r3, [r3, #88]
 7052 004c FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7053              		.loc 1 4801 25
 7054 004e 3B6A     		ldr	r3, [r7, #32]
 7055 0050 0222     		movs	r2, #2
 7056 0052 83F85820 		strb	r2, [r3, #88]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7057              		.loc 1 4803 4
 7058 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7059 0058 042B     		cmp	r3, #4
 7060 005a 28D8     		bhi	.L444
 7061 005c 01A2     		adr	r2, .L446
 7062 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7063 0062 00BF     		.p2align 2
 7064              	.L446:
 7065 0064 CF000000 		.word	.L461+1
 7066 0068 79000000 		.word	.L449+1
 7067 006c 87000000 		.word	.L448+1
 7068 0070 93000000 		.word	.L447+1
 7069 0074 9B000000 		.word	.L445+1
 7070              		.p2align 1
 7071              	.L449:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 213


4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7072              		.loc 1 4806 29
 7073 0078 3B6A     		ldr	r3, [r7, #32]
 7074 007a 5A6D     		ldr	r2, [r3, #84]
 7075 007c BB68     		ldr	r3, [r7, #8]
 7076 007e 1A43     		orrs	r2, r2, r3
 7077 0080 3B6A     		ldr	r3, [r7, #32]
 7078 0082 5A65     		str	r2, [r3, #84]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7079              		.loc 1 4807 6
 7080 0084 26E0     		b	.L451
 7081              	.L448:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7082              		.loc 1 4810 13
 7083 0086 3B6A     		ldr	r3, [r7, #32]
 7084 0088 5B6D     		ldr	r3, [r3, #84]
 7085              		.loc 1 4810 32
 7086 008a 5A1C     		adds	r2, r3, #1
 7087 008c 3B6A     		ldr	r3, [r7, #32]
 7088 008e 5A65     		str	r2, [r3, #84]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7089              		.loc 1 4811 6
 7090 0090 20E0     		b	.L451
 7091              	.L447:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7092              		.loc 1 4814 29
 7093 0092 3B6A     		ldr	r3, [r7, #32]
 7094 0094 BA68     		ldr	r2, [r7, #8]
 7095 0096 5A65     		str	r2, [r3, #84]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7096              		.loc 1 4815 6
 7097 0098 1CE0     		b	.L451
 7098              	.L445:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7099              		.loc 1 4818 8
 7100 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7101 009c 022B     		cmp	r3, #2
 7102 009e 03D0     		beq	.L452
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7103              		.loc 1 4820 30
 7104 00a0 3B6A     		ldr	r3, [r7, #32]
 7105 00a2 BA68     		ldr	r2, [r7, #8]
 7106 00a4 5A65     		str	r2, [r3, #84]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 214


4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7107              		.loc 1 4827 6
 7108 00a6 15E0     		b	.L451
 7109              	.L452:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7110              		.loc 1 4825 15
 7111 00a8 0023     		movs	r3, #0
 7112 00aa 7B62     		str	r3, [r7, #36]
 7113              		.loc 1 4827 6
 7114 00ac 12E0     		b	.L451
 7115              	.L444:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7116              		.loc 1 4838 6
 7117 00ae 3B6A     		ldr	r3, [r7, #32]
 7118 00b0 5B6D     		ldr	r3, [r3, #84]
 7119 00b2 B3F1FF3F 		cmp	r3, #-1
 7120 00b6 0CD0     		beq	.L462
 7121              	.LBB218:
 7122              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7123              		.loc 2 195 2
 7124              		.syntax unified
 7125              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7126 00b8 4FF05003 			mov r3, #80												
 7127 00bc 83F31188 		msr basepri, r3											
 7128 00c0 BFF36F8F 		isb														
 7129 00c4 BFF34F8F 		dsb														
 7130              	
 7131              	@ 0 "" 2
 7132              		.thumb
 7133              		.syntax unified
 7134 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7135              		.loc 2 203 1
 7136 00ca 00BF     		nop
 7137              	.L455:
 7138              	.LBE219:
 7139              	.LBE218:
 7140              		.loc 1 4838 6 discriminator 2
 7141 00cc FEE7     		b	.L455
 7142              	.L461:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7143              		.loc 1 4832 6
 7144 00ce 00BF     		nop
 7145 00d0 00E0     		b	.L451
 7146              	.L462:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 215


4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7147              		.loc 1 4840 6
 7148 00d2 00BF     		nop
 7149              	.L451:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7150              		.loc 1 4847 6
 7151 00d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7152 00d6 012B     		cmp	r3, #1
 7153 00d8 3AD1     		bne	.L456
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7154              		.loc 1 4849 14
 7155 00da 3B6A     		ldr	r3, [r7, #32]
 7156 00dc 0433     		adds	r3, r3, #4
 7157 00de 1846     		mov	r0, r3
 7158 00e0 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7159              		.loc 1 4850 5
 7160 00e4 3B6A     		ldr	r3, [r7, #32]
 7161 00e6 DA6A     		ldr	r2, [r3, #44]
 7162 00e8 1D4B     		ldr	r3, .L463
 7163 00ea 1B68     		ldr	r3, [r3]
 7164 00ec 9A42     		cmp	r2, r3
 7165 00ee 03D9     		bls	.L457
 7166              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7167 00f0 3B6A     		ldr	r3, [r7, #32]
 7168 00f2 DB6A     		ldr	r3, [r3, #44]
 7169 00f4 1A4A     		ldr	r2, .L463
 7170 00f6 1360     		str	r3, [r2]
 7171              	.L457:
 7172              		.loc 1 4850 5 discriminator 3
 7173 00f8 3B6A     		ldr	r3, [r7, #32]
 7174 00fa DA6A     		ldr	r2, [r3, #44]
 7175 00fc 1346     		mov	r3, r2
 7176 00fe 9B00     		lsls	r3, r3, #2
 7177 0100 1344     		add	r3, r3, r2
 7178 0102 9B00     		lsls	r3, r3, #2
 7179 0104 174A     		ldr	r2, .L463+4
 7180 0106 1A44     		add	r2, r2, r3
 7181 0108 3B6A     		ldr	r3, [r7, #32]
 7182 010a 0433     		adds	r3, r3, #4
 7183 010c 1946     		mov	r1, r3
 7184 010e 1046     		mov	r0, r2
 7185 0110 FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7186              		.loc 1 4853 5 is_stmt 1 discriminator 3
 7187 0114 3B6A     		ldr	r3, [r7, #32]
 7188 0116 9B6A     		ldr	r3, [r3, #40]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 216


 7189 0118 002B     		cmp	r3, #0
 7190 011a 0AD0     		beq	.L458
 7191              	.LBB220:
 7192              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7193              		.loc 2 195 2
 7194              		.syntax unified
 7195              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7196 011c 4FF05003 			mov r3, #80												
 7197 0120 83F31188 		msr basepri, r3											
 7198 0124 BFF36F8F 		isb														
 7199 0128 BFF34F8F 		dsb														
 7200              	
 7201              	@ 0 "" 2
 7202              		.thumb
 7203              		.syntax unified
 7204 012c 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7205              		.loc 2 203 1
 7206 012e 00BF     		nop
 7207              	.L459:
 7208              	.LBE221:
 7209              	.LBE220:
 7210              		.loc 1 4853 5 discriminator 3
 7211 0130 FEE7     		b	.L459
 7212              	.L458:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7213              		.loc 1 4871 14
 7214 0132 3B6A     		ldr	r3, [r7, #32]
 7215 0134 DA6A     		ldr	r2, [r3, #44]
 7216              		.loc 1 4871 41
 7217 0136 0C4B     		ldr	r3, .L463+8
 7218 0138 1B68     		ldr	r3, [r3]
 7219 013a DB6A     		ldr	r3, [r3, #44]
 7220              		.loc 1 4871 7
 7221 013c 9A42     		cmp	r2, r3
 7222 013e 07D9     		bls	.L456
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 217


4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7223              		.loc 1 4875 6
 7224 0140 0A4B     		ldr	r3, .L463+12
 7225 0142 4FF08052 		mov	r2, #268435456
 7226 0146 1A60     		str	r2, [r3]
 7227              		.syntax unified
 7228              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7229 0148 BFF34F8F 		dsb
 7230              	@ 0 "" 2
 7231              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7232 014c BFF36F8F 		isb
 7233              	@ 0 "" 2
 7234              		.thumb
 7235              		.syntax unified
 7236              	.L456:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7237              		.loc 1 4887 3
 7238 0150 FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7239              		.loc 1 4889 10
 7240 0154 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7241              		.loc 1 4890 2
 7242 0156 1846     		mov	r0, r3
 7243 0158 2837     		adds	r7, r7, #40
 7244              	.LCFI289:
 7245              		.cfi_def_cfa_offset 8
 7246 015a BD46     		mov	sp, r7
 7247              	.LCFI290:
 7248              		.cfi_def_cfa_register 13
 7249              		@ sp needed
 7250 015c 80BD     		pop	{r7, pc}
 7251              	.L464:
 7252 015e 00BF     		.align	2
 7253              	.L463:
 7254 0160 00000000 		.word	uxTopReadyPriority
 7255 0164 00000000 		.word	pxReadyTasksLists
 7256 0168 00000000 		.word	pxCurrentTCB
 7257 016c 04ED00E0 		.word	-536810236
 7258              		.cfi_endproc
 7259              	.LFE60:
 7261              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7262              		.align	1
 7263              		.global	xTaskGenericNotifyFromISR
 7264              		.syntax unified
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 218


 7265              		.thumb
 7266              		.thumb_func
 7268              	xTaskGenericNotifyFromISR:
 7269              	.LFB61:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7270              		.loc 1 4898 2
 7271              		.cfi_startproc
 7272              		@ args = 4, pretend = 0, frame = 56
 7273              		@ frame_needed = 1, uses_anonymous_args = 0
 7274 0000 80B5     		push	{r7, lr}
 7275              	.LCFI291:
 7276              		.cfi_def_cfa_offset 8
 7277              		.cfi_offset 7, -8
 7278              		.cfi_offset 14, -4
 7279 0002 8EB0     		sub	sp, sp, #56
 7280              	.LCFI292:
 7281              		.cfi_def_cfa_offset 64
 7282 0004 00AF     		add	r7, sp, #0
 7283              	.LCFI293:
 7284              		.cfi_def_cfa_register 7
 7285 0006 F860     		str	r0, [r7, #12]
 7286 0008 B960     		str	r1, [r7, #8]
 7287 000a 3B60     		str	r3, [r7]
 7288 000c 1346     		mov	r3, r2
 7289 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7290              		.loc 1 4901 13
 7291 0010 0123     		movs	r3, #1
 7292 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7293              		.loc 1 4904 3
 7294 0014 FB68     		ldr	r3, [r7, #12]
 7295 0016 002B     		cmp	r3, #0
 7296 0018 0AD1     		bne	.L466
 7297              	.LBB222:
 7298              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7299              		.loc 2 195 2
 7300              		.syntax unified
 7301              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7302 001a 4FF05003 			mov r3, #80												
 7303 001e 83F31188 		msr basepri, r3											
 7304 0022 BFF36F8F 		isb														
 7305 0026 BFF34F8F 		dsb														
 7306              	
 7307              	@ 0 "" 2
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 219


 7308              		.thumb
 7309              		.syntax unified
 7310 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7311              		.loc 2 203 1
 7312 002c 00BF     		nop
 7313              	.L467:
 7314              	.LBE223:
 7315              	.LBE222:
 7316              		.loc 1 4904 3 discriminator 1
 7317 002e FEE7     		b	.L467
 7318              	.L466:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7319              		.loc 1 4922 3
 7320 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7321              		.loc 1 4924 9
 7322 0034 FB68     		ldr	r3, [r7, #12]
 7323 0036 3B63     		str	r3, [r7, #48]
 7324              	.LBB224:
 7325              	.LBB225:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7326              		.loc 2 211 2
 7327              		.syntax unified
 7328              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7329 0038 EFF31182 			mrs r2, basepri											
 7330 003c 4FF05003 		mov r3, #80												
 7331 0040 83F31188 		msr basepri, r3											
 7332 0044 BFF36F8F 		isb														
 7333 0048 BFF34F8F 		dsb														
 7334              	
 7335              	@ 0 "" 2
 7336              		.thumb
 7337              		.syntax unified
 7338 004c 3A62     		str	r2, [r7, #32]
 7339 004e FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7340              		.loc 2 223 9
 7341 0050 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 220


 7342              	.LBE225:
 7343              	.LBE224:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7344              		.loc 1 4926 28
 7345 0052 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7346              		.loc 1 4928 6
 7347 0054 3B68     		ldr	r3, [r7]
 7348 0056 002B     		cmp	r3, #0
 7349 0058 03D0     		beq	.L469
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7350              		.loc 1 4930 42
 7351 005a 3B6B     		ldr	r3, [r7, #48]
 7352 005c 5A6D     		ldr	r2, [r3, #84]
 7353              		.loc 1 4930 35
 7354 005e 3B68     		ldr	r3, [r7]
 7355 0060 1A60     		str	r2, [r3]
 7356              	.L469:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7357              		.loc 1 4933 26
 7358 0062 3B6B     		ldr	r3, [r7, #48]
 7359 0064 93F85830 		ldrb	r3, [r3, #88]
 7360 0068 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7361              		.loc 1 4934 25
 7362 006c 3B6B     		ldr	r3, [r7, #48]
 7363 006e 0222     		movs	r2, #2
 7364 0070 83F85820 		strb	r2, [r3, #88]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7365              		.loc 1 4936 4
 7366 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7367 0076 042B     		cmp	r3, #4
 7368 0078 28D8     		bhi	.L470
 7369 007a 01A2     		adr	r2, .L472
 7370 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7371              		.p2align 2
 7372              	.L472:
 7373 0080 ED000000 		.word	.L490+1
 7374 0084 95000000 		.word	.L475+1
 7375 0088 A3000000 		.word	.L474+1
 7376 008c AF000000 		.word	.L473+1
 7377 0090 B7000000 		.word	.L471+1
 7378              		.p2align 1
 7379              	.L475:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7380              		.loc 1 4939 29
 7381 0094 3B6B     		ldr	r3, [r7, #48]
 7382 0096 5A6D     		ldr	r2, [r3, #84]
 7383 0098 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 221


 7384 009a 1A43     		orrs	r2, r2, r3
 7385 009c 3B6B     		ldr	r3, [r7, #48]
 7386 009e 5A65     		str	r2, [r3, #84]
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7387              		.loc 1 4940 6
 7388 00a0 27E0     		b	.L477
 7389              	.L474:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7390              		.loc 1 4943 13
 7391 00a2 3B6B     		ldr	r3, [r7, #48]
 7392 00a4 5B6D     		ldr	r3, [r3, #84]
 7393              		.loc 1 4943 32
 7394 00a6 5A1C     		adds	r2, r3, #1
 7395 00a8 3B6B     		ldr	r3, [r7, #48]
 7396 00aa 5A65     		str	r2, [r3, #84]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7397              		.loc 1 4944 6
 7398 00ac 21E0     		b	.L477
 7399              	.L473:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7400              		.loc 1 4947 29
 7401 00ae 3B6B     		ldr	r3, [r7, #48]
 7402 00b0 BA68     		ldr	r2, [r7, #8]
 7403 00b2 5A65     		str	r2, [r3, #84]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7404              		.loc 1 4948 6
 7405 00b4 1DE0     		b	.L477
 7406              	.L471:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7407              		.loc 1 4951 8
 7408 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7409 00ba 022B     		cmp	r3, #2
 7410 00bc 03D0     		beq	.L478
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7411              		.loc 1 4953 30
 7412 00be 3B6B     		ldr	r3, [r7, #48]
 7413 00c0 BA68     		ldr	r2, [r7, #8]
 7414 00c2 5A65     		str	r2, [r3, #84]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7415              		.loc 1 4960 6
 7416 00c4 15E0     		b	.L477
 7417              	.L478:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7418              		.loc 1 4958 15
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 222


 7419 00c6 0023     		movs	r3, #0
 7420 00c8 7B63     		str	r3, [r7, #52]
 7421              		.loc 1 4960 6
 7422 00ca 12E0     		b	.L477
 7423              	.L470:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7424              		.loc 1 4971 6
 7425 00cc 3B6B     		ldr	r3, [r7, #48]
 7426 00ce 5B6D     		ldr	r3, [r3, #84]
 7427 00d0 B3F1FF3F 		cmp	r3, #-1
 7428 00d4 0CD0     		beq	.L491
 7429              	.LBB226:
 7430              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7431              		.loc 2 195 2
 7432              		.syntax unified
 7433              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7434 00d6 4FF05003 			mov r3, #80												
 7435 00da 83F31188 		msr basepri, r3											
 7436 00de BFF36F8F 		isb														
 7437 00e2 BFF34F8F 		dsb														
 7438              	
 7439              	@ 0 "" 2
 7440              		.thumb
 7441              		.syntax unified
 7442 00e6 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7443              		.loc 2 203 1
 7444 00e8 00BF     		nop
 7445              	.L481:
 7446              	.LBE227:
 7447              	.LBE226:
 7448              		.loc 1 4971 6 discriminator 2
 7449 00ea FEE7     		b	.L481
 7450              	.L490:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7451              		.loc 1 4965 6
 7452 00ec 00BF     		nop
 7453 00ee 00E0     		b	.L477
 7454              	.L491:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7455              		.loc 1 4972 6
 7456 00f0 00BF     		nop
 7457              	.L477:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 223


4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7458              		.loc 1 4979 6
 7459 00f2 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7460 00f6 012B     		cmp	r3, #1
 7461 00f8 46D1     		bne	.L482
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7462              		.loc 1 4982 5
 7463 00fa 3B6B     		ldr	r3, [r7, #48]
 7464 00fc 9B6A     		ldr	r3, [r3, #40]
 7465 00fe 002B     		cmp	r3, #0
 7466 0100 0AD0     		beq	.L483
 7467              	.LBB228:
 7468              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7469              		.loc 2 195 2
 7470              		.syntax unified
 7471              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7472 0102 4FF05003 			mov r3, #80												
 7473 0106 83F31188 		msr basepri, r3											
 7474 010a BFF36F8F 		isb														
 7475 010e BFF34F8F 		dsb														
 7476              	
 7477              	@ 0 "" 2
 7478              		.thumb
 7479              		.syntax unified
 7480 0112 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7481              		.loc 2 203 1
 7482 0114 00BF     		nop
 7483              	.L484:
 7484              	.LBE229:
 7485              	.LBE228:
 7486              		.loc 1 4982 5 discriminator 3
 7487 0116 FEE7     		b	.L484
 7488              	.L483:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7489              		.loc 1 4984 30
 7490 0118 214B     		ldr	r3, .L492
 7491 011a 1B68     		ldr	r3, [r3]
 7492              		.loc 1 4984 7
 7493 011c 002B     		cmp	r3, #0
 7494 011e 1DD1     		bne	.L485
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7495              		.loc 1 4986 15
 7496 0120 3B6B     		ldr	r3, [r7, #48]
 7497 0122 0433     		adds	r3, r3, #4
 7498 0124 1846     		mov	r0, r3
 7499 0126 FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7500              		.loc 1 4987 6
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 224


 7501 012a 3B6B     		ldr	r3, [r7, #48]
 7502 012c DA6A     		ldr	r2, [r3, #44]
 7503 012e 1D4B     		ldr	r3, .L492+4
 7504 0130 1B68     		ldr	r3, [r3]
 7505 0132 9A42     		cmp	r2, r3
 7506 0134 03D9     		bls	.L486
 7507              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7508 0136 3B6B     		ldr	r3, [r7, #48]
 7509 0138 DB6A     		ldr	r3, [r3, #44]
 7510 013a 1A4A     		ldr	r2, .L492+4
 7511 013c 1360     		str	r3, [r2]
 7512              	.L486:
 7513              		.loc 1 4987 6 discriminator 3
 7514 013e 3B6B     		ldr	r3, [r7, #48]
 7515 0140 DA6A     		ldr	r2, [r3, #44]
 7516 0142 1346     		mov	r3, r2
 7517 0144 9B00     		lsls	r3, r3, #2
 7518 0146 1344     		add	r3, r3, r2
 7519 0148 9B00     		lsls	r3, r3, #2
 7520 014a 174A     		ldr	r2, .L492+8
 7521 014c 1A44     		add	r2, r2, r3
 7522 014e 3B6B     		ldr	r3, [r7, #48]
 7523 0150 0433     		adds	r3, r3, #4
 7524 0152 1946     		mov	r1, r3
 7525 0154 1046     		mov	r0, r2
 7526 0156 FFF7FEFF 		bl	vListInsertEnd
 7527 015a 05E0     		b	.L487
 7528              	.L485:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7529              		.loc 1 4993 6 is_stmt 1
 7530 015c 3B6B     		ldr	r3, [r7, #48]
 7531 015e 1833     		adds	r3, r3, #24
 7532 0160 1946     		mov	r1, r3
 7533 0162 1248     		ldr	r0, .L492+12
 7534 0164 FFF7FEFF 		bl	vListInsertEnd
 7535              	.L487:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7536              		.loc 1 4996 14
 7537 0168 3B6B     		ldr	r3, [r7, #48]
 7538 016a DA6A     		ldr	r2, [r3, #44]
 7539              		.loc 1 4996 41
 7540 016c 104B     		ldr	r3, .L492+16
 7541 016e 1B68     		ldr	r3, [r3]
 7542 0170 DB6A     		ldr	r3, [r3, #44]
 7543              		.loc 1 4996 7
 7544 0172 9A42     		cmp	r2, r3
 7545 0174 08D9     		bls	.L482
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 225


5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7546              		.loc 1 5000 8
 7547 0176 3B6C     		ldr	r3, [r7, #64]
 7548 0178 002B     		cmp	r3, #0
 7549 017a 02D0     		beq	.L488
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7550              		.loc 1 5002 34
 7551 017c 3B6C     		ldr	r3, [r7, #64]
 7552 017e 0122     		movs	r2, #1
 7553 0180 1A60     		str	r2, [r3]
 7554              	.L488:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7555              		.loc 1 5008 20
 7556 0182 0C4B     		ldr	r3, .L492+20
 7557 0184 0122     		movs	r2, #1
 7558 0186 1A60     		str	r2, [r3]
 7559              	.L482:
 7560 0188 FB6A     		ldr	r3, [r7, #44]
 7561 018a 3B61     		str	r3, [r7, #16]
 7562              	.LBB230:
 7563              	.LBB231:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7564              		.loc 2 229 2
 7565 018c 3B69     		ldr	r3, [r7, #16]
 7566              		.syntax unified
 7567              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7568 018e 83F31188 			msr basepri, r3	
 7569              	@ 0 "" 2
 7570              		.loc 2 233 1
 7571              		.thumb
 7572              		.syntax unified
 7573 0192 00BF     		nop
 7574              	.LBE231:
 7575              	.LBE230:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7576              		.loc 1 5018 10
 7577 0194 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7578              		.loc 1 5019 2
 7579 0196 1846     		mov	r0, r3
 7580 0198 3837     		adds	r7, r7, #56
 7581              	.LCFI294:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 226


 7582              		.cfi_def_cfa_offset 8
 7583 019a BD46     		mov	sp, r7
 7584              	.LCFI295:
 7585              		.cfi_def_cfa_register 13
 7586              		@ sp needed
 7587 019c 80BD     		pop	{r7, pc}
 7588              	.L493:
 7589 019e 00BF     		.align	2
 7590              	.L492:
 7591 01a0 00000000 		.word	uxSchedulerSuspended
 7592 01a4 00000000 		.word	uxTopReadyPriority
 7593 01a8 00000000 		.word	pxReadyTasksLists
 7594 01ac 00000000 		.word	xPendingReadyList
 7595 01b0 00000000 		.word	pxCurrentTCB
 7596 01b4 00000000 		.word	xYieldPending
 7597              		.cfi_endproc
 7598              	.LFE61:
 7600              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7601              		.align	1
 7602              		.global	vTaskNotifyGiveFromISR
 7603              		.syntax unified
 7604              		.thumb
 7605              		.thumb_func
 7607              	vTaskNotifyGiveFromISR:
 7608              	.LFB62:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7609              		.loc 1 5027 2
 7610              		.cfi_startproc
 7611              		@ args = 0, pretend = 0, frame = 40
 7612              		@ frame_needed = 1, uses_anonymous_args = 0
 7613 0000 80B5     		push	{r7, lr}
 7614              	.LCFI296:
 7615              		.cfi_def_cfa_offset 8
 7616              		.cfi_offset 7, -8
 7617              		.cfi_offset 14, -4
 7618 0002 8AB0     		sub	sp, sp, #40
 7619              	.LCFI297:
 7620              		.cfi_def_cfa_offset 48
 7621 0004 00AF     		add	r7, sp, #0
 7622              	.LCFI298:
 7623              		.cfi_def_cfa_register 7
 7624 0006 7860     		str	r0, [r7, #4]
 7625 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7626              		.loc 1 5032 3
 7627 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 227


 7628 000c 002B     		cmp	r3, #0
 7629 000e 0AD1     		bne	.L495
 7630              	.LBB232:
 7631              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7632              		.loc 2 195 2
 7633              		.syntax unified
 7634              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7635 0010 4FF05003 			mov r3, #80												
 7636 0014 83F31188 		msr basepri, r3											
 7637 0018 BFF36F8F 		isb														
 7638 001c BFF34F8F 		dsb														
 7639              	
 7640              	@ 0 "" 2
 7641              		.thumb
 7642              		.syntax unified
 7643 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7644              		.loc 2 203 1
 7645 0022 00BF     		nop
 7646              	.L496:
 7647              	.LBE233:
 7648              	.LBE232:
 7649              		.loc 1 5032 3 discriminator 1
 7650 0024 FEE7     		b	.L496
 7651              	.L495:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7652              		.loc 1 5050 3
 7653 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7654              		.loc 1 5052 9
 7655 002a 7B68     		ldr	r3, [r7, #4]
 7656 002c 7B62     		str	r3, [r7, #36]
 7657              	.LBB234:
 7658              	.LBB235:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7659              		.loc 2 211 2
 7660              		.syntax unified
 7661              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 228


 7662 002e EFF31182 			mrs r2, basepri											
 7663 0032 4FF05003 		mov r3, #80												
 7664 0036 83F31188 		msr basepri, r3											
 7665 003a BFF36F8F 		isb														
 7666 003e BFF34F8F 		dsb														
 7667              	
 7668              	@ 0 "" 2
 7669              		.thumb
 7670              		.syntax unified
 7671 0042 7A61     		str	r2, [r7, #20]
 7672 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7673              		.loc 2 223 9
 7674 0046 7B69     		ldr	r3, [r7, #20]
 7675              	.LBE235:
 7676              	.LBE234:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7677              		.loc 1 5054 28
 7678 0048 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7679              		.loc 1 5056 26
 7680 004a 7B6A     		ldr	r3, [r7, #36]
 7681 004c 93F85830 		ldrb	r3, [r3, #88]
 7682 0050 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7683              		.loc 1 5057 25
 7684 0052 7B6A     		ldr	r3, [r7, #36]
 7685 0054 0222     		movs	r2, #2
 7686 0056 83F85820 		strb	r2, [r3, #88]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7687              		.loc 1 5061 11
 7688 005a 7B6A     		ldr	r3, [r7, #36]
 7689 005c 5B6D     		ldr	r3, [r3, #84]
 7690              		.loc 1 5061 30
 7691 005e 5A1C     		adds	r2, r3, #1
 7692 0060 7B6A     		ldr	r3, [r7, #36]
 7693 0062 5A65     		str	r2, [r3, #84]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7694              		.loc 1 5067 6
 7695 0064 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7696 0066 012B     		cmp	r3, #1
 7697 0068 46D1     		bne	.L498
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7698              		.loc 1 5070 5
 7699 006a 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 229


 7700 006c 9B6A     		ldr	r3, [r3, #40]
 7701 006e 002B     		cmp	r3, #0
 7702 0070 0AD0     		beq	.L499
 7703              	.LBB236:
 7704              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7705              		.loc 2 195 2
 7706              		.syntax unified
 7707              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7708 0072 4FF05003 			mov r3, #80												
 7709 0076 83F31188 		msr basepri, r3											
 7710 007a BFF36F8F 		isb														
 7711 007e BFF34F8F 		dsb														
 7712              	
 7713              	@ 0 "" 2
 7714              		.thumb
 7715              		.syntax unified
 7716 0082 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7717              		.loc 2 203 1
 7718 0084 00BF     		nop
 7719              	.L500:
 7720              	.LBE237:
 7721              	.LBE236:
 7722              		.loc 1 5070 5 discriminator 2
 7723 0086 FEE7     		b	.L500
 7724              	.L499:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7725              		.loc 1 5072 30
 7726 0088 204B     		ldr	r3, .L505
 7727 008a 1B68     		ldr	r3, [r3]
 7728              		.loc 1 5072 7
 7729 008c 002B     		cmp	r3, #0
 7730 008e 1DD1     		bne	.L501
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7731              		.loc 1 5074 15
 7732 0090 7B6A     		ldr	r3, [r7, #36]
 7733 0092 0433     		adds	r3, r3, #4
 7734 0094 1846     		mov	r0, r3
 7735 0096 FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7736              		.loc 1 5075 6
 7737 009a 7B6A     		ldr	r3, [r7, #36]
 7738 009c DA6A     		ldr	r2, [r3, #44]
 7739 009e 1C4B     		ldr	r3, .L505+4
 7740 00a0 1B68     		ldr	r3, [r3]
 7741 00a2 9A42     		cmp	r2, r3
 7742 00a4 03D9     		bls	.L502
 7743              		.loc 1 5075 6 is_stmt 0 discriminator 1
 7744 00a6 7B6A     		ldr	r3, [r7, #36]
 7745 00a8 DB6A     		ldr	r3, [r3, #44]
 7746 00aa 194A     		ldr	r2, .L505+4
 7747 00ac 1360     		str	r3, [r2]
 7748              	.L502:
 7749              		.loc 1 5075 6 discriminator 3
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 230


 7750 00ae 7B6A     		ldr	r3, [r7, #36]
 7751 00b0 DA6A     		ldr	r2, [r3, #44]
 7752 00b2 1346     		mov	r3, r2
 7753 00b4 9B00     		lsls	r3, r3, #2
 7754 00b6 1344     		add	r3, r3, r2
 7755 00b8 9B00     		lsls	r3, r3, #2
 7756 00ba 164A     		ldr	r2, .L505+8
 7757 00bc 1A44     		add	r2, r2, r3
 7758 00be 7B6A     		ldr	r3, [r7, #36]
 7759 00c0 0433     		adds	r3, r3, #4
 7760 00c2 1946     		mov	r1, r3
 7761 00c4 1046     		mov	r0, r2
 7762 00c6 FFF7FEFF 		bl	vListInsertEnd
 7763 00ca 05E0     		b	.L503
 7764              	.L501:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7765              		.loc 1 5081 6 is_stmt 1
 7766 00cc 7B6A     		ldr	r3, [r7, #36]
 7767 00ce 1833     		adds	r3, r3, #24
 7768 00d0 1946     		mov	r1, r3
 7769 00d2 1148     		ldr	r0, .L505+12
 7770 00d4 FFF7FEFF 		bl	vListInsertEnd
 7771              	.L503:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7772              		.loc 1 5084 14
 7773 00d8 7B6A     		ldr	r3, [r7, #36]
 7774 00da DA6A     		ldr	r2, [r3, #44]
 7775              		.loc 1 5084 41
 7776 00dc 0F4B     		ldr	r3, .L505+16
 7777 00de 1B68     		ldr	r3, [r3]
 7778 00e0 DB6A     		ldr	r3, [r3, #44]
 7779              		.loc 1 5084 7
 7780 00e2 9A42     		cmp	r2, r3
 7781 00e4 08D9     		bls	.L498
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7782              		.loc 1 5088 8
 7783 00e6 3B68     		ldr	r3, [r7]
 7784 00e8 002B     		cmp	r3, #0
 7785 00ea 02D0     		beq	.L504
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7786              		.loc 1 5090 34
 7787 00ec 3B68     		ldr	r3, [r7]
 7788 00ee 0122     		movs	r2, #1
 7789 00f0 1A60     		str	r2, [r3]
 7790              	.L504:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 231


5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7791              		.loc 1 5096 20
 7792 00f2 0B4B     		ldr	r3, .L505+20
 7793 00f4 0122     		movs	r2, #1
 7794 00f6 1A60     		str	r2, [r3]
 7795              	.L498:
 7796 00f8 3B6A     		ldr	r3, [r7, #32]
 7797 00fa BB60     		str	r3, [r7, #8]
 7798              	.LBB238:
 7799              	.LBB239:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7800              		.loc 2 229 2
 7801 00fc BB68     		ldr	r3, [r7, #8]
 7802              		.syntax unified
 7803              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7804 00fe 83F31188 			msr basepri, r3	
 7805              	@ 0 "" 2
 7806              		.loc 2 233 1
 7807              		.thumb
 7808              		.syntax unified
 7809 0102 00BF     		nop
 7810              	.LBE239:
 7811              	.LBE238:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7812              		.loc 1 5105 2
 7813 0104 00BF     		nop
 7814 0106 2837     		adds	r7, r7, #40
 7815              	.LCFI299:
 7816              		.cfi_def_cfa_offset 8
 7817 0108 BD46     		mov	sp, r7
 7818              	.LCFI300:
 7819              		.cfi_def_cfa_register 13
 7820              		@ sp needed
 7821 010a 80BD     		pop	{r7, pc}
 7822              	.L506:
 7823              		.align	2
 7824              	.L505:
 7825 010c 00000000 		.word	uxSchedulerSuspended
 7826 0110 00000000 		.word	uxTopReadyPriority
 7827 0114 00000000 		.word	pxReadyTasksLists
 7828 0118 00000000 		.word	xPendingReadyList
 7829 011c 00000000 		.word	pxCurrentTCB
 7830 0120 00000000 		.word	xYieldPending
 7831              		.cfi_endproc
 7832              	.LFE62:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 232


 7834              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7835              		.align	1
 7836              		.global	xTaskNotifyStateClear
 7837              		.syntax unified
 7838              		.thumb
 7839              		.thumb_func
 7841              	xTaskNotifyStateClear:
 7842              	.LFB63:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7843              		.loc 1 5113 2
 7844              		.cfi_startproc
 7845              		@ args = 0, pretend = 0, frame = 16
 7846              		@ frame_needed = 1, uses_anonymous_args = 0
 7847 0000 80B5     		push	{r7, lr}
 7848              	.LCFI301:
 7849              		.cfi_def_cfa_offset 8
 7850              		.cfi_offset 7, -8
 7851              		.cfi_offset 14, -4
 7852 0002 84B0     		sub	sp, sp, #16
 7853              	.LCFI302:
 7854              		.cfi_def_cfa_offset 24
 7855 0004 00AF     		add	r7, sp, #0
 7856              	.LCFI303:
 7857              		.cfi_def_cfa_register 7
 7858 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7859              		.loc 1 5119 11
 7860 0008 7B68     		ldr	r3, [r7, #4]
 7861 000a 002B     		cmp	r3, #0
 7862 000c 02D1     		bne	.L508
 7863              		.loc 1 5119 11 is_stmt 0 discriminator 1
 7864 000e 0E4B     		ldr	r3, .L513
 7865 0010 1B68     		ldr	r3, [r3]
 7866 0012 00E0     		b	.L509
 7867              	.L508:
 7868              		.loc 1 5119 11 discriminator 2
 7869 0014 7B68     		ldr	r3, [r7, #4]
 7870              	.L509:
 7871              		.loc 1 5119 9 is_stmt 1 discriminator 4
 7872 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7873              		.loc 1 5121 3 discriminator 4
 7874 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 233


5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7875              		.loc 1 5123 13 discriminator 4
 7876 001c BB68     		ldr	r3, [r7, #8]
 7877 001e 93F85830 		ldrb	r3, [r3, #88]
 7878 0022 DBB2     		uxtb	r3, r3
 7879              		.loc 1 5123 6 discriminator 4
 7880 0024 022B     		cmp	r3, #2
 7881 0026 06D1     		bne	.L510
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7882              		.loc 1 5125 26
 7883 0028 BB68     		ldr	r3, [r7, #8]
 7884 002a 0022     		movs	r2, #0
 7885 002c 83F85820 		strb	r2, [r3, #88]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7886              		.loc 1 5126 13
 7887 0030 0123     		movs	r3, #1
 7888 0032 FB60     		str	r3, [r7, #12]
 7889 0034 01E0     		b	.L511
 7890              	.L510:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7891              		.loc 1 5130 13
 7892 0036 0023     		movs	r3, #0
 7893 0038 FB60     		str	r3, [r7, #12]
 7894              	.L511:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7895              		.loc 1 5133 3
 7896 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7897              		.loc 1 5135 10
 7898 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7899              		.loc 1 5136 2
 7900 0040 1846     		mov	r0, r3
 7901 0042 1037     		adds	r7, r7, #16
 7902              	.LCFI304:
 7903              		.cfi_def_cfa_offset 8
 7904 0044 BD46     		mov	sp, r7
 7905              	.LCFI305:
 7906              		.cfi_def_cfa_register 13
 7907              		@ sp needed
 7908 0046 80BD     		pop	{r7, pc}
 7909              	.L514:
 7910              		.align	2
 7911              	.L513:
 7912 0048 00000000 		.word	pxCurrentTCB
 7913              		.cfi_endproc
 7914              	.LFE63:
 7916              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7917              		.align	1
 7918              		.global	ulTaskNotifyValueClear
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 234


 7919              		.syntax unified
 7920              		.thumb
 7921              		.thumb_func
 7923              	ulTaskNotifyValueClear:
 7924              	.LFB64:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7925              		.loc 1 5144 2
 7926              		.cfi_startproc
 7927              		@ args = 0, pretend = 0, frame = 16
 7928              		@ frame_needed = 1, uses_anonymous_args = 0
 7929 0000 80B5     		push	{r7, lr}
 7930              	.LCFI306:
 7931              		.cfi_def_cfa_offset 8
 7932              		.cfi_offset 7, -8
 7933              		.cfi_offset 14, -4
 7934 0002 84B0     		sub	sp, sp, #16
 7935              	.LCFI307:
 7936              		.cfi_def_cfa_offset 24
 7937 0004 00AF     		add	r7, sp, #0
 7938              	.LCFI308:
 7939              		.cfi_def_cfa_register 7
 7940 0006 7860     		str	r0, [r7, #4]
 7941 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7942              		.loc 1 5150 11
 7943 000a 7B68     		ldr	r3, [r7, #4]
 7944 000c 002B     		cmp	r3, #0
 7945 000e 02D1     		bne	.L516
 7946              		.loc 1 5150 11 is_stmt 0 discriminator 1
 7947 0010 0C4B     		ldr	r3, .L519
 7948 0012 1B68     		ldr	r3, [r3]
 7949 0014 00E0     		b	.L517
 7950              	.L516:
 7951              		.loc 1 5150 11 discriminator 2
 7952 0016 7B68     		ldr	r3, [r7, #4]
 7953              	.L517:
 7954              		.loc 1 5150 9 is_stmt 1 discriminator 4
 7955 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7956              		.loc 1 5152 3 discriminator 4
 7957 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 235


5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7958              		.loc 1 5156 27 discriminator 4
 7959 001e 094B     		ldr	r3, .L519
 7960 0020 1B68     		ldr	r3, [r3]
 7961              		.loc 1 5156 13 discriminator 4
 7962 0022 5B6D     		ldr	r3, [r3, #84]
 7963 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 7964              		.loc 1 5157 27 discriminator 4
 7965 0026 FB68     		ldr	r3, [r7, #12]
 7966 0028 5A6D     		ldr	r2, [r3, #84]
 7967              		.loc 1 5157 30 discriminator 4
 7968 002a 3B68     		ldr	r3, [r7]
 7969 002c DB43     		mvns	r3, r3
 7970              		.loc 1 5157 27 discriminator 4
 7971 002e 1A40     		ands	r2, r2, r3
 7972 0030 FB68     		ldr	r3, [r7, #12]
 7973 0032 5A65     		str	r2, [r3, #84]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7974              		.loc 1 5159 3 discriminator 4
 7975 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 7976              		.loc 1 5161 10 discriminator 4
 7977 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7978              		.loc 1 5162 2 discriminator 4
 7979 003a 1846     		mov	r0, r3
 7980 003c 1037     		adds	r7, r7, #16
 7981              	.LCFI309:
 7982              		.cfi_def_cfa_offset 8
 7983 003e BD46     		mov	sp, r7
 7984              	.LCFI310:
 7985              		.cfi_def_cfa_register 13
 7986              		@ sp needed
 7987 0040 80BD     		pop	{r7, pc}
 7988              	.L520:
 7989 0042 00BF     		.align	2
 7990              	.L519:
 7991 0044 00000000 		.word	pxCurrentTCB
 7992              		.cfi_endproc
 7993              	.LFE64:
 7995              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7996              		.align	1
 7997              		.syntax unified
 7998              		.thumb
 7999              		.thumb_func
 8001              	prvAddCurrentTaskToDelayedList:
 8002              	.LFB65:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 236


5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8003              		.loc 1 5178 1
 8004              		.cfi_startproc
 8005              		@ args = 0, pretend = 0, frame = 16
 8006              		@ frame_needed = 1, uses_anonymous_args = 0
 8007 0000 80B5     		push	{r7, lr}
 8008              	.LCFI311:
 8009              		.cfi_def_cfa_offset 8
 8010              		.cfi_offset 7, -8
 8011              		.cfi_offset 14, -4
 8012 0002 84B0     		sub	sp, sp, #16
 8013              	.LCFI312:
 8014              		.cfi_def_cfa_offset 24
 8015 0004 00AF     		add	r7, sp, #0
 8016              	.LCFI313:
 8017              		.cfi_def_cfa_register 7
 8018 0006 7860     		str	r0, [r7, #4]
 8019 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8020              		.loc 1 5180 18
 8021 000a 214B     		ldr	r3, .L526
 8022 000c 1B68     		ldr	r3, [r3]
 8023 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8024              		.loc 1 5193 35
 8025 0010 204B     		ldr	r3, .L526+4
 8026 0012 1B68     		ldr	r3, [r3]
 8027              		.loc 1 5193 6
 8028 0014 0433     		adds	r3, r3, #4
 8029 0016 1846     		mov	r0, r3
 8030 0018 FFF7FEFF 		bl	uxListRemove
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 237


5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8031              		.loc 1 5206 5
 8032 001c 7B68     		ldr	r3, [r7, #4]
 8033 001e B3F1FF3F 		cmp	r3, #-1
 8034 0022 0AD1     		bne	.L522
 8035              		.loc 1 5206 41 discriminator 1
 8036 0024 3B68     		ldr	r3, [r7]
 8037 0026 002B     		cmp	r3, #0
 8038 0028 07D0     		beq	.L522
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8039              		.loc 1 5211 56
 8040 002a 1A4B     		ldr	r3, .L526+4
 8041 002c 1B68     		ldr	r3, [r3]
 8042              		.loc 1 5211 4
 8043 002e 0433     		adds	r3, r3, #4
 8044 0030 1946     		mov	r1, r3
 8045 0032 1948     		ldr	r0, .L526+8
 8046 0034 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 238


5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8047              		.loc 1 5286 1
 8048 0038 26E0     		b	.L525
 8049              	.L522:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8050              		.loc 1 5218 16
 8051 003a FA68     		ldr	r2, [r7, #12]
 8052 003c 7B68     		ldr	r3, [r7, #4]
 8053 003e 1344     		add	r3, r3, r2
 8054 0040 BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 239


 8055              		.loc 1 5221 4
 8056 0042 144B     		ldr	r3, .L526+4
 8057 0044 1B68     		ldr	r3, [r3]
 8058 0046 BA68     		ldr	r2, [r7, #8]
 8059 0048 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8060              		.loc 1 5223 6
 8061 004a BA68     		ldr	r2, [r7, #8]
 8062 004c FB68     		ldr	r3, [r7, #12]
 8063 004e 9A42     		cmp	r2, r3
 8064 0050 09D2     		bcs	.L524
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8065              		.loc 1 5227 5
 8066 0052 124B     		ldr	r3, .L526+12
 8067 0054 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8068              		.loc 1 5227 60
 8069 0056 0F4B     		ldr	r3, .L526+4
 8070 0058 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8071              		.loc 1 5227 5
 8072 005a 0433     		adds	r3, r3, #4
 8073 005c 1946     		mov	r1, r3
 8074 005e 1046     		mov	r0, r2
 8075 0060 FFF7FEFF 		bl	vListInsert
 8076              		.loc 1 5286 1
 8077 0064 10E0     		b	.L525
 8078              	.L524:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8079              		.loc 1 5233 5
 8080 0066 0E4B     		ldr	r3, .L526+16
 8081 0068 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8082              		.loc 1 5233 52
 8083 006a 0A4B     		ldr	r3, .L526+4
 8084 006c 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8085              		.loc 1 5233 5
 8086 006e 0433     		adds	r3, r3, #4
 8087 0070 1946     		mov	r1, r3
 8088 0072 1046     		mov	r0, r2
 8089 0074 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8090              		.loc 1 5238 21
 8091 0078 0A4B     		ldr	r3, .L526+20
 8092 007a 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8093              		.loc 1 5238 7
 8094 007c BA68     		ldr	r2, [r7, #8]
 8095 007e 9A42     		cmp	r2, r3
 8096 0080 02D2     		bcs	.L525
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8097              		.loc 1 5240 27
 8098 0082 084A     		ldr	r2, .L526+20
 8099 0084 BB68     		ldr	r3, [r7, #8]
 8100 0086 1360     		str	r3, [r2]
 8101              	.L525:
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 240


 8102              		.loc 1 5286 1
 8103 0088 00BF     		nop
 8104 008a 1037     		adds	r7, r7, #16
 8105              	.LCFI314:
 8106              		.cfi_def_cfa_offset 8
 8107 008c BD46     		mov	sp, r7
 8108              	.LCFI315:
 8109              		.cfi_def_cfa_register 13
 8110              		@ sp needed
 8111 008e 80BD     		pop	{r7, pc}
 8112              	.L527:
 8113              		.align	2
 8114              	.L526:
 8115 0090 00000000 		.word	xTickCount
 8116 0094 00000000 		.word	pxCurrentTCB
 8117 0098 00000000 		.word	xSuspendedTaskList
 8118 009c 00000000 		.word	pxOverflowDelayedTaskList
 8119 00a0 00000000 		.word	pxDelayedTaskList
 8120 00a4 00000000 		.word	xNextTaskUnblockTime
 8121              		.cfi_endproc
 8122              	.LFE65:
 8124              		.text
 8125              	.Letext0:
 8126              		.file 3 "c:\\dev\\tool\\gcc-arm-11.2-2022.02-mingw-w64-i686-arm-none-eabi\\lib\\gcc\\arm-none-eabi
 8127              		.file 4 "c:\\dev\\tool\\gcc-arm-11.2-2022.02-mingw-w64-i686-arm-none-eabi\\arm-none-eabi\\include\
 8128              		.file 5 "c:\\dev\\tool\\gcc-arm-11.2-2022.02-mingw-w64-i686-arm-none-eabi\\arm-none-eabi\\include\
 8129              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8130              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8131              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8132              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 8133              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 8134              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 8135              		.file 12 "c:\\dev\\tool\\gcc-arm-11.2-2022.02-mingw-w64-i686-arm-none-eabi\\arm-none-eabi\\include
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 241


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:21     .bss.pxCurrentTCB:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:27     .bss.pxReadyTasksLists:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:33     .bss.xDelayedTaskList1:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:39     .bss.xDelayedTaskList2:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:45     .bss.pxDelayedTaskList:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:51     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:57     .bss.xPendingReadyList:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:60     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:63     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:75     .bss.xSuspendedTaskList:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:81     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:87     .bss.xTickCount:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:90     .bss.xTickCount:00000000 xTickCount
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:93     .bss.uxTopReadyPriority:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:99     .bss.xSchedulerRunning:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:105    .bss.xPendedTicks:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:108    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:111    .bss.xYieldPending:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:114    .bss.xYieldPending:00000000 xYieldPending
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:117    .bss.xNumOfOverflows:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:123    .bss.uxTaskNumber:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:126    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:129    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:135    .bss.xIdleTaskHandle:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:141    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:144    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:147    .text.xTaskCreateStatic:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:153    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:438    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:655    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:319    .text.xTaskCreate:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:325    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:433    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:650    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5130   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:805    .text.prvAddNewTaskToReadyList:000000c4 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:816    .text.vTaskDelete:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:822    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5749   .text.prvDeleteTCB:00000000 prvDeleteTCB
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 242


C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5843   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:981    .text.vTaskDelete:000000c4 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:993    .text.vTaskDelayUntil:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:999    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2776   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:8001   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2822   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1206   .text.vTaskDelayUntil:000000f0 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1213   .text.vTaskDelay:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1219   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1312   .text.vTaskDelay:00000060 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1318   .text.eTaskGetState:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1324   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1482   .text.eTaskGetState:000000b8 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1491   .text.uxTaskPriorityGet:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1497   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1552   .text.uxTaskPriorityGet:00000030 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1557   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1563   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1654   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1659   .text.vTaskPrioritySet:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1665   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1895   .text.vTaskPrioritySet:0000012c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1903   .text.vTaskSuspend:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:1909   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3842   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2081   .text.vTaskSuspend:000000d4 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2091   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2096   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2189   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2195   .text.vTaskResume:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2201   .text.vTaskResume:00000000 vTaskResume
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2340   .text.vTaskResume:000000ac $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2348   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2354   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2527   .text.xTaskResumeFromISR:000000d0 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2536   .rodata:00000000 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2540   .text.vTaskStartScheduler:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2546   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2695   .text.vTaskStartScheduler:000000b4 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5074   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2705   .text.vTaskEndScheduler:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2711   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2765   .text.vTaskEndScheduler:0000002c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2770   .text.vTaskSuspendAll:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2811   .text.vTaskSuspendAll:00000018 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:2816   .text.xTaskResumeAll:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3575   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3041   .text.xTaskResumeAll:00000118 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3054   .text.xTaskGetTickCount:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3060   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3100   .text.xTaskGetTickCount:0000001c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3105   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3111   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3152   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3157   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3163   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 243


C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3194   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3199   .text.pcTaskGetName:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3205   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3283   .text.pcTaskGetName:00000044 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3288   .text.uxTaskGetSystemState:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3294   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5480   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3472   .text.uxTaskGetSystemState:00000104 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3482   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3488   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3563   .text.xTaskCatchUpTicks:0000004c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3569   .text.xTaskIncrementTick:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3821   .text.xTaskIncrementTick:00000148 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3836   .text.vTaskSwitchContext:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3982   .text.vTaskSwitchContext:000000a8 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3991   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:3997   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4067   .text.vTaskPlaceOnEventList:00000044 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4072   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4078   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4182   .text.vTaskPlaceOnUnorderedEventList:00000070 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4188   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4194   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4273   .text.vTaskPlaceOnEventListRestricted:00000054 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4278   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4284   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4424   .text.xTaskRemoveFromEventList:000000b0 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4434   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4440   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4584   .text.vTaskRemoveFromUnorderedEventList:000000b0 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4593   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4599   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4670   .text.vTaskSetTimeOutState:00000044 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4676   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4682   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4727   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4733   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4739   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4904   .text.xTaskCheckForTimeOut:000000bc $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4910   .text.vTaskMissedYield:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4916   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4948   .text.vTaskMissedYield:00000014 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4953   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:4959   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5014   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5020   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5069   .text.prvIdleTask:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5225   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5119   .text.prvIdleTask:00000028 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5125   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5208   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5220   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5297   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5304   .text.vTaskGetInfo:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5310   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5612   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5470   .text.vTaskGetInfo:000000c8 $d
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 244


C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5475   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5607   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5676   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5682   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5739   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5744   .text.prvDeleteTCB:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5838   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5905   .text.prvResetNextTaskUnblockTime:00000038 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5911   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5917   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5957   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5962   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:5968   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6030   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6036   .text.xTaskPriorityInherit:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6042   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6191   .text.xTaskPriorityInherit:000000c4 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6198   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6204   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6372   .text.xTaskPriorityDisinherit:000000d0 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6379   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6385   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6579   .text.vTaskPriorityDisinheritAfterTimeout:000000f8 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6586   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6592   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6642   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6647   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6653   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6698   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6703   .text.ulTaskNotifyTake:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6709   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6823   .text.ulTaskNotifyTake:00000088 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6829   .text.xTaskNotifyWait:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6835   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6970   .text.xTaskNotifyWait:000000ac $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6976   .text.xTaskGenericNotify:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:6982   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7065   .text.xTaskGenericNotify:00000064 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7070   .text.xTaskGenericNotify:00000078 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7254   .text.xTaskGenericNotify:00000160 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7262   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7268   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7373   .text.xTaskGenericNotifyFromISR:00000080 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7378   .text.xTaskGenericNotifyFromISR:00000094 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7591   .text.xTaskGenericNotifyFromISR:000001a0 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7601   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7607   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7825   .text.vTaskNotifyGiveFromISR:0000010c $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7835   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7841   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7912   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7917   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7923   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7991   .text.ulTaskNotifyValueClear:00000044 $d
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:7996   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s:8115   .text.prvAddCurrentTaskToDelayedList:00000090 $d
                           .group:00000000 wm4.0.adf14caa46e67022f385f91b18884ae8
ARM GAS  C:\Users\Bunyamin\AppData\Local\Temp\ccx4WoGD.s 			page 245


                           .group:00000000 wm4.ieeefp.h.77.c88535c35f465c05b101960cf0179075
                           .group:00000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:00000000 wm4.newlib.h.18.efd6f55802c49f72b3c697ccf45db7f0
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:00000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.c0958401bd0ce484d507ee19aacab817
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.cdefs.h.49.39045112216f6a021dbdffe3bf5accce
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.FreeRTOSConfig.h.32.5314d66ec2de84b02aa94058238983ac
                           .group:00000000 wm4.projdefs.h.29.3472c8470d131a5f474bc7437ea94609
                           .group:00000000 wm4.portmacro.h.30.ebb5f3ce711e1dad21b3172c9bc8e19f
                           .group:00000000 wm4.portable.h.64.742f2ce568820e866a7b541b4c77966f
                           .group:00000000 wm4.mpu_wrappers.h.29.4f9aea82ee68d943d141825e5294de63
                           .group:00000000 wm4.FreeRTOS.h.66.fce9f915b49415550a89f4c8aa907062
                           .group:00000000 wm4.list.h.61.5c5a38f6bc6687eed6d893e57dabd8e6
                           .group:00000000 wm4.task.h.46.9fb92b2c1a30a52e436f6063552b709b
                           .group:00000000 wm4.timers.h.54.4ae1ba250ac92e2885786e6070ecf197
                           .group:00000000 wm4.stack_macros.h.29.6b7843e188f2d273e6836785e6906ca7

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
